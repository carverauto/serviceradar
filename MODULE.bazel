module(
    name = "serviceradar",
    version = "0.0.0",
    repo_name = "serviceradar",
)

# Core language ecosystems
bazel_dep(name = "rules_go", version = "0.57.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.45.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_rust", version = "0.65.0")
bazel_dep(name = "rules_python", version = "1.6.1")
bazel_dep(name = "rules_nodejs", version = "6.5.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "aspect_rules_js", version = "2.6.0")

archive_override(
    module_name = "rules_ocaml",
    integrity = "sha256-tLySsR7GfBvk49b3kLRa8h0YYxAjKlHHzs1ox4BKVTI=",
    strip_prefix = "rules_ocaml-2.1.0",
    urls = [
        "https://github.com/obazl/rules_ocaml/archive/refs/tags/2.1.0.tar.gz",
    ],
)

bazel_dep(name = "rules_ocaml", version = "2.1.0")

# TODO(bazel-migration): rules_ocaml is not yet in the Bazel Central Registry.
# Add an archive_override/use_extension once a release is selected.

# --- Go toolchain & dependency management ----------------------------------

go_sdk = use_extension(
    "@io_bazel_rules_go//go:extensions.bzl",
    "go_sdk",
)
go_sdk.from_file(go_mod = "//:go.mod")
use_repo(go_sdk, "go_sdk")

go_deps = use_extension(
    "@bazel_gazelle//:extensions.bzl",
    "go_deps",
)
go_deps.from_file(go_mod = "//:go.mod")

# NOTE: `bazel mod tidy` populates the list of repositories below based on the
# contents of go.mod. Keep the list sorted for readability.
use_repo(
    go_deps,
    "com_github_antlr4_go_antlr_v4",
    "com_github_atotto_clipboard",
    "com_github_charmbracelet_bubbles",
    "com_github_charmbracelet_bubbletea",
    "com_github_charmbracelet_lipgloss",
    "com_github_golang_jwt_jwt_v4",
    "com_github_google_uuid",
    "com_github_gorilla_mux",
    "com_github_gorilla_websocket",
    "com_github_gosnmp_gosnmp",
    "com_github_markbates_goth",
    "com_github_nats_io_nats_go",
    "com_github_rs_zerolog",
    "com_github_spiffe_go_spiffe_v2",
    "com_github_stretchr_testify",
    "com_github_swaggo_http_swagger",
    "com_github_swaggo_swag",
    "com_github_timeplus_io_proton_go_driver_v2",
    "io_opentelemetry_go_contrib_instrumentation_github_com_gorilla_mux_otelmux",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_exporters_otlp_otlplog_otlploggrpc",
    "io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc",
    "io_opentelemetry_go_otel_log",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel_sdk_log",
    "io_opentelemetry_go_otel_trace",
    "io_opentelemetry_go_proto_otlp",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_crypto",
    "org_golang_x_net",
    "org_golang_x_sys",
    "org_uber_go_mock",
)

# --- Rust toolchain bootstrap -----------------------------------------------
RUST_DEFAULT_VERSION = "1.82.0"

RUST_EDITION = "2021"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    versions = [RUST_DEFAULT_VERSION],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# TODO(bazel-migration): add rust_host_tools for pinned host binaries and wire up
# cargo-raze generated dependencies when Rust targets are migrated.

# --- Node.js toolchain -------------------------------------------------------
NODE_VERSION = "22.13.1"

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = NODE_VERSION)
use_repo(node, "nodejs_toolchains")

register_toolchains(
    "@nodejs_toolchains//:darwin_amd64_toolchain_target",
    "@nodejs_toolchains//:darwin_amd64_toolchain",
    "@nodejs_toolchains//:darwin_arm64_toolchain_target",
    "@nodejs_toolchains//:darwin_arm64_toolchain",
    "@nodejs_toolchains//:linux_amd64_toolchain_target",
    "@nodejs_toolchains//:linux_amd64_toolchain",
    "@nodejs_toolchains//:linux_arm64_toolchain_target",
    "@nodejs_toolchains//:linux_arm64_toolchain",
)

# --- npm dependency ingestion ------------------------------------------------

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    dev = True,
    npmrc = "//web:.npmrc",
    pnpm_lock = "//web:pnpm-lock.yaml",
    root_package = "web",
)
use_repo(npm, "npm")

# TODO(bazel-migration): add npm package visibility/hoisting configuration and
# integrate additional js tooling once Bazel targets exist.

# Additional module extensions will be layered in as language owners migrate to
# Bazel (e.g., http_file for binary deps).
