//
// Copyright 2025 Carver Automation Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: monitoring.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_GetStatus_FullMethodName     = "/monitoring.AgentService/GetStatus"
	AgentService_GetResults_FullMethodName    = "/monitoring.AgentService/GetResults"
	AgentService_StreamResults_FullMethodName = "/monitoring.AgentService/StreamResults"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
	StreamResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResultsChunk], error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, AgentService_GetResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StreamResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResultsChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_StreamResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ResultsRequest, ResultsChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamResultsClient = grpc.ServerStreamingClient[ResultsChunk]

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
type AgentServiceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	GetResults(context.Context, *ResultsRequest) (*ResultsResponse, error)
	StreamResults(*ResultsRequest, grpc.ServerStreamingServer[ResultsChunk]) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAgentServiceServer) GetResults(context.Context, *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedAgentServiceServer) StreamResults(*ResultsRequest, grpc.ServerStreamingServer[ResultsChunk]) error {
	return status.Errorf(codes.Unimplemented, "method StreamResults not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetResults(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StreamResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).StreamResults(m, &grpc.GenericServerStream[ResultsRequest, ResultsChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StreamResultsServer = grpc.ServerStreamingServer[ResultsChunk]

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _AgentService_GetStatus_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _AgentService_GetResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResults",
			Handler:       _AgentService_StreamResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}

const (
	PollerService_ReportStatus_FullMethodName = "/monitoring.PollerService/ReportStatus"
	PollerService_StreamStatus_FullMethodName = "/monitoring.PollerService/StreamStatus"
)

// PollerServiceClient is the client API for PollerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollerServiceClient interface {
	ReportStatus(ctx context.Context, in *PollerStatusRequest, opts ...grpc.CallOption) (*PollerStatusResponse, error)
	StreamStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PollerStatusChunk, PollerStatusResponse], error)
}

type pollerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollerServiceClient(cc grpc.ClientConnInterface) PollerServiceClient {
	return &pollerServiceClient{cc}
}

func (c *pollerServiceClient) ReportStatus(ctx context.Context, in *PollerStatusRequest, opts ...grpc.CallOption) (*PollerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PollerStatusResponse)
	err := c.cc.Invoke(ctx, PollerService_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollerServiceClient) StreamStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PollerStatusChunk, PollerStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PollerService_ServiceDesc.Streams[0], PollerService_StreamStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PollerStatusChunk, PollerStatusResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PollerService_StreamStatusClient = grpc.ClientStreamingClient[PollerStatusChunk, PollerStatusResponse]

// PollerServiceServer is the server API for PollerService service.
// All implementations must embed UnimplementedPollerServiceServer
// for forward compatibility.
type PollerServiceServer interface {
	ReportStatus(context.Context, *PollerStatusRequest) (*PollerStatusResponse, error)
	StreamStatus(grpc.ClientStreamingServer[PollerStatusChunk, PollerStatusResponse]) error
	mustEmbedUnimplementedPollerServiceServer()
}

// UnimplementedPollerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPollerServiceServer struct{}

func (UnimplementedPollerServiceServer) ReportStatus(context.Context, *PollerStatusRequest) (*PollerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedPollerServiceServer) StreamStatus(grpc.ClientStreamingServer[PollerStatusChunk, PollerStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStatus not implemented")
}
func (UnimplementedPollerServiceServer) mustEmbedUnimplementedPollerServiceServer() {}
func (UnimplementedPollerServiceServer) testEmbeddedByValue()                       {}

// UnsafePollerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollerServiceServer will
// result in compilation errors.
type UnsafePollerServiceServer interface {
	mustEmbedUnimplementedPollerServiceServer()
}

func RegisterPollerServiceServer(s grpc.ServiceRegistrar, srv PollerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPollerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PollerService_ServiceDesc, srv)
}

func _PollerService_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollerServiceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollerService_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollerServiceServer).ReportStatus(ctx, req.(*PollerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollerService_StreamStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PollerServiceServer).StreamStatus(&grpc.GenericServerStream[PollerStatusChunk, PollerStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PollerService_StreamStatusServer = grpc.ClientStreamingServer[PollerStatusChunk, PollerStatusResponse]

// PollerService_ServiceDesc is the grpc.ServiceDesc for PollerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.PollerService",
	HandlerType: (*PollerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportStatus",
			Handler:    _PollerService_ReportStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStatus",
			Handler:       _PollerService_StreamStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}
