/*
 * Copyright 2025 Carver Automation Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package proto;

option go_package = "github.com/carverauto/serviceradar/proto";

// DataService exposes JetStream-backed object storage operations.
service DataService {
  // UploadObject streams an object payload into the JetStream object store.
  rpc UploadObject(stream ObjectUploadChunk) returns (UploadObjectResponse) {}

  // DownloadObject streams the contents of an object from the JetStream object store.
  rpc DownloadObject(DownloadObjectRequest) returns (stream ObjectDownloadChunk) {}

  // DeleteObject removes an object from the JetStream object store.
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {}

  // GetObjectInfo retrieves metadata for an object without returning its payload.
  rpc GetObjectInfo(GetObjectInfoRequest) returns (GetObjectInfoResponse) {}
}

// ObjectMetadata captures descriptive attributes for an object stored in JetStream.
message ObjectMetadata {
  string key = 1; // Logical identifier, may include domains/<domain>/ prefix.
  string domain = 2; // Optional JetStream domain name.
  string content_type = 3; // MIME type of the payload if known.
  string compression = 4; // Compression algorithm applied to payload, if any.
  string sha256 = 5; // Hex-encoded SHA256 digest hint provided by the client.
  int64 total_size = 6; // Expected uncompressed payload size (bytes).
  map<string, string> attributes = 7; // Additional metadata fields.
}

// ObjectUploadChunk represents a chunk streamed by the client when uploading an object.
// The first chunk MUST include metadata; subsequent chunks may omit it.
message ObjectUploadChunk {
  ObjectMetadata metadata = 1;
  bytes data = 2;
  uint32 chunk_index = 3;
  bool is_final = 4;
}

// ObjectInfo captures server-observed metadata for a stored object.
message ObjectInfo {
  ObjectMetadata metadata = 1;
  string sha256 = 2;
  int64 size = 3;
  int64 created_at_unix = 4;
  int64 modified_at_unix = 5;
  uint64 chunks = 6;
}

// UploadObjectResponse provides the stored object metadata after a successful upload.
message UploadObjectResponse {
  ObjectInfo info = 1;
}

// DownloadObjectRequest identifies the object to stream back to the client.
message DownloadObjectRequest {
  string key = 1;
}

// ObjectDownloadChunk is streamed from the server during object downloads.
message ObjectDownloadChunk {
  ObjectInfo info = 1;
  bytes data = 2;
  uint32 chunk_index = 3;
  bool is_final = 4;
}

// DeleteObjectRequest identifies the object to delete.
message DeleteObjectRequest {
  string key = 1;
}

// DeleteObjectResponse reports whether an object was deleted.
message DeleteObjectResponse {
  bool deleted = 1;
}

// GetObjectInfoRequest identifies the object to inspect.
message GetObjectInfoRequest {
  string key = 1;
}

// GetObjectInfoResponse returns metadata for the requested object.
message GetObjectInfoResponse {
  ObjectInfo info = 1;
  bool found = 2;
}
