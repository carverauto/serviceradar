// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rperf/rperf.proto

package rperf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RPerfService_RunTest_FullMethodName   = "/rperf.RPerfService/RunTest"
	RPerfService_GetStatus_FullMethodName = "/rperf.RPerfService/GetStatus"
)

// RPerfServiceClient is the client API for RPerfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The RPerf service definition
type RPerfServiceClient interface {
	// RunTest starts a network test and returns results
	RunTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	// GetStatus returns the current status of the service
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type rPerfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPerfServiceClient(cc grpc.ClientConnInterface) RPerfServiceClient {
	return &rPerfServiceClient{cc}
}

func (c *rPerfServiceClient) RunTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, RPerfService_RunTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPerfServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RPerfService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPerfServiceServer is the server API for RPerfService service.
// All implementations must embed UnimplementedRPerfServiceServer
// for forward compatibility.
//
// The RPerf service definition
type RPerfServiceServer interface {
	// RunTest starts a network test and returns results
	RunTest(context.Context, *TestRequest) (*TestResponse, error)
	// GetStatus returns the current status of the service
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedRPerfServiceServer()
}

// UnimplementedRPerfServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPerfServiceServer struct{}

func (UnimplementedRPerfServiceServer) RunTest(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}
func (UnimplementedRPerfServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedRPerfServiceServer) mustEmbedUnimplementedRPerfServiceServer() {}
func (UnimplementedRPerfServiceServer) testEmbeddedByValue()                      {}

// UnsafeRPerfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPerfServiceServer will
// result in compilation errors.
type UnsafeRPerfServiceServer interface {
	mustEmbedUnimplementedRPerfServiceServer()
}

func RegisterRPerfServiceServer(s grpc.ServiceRegistrar, srv RPerfServiceServer) {
	// If the following call pancis, it indicates UnimplementedRPerfServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPerfService_ServiceDesc, srv)
}

func _RPerfService_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPerfServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPerfService_RunTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPerfServiceServer).RunTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPerfService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPerfServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPerfService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPerfServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPerfService_ServiceDesc is the grpc.ServiceDesc for RPerfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPerfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rperf.RPerfService",
	HandlerType: (*RPerfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _RPerfService_RunTest_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _RPerfService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rperf/rperf.proto",
}
