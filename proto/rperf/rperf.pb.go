//
// Copyright 2025 Carver Automation Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.14.0
// source: rperf/rperf.proto

package rperf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Test request parameters
type TestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetAddress string                 `protobuf:"bytes,1,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`   // The server to connect to
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                                         // The port to connect to
	Protocol      string                 `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`                                  // "tcp" or "udp"
	Reverse       bool                   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`                                   // Whether to run in reverse mode
	Bandwidth     uint64                 `protobuf:"varint,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`                               // Target bandwidth in bytes/sec
	Duration      float64                `protobuf:"fixed64,6,opt,name=duration,proto3" json:"duration,omitempty"`                                // Test duration in seconds
	Parallel      uint32                 `protobuf:"varint,7,opt,name=parallel,proto3" json:"parallel,omitempty"`                                 // Number of parallel streams
	Length        uint32                 `protobuf:"varint,8,opt,name=length,proto3" json:"length,omitempty"`                                     // Length of buffer to use
	Omit          uint32                 `protobuf:"varint,9,opt,name=omit,proto3" json:"omit,omitempty"`                                         // Seconds to omit from the start
	NoDelay       bool                   `protobuf:"varint,10,opt,name=no_delay,json=noDelay,proto3" json:"no_delay,omitempty"`                   // Use TCP no-delay option
	SendBuffer    uint32                 `protobuf:"varint,11,opt,name=send_buffer,json=sendBuffer,proto3" json:"send_buffer,omitempty"`          // Socket send buffer size
	ReceiveBuffer uint32                 `protobuf:"varint,12,opt,name=receive_buffer,json=receiveBuffer,proto3" json:"receive_buffer,omitempty"` // Socket receive buffer size
	SendInterval  float64                `protobuf:"fixed64,13,opt,name=send_interval,json=sendInterval,proto3" json:"send_interval,omitempty"`   // Send interval in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_rperf_rperf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rperf_rperf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_rperf_rperf_proto_rawDescGZIP(), []int{0}
}

func (x *TestRequest) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

func (x *TestRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TestRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TestRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *TestRequest) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *TestRequest) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestRequest) GetParallel() uint32 {
	if x != nil {
		return x.Parallel
	}
	return 0
}

func (x *TestRequest) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *TestRequest) GetOmit() uint32 {
	if x != nil {
		return x.Omit
	}
	return 0
}

func (x *TestRequest) GetNoDelay() bool {
	if x != nil {
		return x.NoDelay
	}
	return false
}

func (x *TestRequest) GetSendBuffer() uint32 {
	if x != nil {
		return x.SendBuffer
	}
	return 0
}

func (x *TestRequest) GetReceiveBuffer() uint32 {
	if x != nil {
		return x.ReceiveBuffer
	}
	return 0
}

func (x *TestRequest) GetSendInterval() float64 {
	if x != nil {
		return x.SendInterval
	}
	return 0
}

// Test response with results
type TestResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Success     bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                           // Whether the test completed successfully
	Error       string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                                // Error message, if any
	ResultsJson string                 `protobuf:"bytes,3,opt,name=results_json,json=resultsJson,proto3" json:"results_json,omitempty"` // Full results in JSON format
	// Summary metrics
	Summary       *TestSummary `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	mi := &file_rperf_rperf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rperf_rperf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_rperf_rperf_proto_rawDescGZIP(), []int{1}
}

func (x *TestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TestResponse) GetResultsJson() string {
	if x != nil {
		return x.ResultsJson
	}
	return ""
}

func (x *TestResponse) GetSummary() *TestSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Summary of test results
type TestSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      float64                `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`                                  // Test duration in seconds
	BytesSent     uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`                // Total bytes sent
	BytesReceived uint64                 `protobuf:"varint,3,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`    // Total bytes received
	BitsPerSecond float64                `protobuf:"fixed64,4,opt,name=bits_per_second,json=bitsPerSecond,proto3" json:"bits_per_second,omitempty"` // Throughput in bits per second
	// UDP-specific fields
	PacketsSent     uint64  `protobuf:"varint,5,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`             // UDP packets sent
	PacketsReceived uint64  `protobuf:"varint,6,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"` // UDP packets received
	PacketsLost     uint64  `protobuf:"varint,7,opt,name=packets_lost,json=packetsLost,proto3" json:"packets_lost,omitempty"`             // UDP packets lost
	LossPercent     float64 `protobuf:"fixed64,8,opt,name=loss_percent,json=lossPercent,proto3" json:"loss_percent,omitempty"`            // Packet loss percentage
	JitterMs        float64 `protobuf:"fixed64,9,opt,name=jitter_ms,json=jitterMs,proto3" json:"jitter_ms,omitempty"`                     // Jitter in milliseconds
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestSummary) Reset() {
	*x = TestSummary{}
	mi := &file_rperf_rperf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSummary) ProtoMessage() {}

func (x *TestSummary) ProtoReflect() protoreflect.Message {
	mi := &file_rperf_rperf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSummary.ProtoReflect.Descriptor instead.
func (*TestSummary) Descriptor() ([]byte, []int) {
	return file_rperf_rperf_proto_rawDescGZIP(), []int{2}
}

func (x *TestSummary) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestSummary) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *TestSummary) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TestSummary) GetBitsPerSecond() float64 {
	if x != nil {
		return x.BitsPerSecond
	}
	return 0
}

func (x *TestSummary) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *TestSummary) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *TestSummary) GetPacketsLost() uint64 {
	if x != nil {
		return x.PacketsLost
	}
	return 0
}

func (x *TestSummary) GetLossPercent() float64 {
	if x != nil {
		return x.LossPercent
	}
	return 0
}

func (x *TestSummary) GetJitterMs() float64 {
	if x != nil {
		return x.JitterMs
	}
	return 0
}

// Status request (empty for now)
type StatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	mi := &file_rperf_rperf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rperf_rperf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_rperf_rperf_proto_rawDescGZIP(), []int{3}
}

// Status response with service info
type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Available     bool                   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"` // Whether the service is available
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`      // Version information
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`      // Additional status information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_rperf_rperf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rperf_rperf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_rperf_rperf_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *StatusResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_rperf_rperf_proto protoreflect.FileDescriptor

const file_rperf_rperf_proto_rawDesc = "" +
	"\n" +
	"\x11rperf/rperf.proto\x12\x05rperf\"\x88\x03\n" +
	"\vTestRequest\x12%\n" +
	"\x0etarget_address\x18\x01 \x01(\tR\rtargetAddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\x12\x18\n" +
	"\areverse\x18\x04 \x01(\bR\areverse\x12\x1c\n" +
	"\tbandwidth\x18\x05 \x01(\x04R\tbandwidth\x12\x1a\n" +
	"\bduration\x18\x06 \x01(\x01R\bduration\x12\x1a\n" +
	"\bparallel\x18\a \x01(\rR\bparallel\x12\x16\n" +
	"\x06length\x18\b \x01(\rR\x06length\x12\x12\n" +
	"\x04omit\x18\t \x01(\rR\x04omit\x12\x19\n" +
	"\bno_delay\x18\n" +
	" \x01(\bR\anoDelay\x12\x1f\n" +
	"\vsend_buffer\x18\v \x01(\rR\n" +
	"sendBuffer\x12%\n" +
	"\x0ereceive_buffer\x18\f \x01(\rR\rreceiveBuffer\x12#\n" +
	"\rsend_interval\x18\r \x01(\x01R\fsendInterval\"\x8f\x01\n" +
	"\fTestResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12!\n" +
	"\fresults_json\x18\x03 \x01(\tR\vresultsJson\x12,\n" +
	"\asummary\x18\x04 \x01(\v2\x12.rperf.TestSummaryR\asummary\"\xc8\x02\n" +
	"\vTestSummary\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x01R\bduration\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x03 \x01(\x04R\rbytesReceived\x12&\n" +
	"\x0fbits_per_second\x18\x04 \x01(\x01R\rbitsPerSecond\x12!\n" +
	"\fpackets_sent\x18\x05 \x01(\x04R\vpacketsSent\x12)\n" +
	"\x10packets_received\x18\x06 \x01(\x04R\x0fpacketsReceived\x12!\n" +
	"\fpackets_lost\x18\a \x01(\x04R\vpacketsLost\x12!\n" +
	"\floss_percent\x18\b \x01(\x01R\vlossPercent\x12\x1b\n" +
	"\tjitter_ms\x18\t \x01(\x01R\bjitterMs\"\x0f\n" +
	"\rStatusRequest\"b\n" +
	"\x0eStatusResponse\x12\x1c\n" +
	"\tavailable\x18\x01 \x01(\bR\tavailable\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage2\x80\x01\n" +
	"\fRPerfService\x124\n" +
	"\aRunTest\x12\x12.rperf.TestRequest\x1a\x13.rperf.TestResponse\"\x00\x12:\n" +
	"\tGetStatus\x12\x14.rperf.StatusRequest\x1a\x15.rperf.StatusResponse\"\x00BGZEgithub.com/carverauto/serviceradar/cmd/checkers/rperf/src/proto/rperfb\x06proto3"

var (
	file_rperf_rperf_proto_rawDescOnce sync.Once
	file_rperf_rperf_proto_rawDescData []byte
)

func file_rperf_rperf_proto_rawDescGZIP() []byte {
	file_rperf_rperf_proto_rawDescOnce.Do(func() {
		file_rperf_rperf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rperf_rperf_proto_rawDesc), len(file_rperf_rperf_proto_rawDesc)))
	})
	return file_rperf_rperf_proto_rawDescData
}

var file_rperf_rperf_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rperf_rperf_proto_goTypes = []any{
	(*TestRequest)(nil),    // 0: rperf.TestRequest
	(*TestResponse)(nil),   // 1: rperf.TestResponse
	(*TestSummary)(nil),    // 2: rperf.TestSummary
	(*StatusRequest)(nil),  // 3: rperf.StatusRequest
	(*StatusResponse)(nil), // 4: rperf.StatusResponse
}
var file_rperf_rperf_proto_depIdxs = []int32{
	2, // 0: rperf.TestResponse.summary:type_name -> rperf.TestSummary
	0, // 1: rperf.RPerfService.RunTest:input_type -> rperf.TestRequest
	3, // 2: rperf.RPerfService.GetStatus:input_type -> rperf.StatusRequest
	1, // 3: rperf.RPerfService.RunTest:output_type -> rperf.TestResponse
	4, // 4: rperf.RPerfService.GetStatus:output_type -> rperf.StatusResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rperf_rperf_proto_init() }
func file_rperf_rperf_proto_init() {
	if File_rperf_rperf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rperf_rperf_proto_rawDesc), len(file_rperf_rperf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rperf_rperf_proto_goTypes,
		DependencyIndexes: file_rperf_rperf_proto_depIdxs,
		MessageInfos:      file_rperf_rperf_proto_msgTypes,
	}.Build()
	File_rperf_rperf_proto = out.File
	file_rperf_rperf_proto_goTypes = nil
	file_rperf_rperf_proto_depIdxs = nil
}
