// Code generated by MockGen. DO NOT EDIT.
// Source: monitoring_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=monitoring_grpc.pb.go -destination=mock_agent_service.go -package=proto AgentServiceClient,AgentService_StreamResultsClient
//

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAgentServiceClient is a mock of AgentServiceClient interface.
type MockAgentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceClientMockRecorder
	isgomock struct{}
}

// MockAgentServiceClientMockRecorder is the mock recorder for MockAgentServiceClient.
type MockAgentServiceClientMockRecorder struct {
	mock *MockAgentServiceClient
}

// NewMockAgentServiceClient creates a new mock instance.
func NewMockAgentServiceClient(ctrl *gomock.Controller) *MockAgentServiceClient {
	mock := &MockAgentServiceClient{ctrl: ctrl}
	mock.recorder = &MockAgentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceClient) EXPECT() *MockAgentServiceClientMockRecorder {
	return m.recorder
}

// GetResults mocks base method.
func (m *MockAgentServiceClient) GetResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResults", varargs...)
	ret0, _ := ret[0].(*ResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockAgentServiceClientMockRecorder) GetResults(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockAgentServiceClient)(nil).GetResults), varargs...)
}

// GetStatus mocks base method.
func (m *MockAgentServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAgentServiceClientMockRecorder) GetStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAgentServiceClient)(nil).GetStatus), varargs...)
}

// StreamResults mocks base method.
func (m *MockAgentServiceClient) StreamResults(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResultsChunk], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamResults", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[ResultsChunk])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamResults indicates an expected call of StreamResults.
func (mr *MockAgentServiceClientMockRecorder) StreamResults(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamResults", reflect.TypeOf((*MockAgentServiceClient)(nil).StreamResults), varargs...)
}

// MockAgentServiceServer is a mock of AgentServiceServer interface.
type MockAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceServerMockRecorder
	isgomock struct{}
}

// MockAgentServiceServerMockRecorder is the mock recorder for MockAgentServiceServer.
type MockAgentServiceServerMockRecorder struct {
	mock *MockAgentServiceServer
}

// NewMockAgentServiceServer creates a new mock instance.
func NewMockAgentServiceServer(ctrl *gomock.Controller) *MockAgentServiceServer {
	mock := &MockAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentServiceServer) EXPECT() *MockAgentServiceServerMockRecorder {
	return m.recorder
}

// GetResults mocks base method.
func (m *MockAgentServiceServer) GetResults(arg0 context.Context, arg1 *ResultsRequest) (*ResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", arg0, arg1)
	ret0, _ := ret[0].(*ResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockAgentServiceServerMockRecorder) GetResults(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockAgentServiceServer)(nil).GetResults), arg0, arg1)
}

// GetStatus mocks base method.
func (m *MockAgentServiceServer) GetStatus(arg0 context.Context, arg1 *StatusRequest) (*StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAgentServiceServerMockRecorder) GetStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAgentServiceServer)(nil).GetStatus), arg0, arg1)
}

// StreamResults mocks base method.
func (m *MockAgentServiceServer) StreamResults(arg0 *ResultsRequest, arg1 grpc.ServerStreamingServer[ResultsChunk]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamResults indicates an expected call of StreamResults.
func (mr *MockAgentServiceServerMockRecorder) StreamResults(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamResults", reflect.TypeOf((*MockAgentServiceServer)(nil).StreamResults), arg0, arg1)
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}

// MockUnsafeAgentServiceServer is a mock of UnsafeAgentServiceServer interface.
type MockUnsafeAgentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAgentServiceServerMockRecorder is the mock recorder for MockUnsafeAgentServiceServer.
type MockUnsafeAgentServiceServerMockRecorder struct {
	mock *MockUnsafeAgentServiceServer
}

// NewMockUnsafeAgentServiceServer creates a new mock instance.
func NewMockUnsafeAgentServiceServer(ctrl *gomock.Controller) *MockUnsafeAgentServiceServer {
	mock := &MockUnsafeAgentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentServiceServer) EXPECT() *MockUnsafeAgentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentServiceServer mocks base method.
func (m *MockUnsafeAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentServiceServer")
}

// mustEmbedUnimplementedAgentServiceServer indicates an expected call of mustEmbedUnimplementedAgentServiceServer.
func (mr *MockUnsafeAgentServiceServerMockRecorder) mustEmbedUnimplementedAgentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentServiceServer", reflect.TypeOf((*MockUnsafeAgentServiceServer)(nil).mustEmbedUnimplementedAgentServiceServer))
}

// MockPollerServiceClient is a mock of PollerServiceClient interface.
type MockPollerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPollerServiceClientMockRecorder
	isgomock struct{}
}

// MockPollerServiceClientMockRecorder is the mock recorder for MockPollerServiceClient.
type MockPollerServiceClientMockRecorder struct {
	mock *MockPollerServiceClient
}

// NewMockPollerServiceClient creates a new mock instance.
func NewMockPollerServiceClient(ctrl *gomock.Controller) *MockPollerServiceClient {
	mock := &MockPollerServiceClient{ctrl: ctrl}
	mock.recorder = &MockPollerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollerServiceClient) EXPECT() *MockPollerServiceClientMockRecorder {
	return m.recorder
}

// ReportStatus mocks base method.
func (m *MockPollerServiceClient) ReportStatus(ctx context.Context, in *PollerStatusRequest, opts ...grpc.CallOption) (*PollerStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportStatus", varargs...)
	ret0, _ := ret[0].(*PollerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStatus indicates an expected call of ReportStatus.
func (mr *MockPollerServiceClientMockRecorder) ReportStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStatus", reflect.TypeOf((*MockPollerServiceClient)(nil).ReportStatus), varargs...)
}

// StreamStatus mocks base method.
func (m *MockPollerServiceClient) StreamStatus(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PollerStatusChunk, PollerStatusResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamStatus", varargs...)
	ret0, _ := ret[0].(grpc.ClientStreamingClient[PollerStatusChunk, PollerStatusResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamStatus indicates an expected call of StreamStatus.
func (mr *MockPollerServiceClientMockRecorder) StreamStatus(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamStatus", reflect.TypeOf((*MockPollerServiceClient)(nil).StreamStatus), varargs...)
}

// MockPollerServiceServer is a mock of PollerServiceServer interface.
type MockPollerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPollerServiceServerMockRecorder
	isgomock struct{}
}

// MockPollerServiceServerMockRecorder is the mock recorder for MockPollerServiceServer.
type MockPollerServiceServerMockRecorder struct {
	mock *MockPollerServiceServer
}

// NewMockPollerServiceServer creates a new mock instance.
func NewMockPollerServiceServer(ctrl *gomock.Controller) *MockPollerServiceServer {
	mock := &MockPollerServiceServer{ctrl: ctrl}
	mock.recorder = &MockPollerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollerServiceServer) EXPECT() *MockPollerServiceServerMockRecorder {
	return m.recorder
}

// ReportStatus mocks base method.
func (m *MockPollerServiceServer) ReportStatus(arg0 context.Context, arg1 *PollerStatusRequest) (*PollerStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportStatus", arg0, arg1)
	ret0, _ := ret[0].(*PollerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStatus indicates an expected call of ReportStatus.
func (mr *MockPollerServiceServerMockRecorder) ReportStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStatus", reflect.TypeOf((*MockPollerServiceServer)(nil).ReportStatus), arg0, arg1)
}

// StreamStatus mocks base method.
func (m *MockPollerServiceServer) StreamStatus(arg0 grpc.ClientStreamingServer[PollerStatusChunk, PollerStatusResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamStatus indicates an expected call of StreamStatus.
func (mr *MockPollerServiceServerMockRecorder) StreamStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamStatus", reflect.TypeOf((*MockPollerServiceServer)(nil).StreamStatus), arg0)
}

// mustEmbedUnimplementedPollerServiceServer mocks base method.
func (m *MockPollerServiceServer) mustEmbedUnimplementedPollerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPollerServiceServer")
}

// mustEmbedUnimplementedPollerServiceServer indicates an expected call of mustEmbedUnimplementedPollerServiceServer.
func (mr *MockPollerServiceServerMockRecorder) mustEmbedUnimplementedPollerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPollerServiceServer", reflect.TypeOf((*MockPollerServiceServer)(nil).mustEmbedUnimplementedPollerServiceServer))
}

// MockUnsafePollerServiceServer is a mock of UnsafePollerServiceServer interface.
type MockUnsafePollerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePollerServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePollerServiceServerMockRecorder is the mock recorder for MockUnsafePollerServiceServer.
type MockUnsafePollerServiceServerMockRecorder struct {
	mock *MockUnsafePollerServiceServer
}

// NewMockUnsafePollerServiceServer creates a new mock instance.
func NewMockUnsafePollerServiceServer(ctrl *gomock.Controller) *MockUnsafePollerServiceServer {
	mock := &MockUnsafePollerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePollerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePollerServiceServer) EXPECT() *MockUnsafePollerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPollerServiceServer mocks base method.
func (m *MockUnsafePollerServiceServer) mustEmbedUnimplementedPollerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPollerServiceServer")
}

// mustEmbedUnimplementedPollerServiceServer indicates an expected call of mustEmbedUnimplementedPollerServiceServer.
func (mr *MockUnsafePollerServiceServerMockRecorder) mustEmbedUnimplementedPollerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPollerServiceServer", reflect.TypeOf((*MockUnsafePollerServiceServer)(nil).mustEmbedUnimplementedPollerServiceServer))
}
