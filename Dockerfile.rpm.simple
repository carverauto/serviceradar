# Copyright 2023 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Stage 1: Build the Go binary
FROM golang:1.24-bullseye AS builder

WORKDIR /src
COPY . .

# Build the binary (passed as build arg)
ARG COMPONENT
ARG BINARY_PATH

# Build with the correct output name
RUN if [ "${COMPONENT}" = "snmp-checker" ]; then \
    GOOS=linux GOARCH=amd64 go build -o "/build-out/serviceradar-snmp-checker" "$BINARY_PATH"; \
    else \
    GOOS=linux GOARCH=amd64 go build -o "/build-out/serviceradar-${COMPONENT}" "$BINARY_PATH"; \
    fi

# Stage 2: Create RPM
FROM rockylinux:9 AS rpm-builder

# Update and install RPM build tools and build dependencies
# Add clean all and skip-broken
RUN dnf clean all && \
    dnf update -y && \
    dnf install -y --nogpgcheck --skip-broken \
    rpm-build \
    rpmdevtools \
    systemd-devel \
    libcap-devel \
    policycoreutils-python-utils \
    gcc \
    make

# Set up RPM build environment
RUN rpmdev-setuptree

# Create necessary directories
RUN mkdir -p /root/rpmbuild/SOURCES/systemd \
    /root/rpmbuild/SOURCES/config \
    /root/rpmbuild/SOURCES/config/checkers \
    /root/rpmbuild/SOURCES/selinux

# Copy built binary
ARG COMPONENT
COPY --from=builder /build-out/* /root/rpmbuild/BUILD/

# Copy entire packaging directory for organization and completeness
COPY packaging /root/rpmbuild/SOURCES/packaging/

# Copy spec file
COPY packaging/specs/serviceradar-${COMPONENT}.spec /root/rpmbuild/SPECS/

# Copy service files from packaging
RUN cp -v /root/rpmbuild/SOURCES/packaging/${COMPONENT}/systemd/serviceradar-${COMPONENT}.service /root/rpmbuild/SOURCES/systemd/ || echo "Warning: Service file not found!"

# Copy configuration files
RUN cp -v /root/rpmbuild/SOURCES/packaging/${COMPONENT}/config/* /root/rpmbuild/SOURCES/config/ 2>/dev/null || echo "No component-specific config files found" && \
    cp -v /root/rpmbuild/SOURCES/packaging/config/${COMPONENT}.json /root/rpmbuild/SOURCES/config/ 2>/dev/null || echo "No global config file found for ${COMPONENT}"

# Copy special configuration for checkers
RUN if [ "${COMPONENT}" = "snmp-checker" ]; then \
    mkdir -p /root/rpmbuild/SOURCES/config/checkers && \
    cp -v /root/rpmbuild/SOURCES/packaging/snmp-checker/config/checkers/snmp.json /root/rpmbuild/SOURCES/config/checkers/ || \
    echo "SNMP checker config not found"; \
fi

# Copy SELinux policy
RUN cp -v /root/rpmbuild/SOURCES/packaging/selinux/*.te /root/rpmbuild/SOURCES/selinux/ 2>/dev/null || echo "No SELinux policies found"

# List files for debugging
RUN echo "=== Files in SOURCES/systemd ===" && \
    ls -la /root/rpmbuild/SOURCES/systemd/ && \
    echo "=== Files in SOURCES/config ===" && \
    ls -la /root/rpmbuild/SOURCES/config/ && \
    echo "=== No scripts directory (by design) ===" && \
    echo "=== Files in SOURCES/selinux ===" && \
    ls -la /root/rpmbuild/SOURCES/selinux/ 2>/dev/null || echo "No SELinux directory" && \
    echo "=== Files in SOURCES/config/checkers ===" && \
    ls -la /root/rpmbuild/SOURCES/config/checkers/ 2>/dev/null || echo "No checkers directory"

# DON'T modify the spec file to include external scripts - they won't be available post-install
# Instead, we should make sure all necessary post-installation commands are directly in the spec file
RUN if [ -f "/root/rpmbuild/SPECS/serviceradar-${COMPONENT}.spec" ]; then \
    # Only add the chmod for the API key file if needed
    if ! grep -q "chmod.*api.env" /root/rpmbuild/SPECS/serviceradar-${COMPONENT}.spec; then \
        sed -i '/%post/a chmod 640 /etc/serviceradar/api.env 2>/dev/null || true' /root/rpmbuild/SPECS/serviceradar-${COMPONENT}.spec; \
    fi; \
    echo "Updated spec file with permissions fix only"; \
fi

# Set version (with RPM-compatible format)
ARG VERSION=1.0.26
ARG RELEASE=1

# Process version to be RPM compatible (replace hyphens with underscores)
RUN RPM_VERSION=$(echo ${VERSION} | sed 's/-/_/g') && \
    echo "Original VERSION: ${VERSION}" && \
    echo "RPM-compatible VERSION: ${RPM_VERSION}" && \
    rpmbuild -bb \
    --define "version ${RPM_VERSION}" \
    --define "release ${RELEASE}" \
    --define "component_dir ${COMPONENT}" \
    /root/rpmbuild/SPECS/serviceradar-${COMPONENT}.spec

# Final stage to store RPM
FROM rockylinux:9
WORKDIR /rpms
COPY --from=rpm-builder /root/rpmbuild/RPMS/*/*.rpm .
CMD ["/bin/bash"]