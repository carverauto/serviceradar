// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/metrics (interfaces: MetricStore,MetricCollector,StructuredMetricCollector,SysmonMetricsProvider)
//
// Generated by this command:
//
//	mockgen -destination=mock_buffer.go -package=metrics github.com/carverauto/serviceradar/pkg/metrics MetricStore,MetricCollector,StructuredMetricCollector,SysmonMetricsProvider
//

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricStore is a mock of MetricStore interface.
type MockMetricStore struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStoreMockRecorder
	isgomock struct{}
}

// MockMetricStoreMockRecorder is the mock recorder for MockMetricStore.
type MockMetricStoreMockRecorder struct {
	mock *MockMetricStore
}

// NewMockMetricStore creates a new mock instance.
func NewMockMetricStore(ctrl *gomock.Controller) *MockMetricStore {
	mock := &MockMetricStore{ctrl: ctrl}
	mock.recorder = &MockMetricStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStore) EXPECT() *MockMetricStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMetricStore) Add(timestamp time.Time, responseTime int64, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", timestamp, responseTime, serviceName)
}

// Add indicates an expected call of Add.
func (mr *MockMetricStoreMockRecorder) Add(timestamp, responseTime, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMetricStore)(nil).Add), timestamp, responseTime, serviceName)
}

// GetLastPoint mocks base method.
func (m *MockMetricStore) GetLastPoint() *models.MetricPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPoint")
	ret0, _ := ret[0].(*models.MetricPoint)
	return ret0
}

// GetLastPoint indicates an expected call of GetLastPoint.
func (mr *MockMetricStoreMockRecorder) GetLastPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPoint", reflect.TypeOf((*MockMetricStore)(nil).GetLastPoint))
}

// GetPoints mocks base method.
func (m *MockMetricStore) GetPoints() []models.MetricPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoints")
	ret0, _ := ret[0].([]models.MetricPoint)
	return ret0
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockMetricStoreMockRecorder) GetPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockMetricStore)(nil).GetPoints))
}

// MockMetricCollector is a mock of MetricCollector interface.
type MockMetricCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCollectorMockRecorder
	isgomock struct{}
}

// MockMetricCollectorMockRecorder is the mock recorder for MockMetricCollector.
type MockMetricCollectorMockRecorder struct {
	mock *MockMetricCollector
}

// NewMockMetricCollector creates a new mock instance.
func NewMockMetricCollector(ctrl *gomock.Controller) *MockMetricCollector {
	mock := &MockMetricCollector{ctrl: ctrl}
	mock.recorder = &MockMetricCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCollector) EXPECT() *MockMetricCollectorMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockMetricCollector) AddMetric(nodeID string, timestamp time.Time, responseTime int64, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", nodeID, timestamp, responseTime, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockMetricCollectorMockRecorder) AddMetric(nodeID, timestamp, responseTime, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockMetricCollector)(nil).AddMetric), nodeID, timestamp, responseTime, serviceName)
}

// CleanupStalePollers mocks base method.
func (m *MockMetricCollector) CleanupStalePollers(staleDuration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupStalePollers", staleDuration)
}

// CleanupStalePollers indicates an expected call of CleanupStalePollers.
func (mr *MockMetricCollectorMockRecorder) CleanupStalePollers(staleDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupStalePollers", reflect.TypeOf((*MockMetricCollector)(nil).CleanupStalePollers), staleDuration)
}

// GetMetrics mocks base method.
func (m *MockMetricCollector) GetMetrics(nodeID string) []models.MetricPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", nodeID)
	ret0, _ := ret[0].([]models.MetricPoint)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricCollectorMockRecorder) GetMetrics(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricCollector)(nil).GetMetrics), nodeID)
}

// MockStructuredMetricCollector is a mock of StructuredMetricCollector interface.
type MockStructuredMetricCollector struct {
	ctrl     *gomock.Controller
	recorder *MockStructuredMetricCollectorMockRecorder
	isgomock struct{}
}

// MockStructuredMetricCollectorMockRecorder is the mock recorder for MockStructuredMetricCollector.
type MockStructuredMetricCollectorMockRecorder struct {
	mock *MockStructuredMetricCollector
}

// NewMockStructuredMetricCollector creates a new mock instance.
func NewMockStructuredMetricCollector(ctrl *gomock.Controller) *MockStructuredMetricCollector {
	mock := &MockStructuredMetricCollector{ctrl: ctrl}
	mock.recorder = &MockStructuredMetricCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructuredMetricCollector) EXPECT() *MockStructuredMetricCollectorMockRecorder {
	return m.recorder
}

// GetAllDiskMetrics mocks base method.
func (m *MockStructuredMetricCollector) GetAllDiskMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetrics indicates an expected call of GetAllDiskMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) GetAllDiskMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).GetAllDiskMetrics), ctx, pollerID, start, end)
}

// GetCPUMetrics mocks base method.
func (m *MockStructuredMetricCollector) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockStructuredMetricCollector) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockStructuredMetricCollector) GetMemoryMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) GetMemoryMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).GetMemoryMetrics), ctx, pollerID, start, end)
}

// GetRperfMetrics mocks base method.
func (m *MockStructuredMetricCollector) GetRperfMetrics(ctx context.Context, pollerID, target string, start, end time.Time) ([]models.RperfMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRperfMetrics", ctx, pollerID, target, start, end)
	ret0, _ := ret[0].([]models.RperfMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRperfMetrics indicates an expected call of GetRperfMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) GetRperfMetrics(ctx, pollerID, target, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRperfMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).GetRperfMetrics), ctx, pollerID, target, start, end)
}

// StoreRperfMetrics mocks base method.
func (m *MockStructuredMetricCollector) StoreRperfMetrics(ctx context.Context, pollerID string, metrics *models.RperfMetrics, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRperfMetrics", ctx, pollerID, metrics, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRperfMetrics indicates an expected call of StoreRperfMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) StoreRperfMetrics(ctx, pollerID, metrics, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRperfMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).StoreRperfMetrics), ctx, pollerID, metrics, timestamp)
}

// StoreSysmonMetrics mocks base method.
func (m *MockStructuredMetricCollector) StoreSysmonMetrics(ctx context.Context, pollerID, agentID, hostID string, metrics *models.SysmonMetrics, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSysmonMetrics", ctx, pollerID, agentID, hostID, metrics, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSysmonMetrics indicates an expected call of StoreSysmonMetrics.
func (mr *MockStructuredMetricCollectorMockRecorder) StoreSysmonMetrics(ctx, pollerID, agentID, hostID, metrics, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSysmonMetrics", reflect.TypeOf((*MockStructuredMetricCollector)(nil).StoreSysmonMetrics), ctx, pollerID, agentID, hostID, metrics, timestamp)
}

// MockSysmonMetricsProvider is a mock of SysmonMetricsProvider interface.
type MockSysmonMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSysmonMetricsProviderMockRecorder
	isgomock struct{}
}

// MockSysmonMetricsProviderMockRecorder is the mock recorder for MockSysmonMetricsProvider.
type MockSysmonMetricsProviderMockRecorder struct {
	mock *MockSysmonMetricsProvider
}

// NewMockSysmonMetricsProvider creates a new mock instance.
func NewMockSysmonMetricsProvider(ctrl *gomock.Controller) *MockSysmonMetricsProvider {
	mock := &MockSysmonMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockSysmonMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysmonMetricsProvider) EXPECT() *MockSysmonMetricsProviderMockRecorder {
	return m.recorder
}

// GetAllCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllCPUMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonCPUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCPUMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonCPUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCPUMetrics indicates an expected call of GetAllCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllCPUMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllCPUMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetAllDiskMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetricsGrouped indicates an expected call of GetAllDiskMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllDiskMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllDiskMetricsGrouped), ctx, pollerID, start, end)
}

// GetCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetMemoryMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonMemoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetricsGrouped indicates an expected call of GetMemoryMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetMemoryMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetMemoryMetricsGrouped), ctx, pollerID, start, end)
}
