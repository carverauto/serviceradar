// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mfreeman451/serviceradar/pkg/metrics (interfaces: MetricStore,MetricCollector)
//
// Generated by this command:
//
//	mockgen -destination=mock_buffer.go -package=metrics github.com/mfreeman451/serviceradar/pkg/metrics MetricStore,MetricCollector
//

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"
	time "time"

	models "github.com/mfreeman451/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricStore is a mock of MetricStore interface.
type MockMetricStore struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStoreMockRecorder
	isgomock struct{}
}

// MockMetricStoreMockRecorder is the mock recorder for MockMetricStore.
type MockMetricStoreMockRecorder struct {
	mock *MockMetricStore
}

// NewMockMetricStore creates a new mock instance.
func NewMockMetricStore(ctrl *gomock.Controller) *MockMetricStore {
	mock := &MockMetricStore{ctrl: ctrl}
	mock.recorder = &MockMetricStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStore) EXPECT() *MockMetricStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMetricStore) Add(timestamp time.Time, responseTime int64, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", timestamp, responseTime, serviceName)
}

// Add indicates an expected call of Add.
func (mr *MockMetricStoreMockRecorder) Add(timestamp, responseTime, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMetricStore)(nil).Add), timestamp, responseTime, serviceName)
}

// GetPoints mocks base method.
func (m *MockMetricStore) GetPoints() []models.MetricPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoints")
	ret0, _ := ret[0].([]models.MetricPoint)
	return ret0
}

// GetPoints indicates an expected call of GetPoints.
func (mr *MockMetricStoreMockRecorder) GetPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockMetricStore)(nil).GetPoints))
}

// MockMetricCollector is a mock of MetricCollector interface.
type MockMetricCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCollectorMockRecorder
	isgomock struct{}
}

// MockMetricCollectorMockRecorder is the mock recorder for MockMetricCollector.
type MockMetricCollectorMockRecorder struct {
	mock *MockMetricCollector
}

// NewMockMetricCollector creates a new mock instance.
func NewMockMetricCollector(ctrl *gomock.Controller) *MockMetricCollector {
	mock := &MockMetricCollector{ctrl: ctrl}
	mock.recorder = &MockMetricCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCollector) EXPECT() *MockMetricCollectorMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockMetricCollector) AddMetric(nodeID string, timestamp time.Time, responseTime int64, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", nodeID, timestamp, responseTime, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockMetricCollectorMockRecorder) AddMetric(nodeID, timestamp, responseTime, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockMetricCollector)(nil).AddMetric), nodeID, timestamp, responseTime, serviceName)
}

// GetMetrics mocks base method.
func (m *MockMetricCollector) GetMetrics(nodeID string) []models.MetricPoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", nodeID)
	ret0, _ := ret[0].([]models.MetricPoint)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricCollectorMockRecorder) GetMetrics(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricCollector)(nil).GetMetrics), nodeID)
}
