// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/registry (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=mock_registry.go -package=registry github.com/carverauto/serviceradar/pkg/registry Manager
//

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// FindRelatedDevices mocks base method.
func (m *MockManager) FindRelatedDevices(ctx context.Context, deviceID string) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRelatedDevices", ctx, deviceID)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRelatedDevices indicates an expected call of FindRelatedDevices.
func (mr *MockManagerMockRecorder) FindRelatedDevices(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRelatedDevices", reflect.TypeOf((*MockManager)(nil).FindRelatedDevices), ctx, deviceID)
}

// GetDevice mocks base method.
func (m *MockManager) GetDevice(ctx context.Context, deviceID string) (*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, deviceID)
	ret0, _ := ret[0].(*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockManagerMockRecorder) GetDevice(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockManager)(nil).GetDevice), ctx, deviceID)
}

// GetDevicesByIP mocks base method.
func (m *MockManager) GetDevicesByIP(ctx context.Context, ip string) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByIP", ctx, ip)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesByIP indicates an expected call of GetDevicesByIP.
func (mr *MockManagerMockRecorder) GetDevicesByIP(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByIP", reflect.TypeOf((*MockManager)(nil).GetDevicesByIP), ctx, ip)
}

// GetMergedDevice mocks base method.
func (m *MockManager) GetMergedDevice(ctx context.Context, deviceIDOrIP string) (*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMergedDevice", ctx, deviceIDOrIP)
	ret0, _ := ret[0].(*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergedDevice indicates an expected call of GetMergedDevice.
func (mr *MockManagerMockRecorder) GetMergedDevice(ctx, deviceIDOrIP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergedDevice", reflect.TypeOf((*MockManager)(nil).GetMergedDevice), ctx, deviceIDOrIP)
}

// ListDevices mocks base method.
func (m *MockManager) ListDevices(ctx context.Context, limit, offset int) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockManagerMockRecorder) ListDevices(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockManager)(nil).ListDevices), ctx, limit, offset)
}

// ProcessBatchDeviceUpdates mocks base method.
func (m *MockManager) ProcessBatchDeviceUpdates(ctx context.Context, updates []*models.DeviceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBatchDeviceUpdates", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBatchDeviceUpdates indicates an expected call of ProcessBatchDeviceUpdates.
func (mr *MockManagerMockRecorder) ProcessBatchDeviceUpdates(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBatchDeviceUpdates", reflect.TypeOf((*MockManager)(nil).ProcessBatchDeviceUpdates), ctx, updates)
}

// ProcessDeviceUpdate mocks base method.
func (m *MockManager) ProcessDeviceUpdate(ctx context.Context, update *models.DeviceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDeviceUpdate", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDeviceUpdate indicates an expected call of ProcessDeviceUpdate.
func (mr *MockManagerMockRecorder) ProcessDeviceUpdate(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDeviceUpdate", reflect.TypeOf((*MockManager)(nil).ProcessDeviceUpdate), ctx, update)
}
