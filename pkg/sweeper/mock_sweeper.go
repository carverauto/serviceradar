// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/sweeper (interfaces: Sweeper,ResultProcessor,Store,Reporter,SweepService,KVStore,DeviceRegistryService)
//
// Generated by this command:
//
//	mockgen -destination=mock_sweeper.go -package=sweeper github.com/carverauto/serviceradar/pkg/sweeper Sweeper,ResultProcessor,Store,Reporter,SweepService,KVStore,DeviceRegistryService
//

// Package sweeper is a generated GoMock package.
package sweeper

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSweeper is a mock of Sweeper interface.
type MockSweeper struct {
	ctrl     *gomock.Controller
	recorder *MockSweeperMockRecorder
	isgomock struct{}
}

// MockSweeperMockRecorder is the mock recorder for MockSweeper.
type MockSweeperMockRecorder struct {
	mock *MockSweeper
}

// NewMockSweeper creates a new mock instance.
func NewMockSweeper(ctrl *gomock.Controller) *MockSweeper {
	mock := &MockSweeper{ctrl: ctrl}
	mock.recorder = &MockSweeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSweeper) EXPECT() *MockSweeperMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockSweeper) GetConfig() models.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(models.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockSweeperMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockSweeper)(nil).GetConfig))
}

// GetResults mocks base method.
func (m *MockSweeper) GetResults(arg0 context.Context, arg1 *models.ResultFilter) ([]models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", arg0, arg1)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockSweeperMockRecorder) GetResults(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockSweeper)(nil).GetResults), arg0, arg1)
}

// Start mocks base method.
func (m *MockSweeper) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSweeperMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSweeper)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockSweeper) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSweeperMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSweeper)(nil).Stop), ctx)
}

// UpdateConfig mocks base method.
func (m *MockSweeper) UpdateConfig(arg0 *models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockSweeperMockRecorder) UpdateConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockSweeper)(nil).UpdateConfig), arg0)
}

// MockResultProcessor is a mock of ResultProcessor interface.
type MockResultProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockResultProcessorMockRecorder
	isgomock struct{}
}

// MockResultProcessorMockRecorder is the mock recorder for MockResultProcessor.
type MockResultProcessorMockRecorder struct {
	mock *MockResultProcessor
}

// NewMockResultProcessor creates a new mock instance.
func NewMockResultProcessor(ctrl *gomock.Controller) *MockResultProcessor {
	mock := &MockResultProcessor{ctrl: ctrl}
	mock.recorder = &MockResultProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultProcessor) EXPECT() *MockResultProcessorMockRecorder {
	return m.recorder
}

// GetSummary mocks base method.
func (m *MockResultProcessor) GetSummary(ctx context.Context) (*models.SweepSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", ctx)
	ret0, _ := ret[0].(*models.SweepSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockResultProcessorMockRecorder) GetSummary(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockResultProcessor)(nil).GetSummary), ctx)
}

// Process mocks base method.
func (m *MockResultProcessor) Process(result *models.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockResultProcessorMockRecorder) Process(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockResultProcessor)(nil).Process), result)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetResults mocks base method.
func (m *MockStore) GetResults(arg0 context.Context, arg1 *models.ResultFilter) ([]models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", arg0, arg1)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockStoreMockRecorder) GetResults(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockStore)(nil).GetResults), arg0, arg1)
}

// GetSweepSummary mocks base method.
func (m *MockStore) GetSweepSummary(arg0 context.Context) (*models.SweepSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSweepSummary", arg0)
	ret0, _ := ret[0].(*models.SweepSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSweepSummary indicates an expected call of GetSweepSummary.
func (mr *MockStoreMockRecorder) GetSweepSummary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSweepSummary", reflect.TypeOf((*MockStore)(nil).GetSweepSummary), arg0)
}

// PruneResults mocks base method.
func (m *MockStore) PruneResults(arg0 context.Context, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneResults indicates an expected call of PruneResults.
func (mr *MockStoreMockRecorder) PruneResults(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneResults", reflect.TypeOf((*MockStore)(nil).PruneResults), arg0, arg1)
}

// SaveResult mocks base method.
func (m *MockStore) SaveResult(arg0 context.Context, arg1 *models.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResult indicates an expected call of SaveResult.
func (mr *MockStoreMockRecorder) SaveResult(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResult", reflect.TypeOf((*MockStore)(nil).SaveResult), arg0, arg1)
}

// MockReporter is a mock of Reporter interface.
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
	isgomock struct{}
}

// MockReporterMockRecorder is the mock recorder for MockReporter.
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance.
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// Report mocks base method.
func (m *MockReporter) Report(arg0 context.Context, arg1 *models.SweepSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Report indicates an expected call of Report.
func (mr *MockReporterMockRecorder) Report(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockReporter)(nil).Report), arg0, arg1)
}

// MockSweepService is a mock of SweepService interface.
type MockSweepService struct {
	ctrl     *gomock.Controller
	recorder *MockSweepServiceMockRecorder
	isgomock struct{}
}

// MockSweepServiceMockRecorder is the mock recorder for MockSweepService.
type MockSweepServiceMockRecorder struct {
	mock *MockSweepService
}

// NewMockSweepService creates a new mock instance.
func NewMockSweepService(ctrl *gomock.Controller) *MockSweepService {
	mock := &MockSweepService{ctrl: ctrl}
	mock.recorder = &MockSweepServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSweepService) EXPECT() *MockSweepServiceMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockSweepService) GetStatus(arg0 context.Context) (*models.SweepSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0)
	ret0, _ := ret[0].(*models.SweepSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockSweepServiceMockRecorder) GetStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockSweepService)(nil).GetStatus), arg0)
}

// Start mocks base method.
func (m *MockSweepService) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSweepServiceMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSweepService)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockSweepService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSweepServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSweepService)(nil).Stop))
}

// UpdateConfig mocks base method.
func (m *MockSweepService) UpdateConfig(arg0 *models.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockSweepServiceMockRecorder) UpdateConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockSweepService)(nil).UpdateConfig), arg0)
}

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
	isgomock struct{}
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKVStore) Get(ctx context.Context, key string) ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockKVStoreMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStore)(nil).Get), ctx, key)
}

// Watch mocks base method.
func (m *MockKVStore) Watch(ctx context.Context, key string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, key)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKVStoreMockRecorder) Watch(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKVStore)(nil).Watch), ctx, key)
}

// MockDeviceRegistryService is a mock of DeviceRegistryService interface.
type MockDeviceRegistryService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRegistryServiceMockRecorder
	isgomock struct{}
}

// MockDeviceRegistryServiceMockRecorder is the mock recorder for MockDeviceRegistryService.
type MockDeviceRegistryServiceMockRecorder struct {
	mock *MockDeviceRegistryService
}

// NewMockDeviceRegistryService creates a new mock instance.
func NewMockDeviceRegistryService(ctrl *gomock.Controller) *MockDeviceRegistryService {
	mock := &MockDeviceRegistryService{ctrl: ctrl}
	mock.recorder = &MockDeviceRegistryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRegistryService) EXPECT() *MockDeviceRegistryServiceMockRecorder {
	return m.recorder
}

// GetDevice mocks base method.
func (m *MockDeviceRegistryService) GetDevice(ctx context.Context, deviceID string) (*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, deviceID)
	ret0, _ := ret[0].(*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDeviceRegistryServiceMockRecorder) GetDevice(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceRegistryService)(nil).GetDevice), ctx, deviceID)
}

// GetDevicesByIP mocks base method.
func (m *MockDeviceRegistryService) GetDevicesByIP(ctx context.Context, ip string) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByIP", ctx, ip)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesByIP indicates an expected call of GetDevicesByIP.
func (mr *MockDeviceRegistryServiceMockRecorder) GetDevicesByIP(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByIP", reflect.TypeOf((*MockDeviceRegistryService)(nil).GetDevicesByIP), ctx, ip)
}

// ListDevices mocks base method.
func (m *MockDeviceRegistryService) ListDevices(ctx context.Context, limit, offset int) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockDeviceRegistryServiceMockRecorder) ListDevices(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockDeviceRegistryService)(nil).ListDevices), ctx, limit, offset)
}

// ProcessSweepResult mocks base method.
func (m *MockDeviceRegistryService) ProcessSweepResult(ctx context.Context, result *models.SweepResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSweepResult", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessSweepResult indicates an expected call of ProcessSweepResult.
func (mr *MockDeviceRegistryServiceMockRecorder) ProcessSweepResult(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSweepResult", reflect.TypeOf((*MockDeviceRegistryService)(nil).ProcessSweepResult), ctx, result)
}

// UpdateDevice mocks base method.
func (m *MockDeviceRegistryService) UpdateDevice(ctx context.Context, update *models.DeviceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockDeviceRegistryServiceMockRecorder) UpdateDevice(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceRegistryService)(nil).UpdateDevice), ctx, update)
}
