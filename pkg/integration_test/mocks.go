/*
 * Copyright 2025 Carver Automation Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: mocks.go

package integration

import (
	"context"
	"reflect"

	"github.com/carverauto/serviceradar/proto"
	"go.uber.org/mock/gomock"
)

// MockKVService is a mock of KVService interface.
type MockKVService struct {
	ctrl     *gomock.Controller
	recorder *MockKVServiceMockRecorder
}

// MockKVServiceMockRecorder is the mock recorder for MockKVService.
type MockKVServiceMockRecorder struct {
	mock *MockKVService
}

// NewMockKVService creates a new mock instance.
func NewMockKVService(ctrl *gomock.Controller) *MockKVService {
	mock := &MockKVService{ctrl: ctrl}
	mock.recorder = &MockKVServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVService) EXPECT() *MockKVServiceMockRecorder {
	return m.recorder
}

// PutMany mocks base method.
func (m *MockKVService) PutMany(ctx context.Context, req *proto.PutManyRequest, opts ...interface{}) (*proto.PutManyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMany", varargs...)
	ret0, _ := ret[0].(*proto.PutManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMany indicates an expected call of PutMany.
func (mr *MockKVServiceMockRecorder) PutMany(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockKVService)(nil).PutMany), varargs...)
}

// MockCoreService is a mock of CoreService interface.
type MockCoreService struct {
	ctrl     *gomock.Controller
	recorder *MockCoreServiceMockRecorder
}

// MockCoreServiceMockRecorder is the mock recorder for MockCoreService.
type MockCoreServiceMockRecorder struct {
	mock *MockCoreService
}

// NewMockCoreService creates a new mock instance.
func NewMockCoreService(ctrl *gomock.Controller) *MockCoreService {
	mock := &MockCoreService{ctrl: ctrl}
	mock.recorder = &MockCoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreService) EXPECT() *MockCoreServiceMockRecorder {
	return m.recorder
}

// ReportStatus mocks base method.
func (m *MockCoreService) ReportStatus(ctx context.Context, req *proto.PollerStatusRequest) (*proto.PollerStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportStatus", ctx, req)
	ret0, _ := ret[0].(*proto.PollerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStatus indicates an expected call of ReportStatus.
func (mr *MockCoreServiceMockRecorder) ReportStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStatus", reflect.TypeOf((*MockCoreService)(nil).ReportStatus), ctx, req)
}

// MockSyncService is a mock of SyncService interface.
type MockSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceMockRecorder
}

// MockSyncServiceMockRecorder is the mock recorder for MockSyncService.
type MockSyncServiceMockRecorder struct {
	mock *MockSyncService
}

// NewMockSyncService creates a new mock instance.
func NewMockSyncService(ctrl *gomock.Controller) *MockSyncService {
	mock := &MockSyncService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncService) EXPECT() *MockSyncServiceMockRecorder {
	return m.recorder
}

// GetResults mocks base method.
func (m *MockSyncService) GetResults(ctx context.Context, req *proto.ResultsRequest) (*proto.ResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", ctx, req)
	ret0, _ := ret[0].(*proto.ResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockSyncServiceMockRecorder) GetResults(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockSyncService)(nil).GetResults), ctx, req)
}

// MockAgentService is a mock of AgentService interface.
type MockAgentService struct {
	ctrl     *gomock.Controller
	recorder *MockAgentServiceMockRecorder
}

// MockAgentServiceMockRecorder is the mock recorder for MockAgentService.
type MockAgentServiceMockRecorder struct {
	mock *MockAgentService
}

// NewMockAgentService creates a new mock instance.
func NewMockAgentService(ctrl *gomock.Controller) *MockAgentService {
	mock := &MockAgentService{ctrl: ctrl}
	mock.recorder = &MockAgentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentService) EXPECT() *MockAgentServiceMockRecorder {
	return m.recorder
}

// GetResults mocks base method.
func (m *MockAgentService) GetResults(ctx context.Context, req *proto.ResultsRequest) (*proto.ResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults", ctx, req)
	ret0, _ := ret[0].(*proto.ResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResults indicates an expected call of GetResults.
func (mr *MockAgentServiceMockRecorder) GetResults(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockAgentService)(nil).GetResults), ctx, req)
}

// MockArmisUpdater is a mock of ArmisUpdater interface.
type MockArmisUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockArmisUpdaterMockRecorder
}

// MockArmisUpdaterMockRecorder is the mock recorder for MockArmisUpdater.
type MockArmisUpdaterMockRecorder struct {
	mock *MockArmisUpdater
}

// NewMockArmisUpdater creates a new mock instance.
func NewMockArmisUpdater(ctrl *gomock.Controller) *MockArmisUpdater {
	mock := &MockArmisUpdater{ctrl: ctrl}
	mock.recorder = &MockArmisUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArmisUpdater) EXPECT() *MockArmisUpdaterMockRecorder {
	return m.recorder
}

// RunUpdate mocks base method.
func (m *MockArmisUpdater) RunUpdate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunUpdate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunUpdate indicates an expected call of RunUpdate.
func (mr *MockArmisUpdaterMockRecorder) RunUpdate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunUpdate", reflect.TypeOf((*MockArmisUpdater)(nil).RunUpdate), ctx)
}
