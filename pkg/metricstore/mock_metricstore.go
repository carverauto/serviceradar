// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/metricstore (interfaces: RperfManager,SNMPManager)
//
// Generated by this command:
//
//	mockgen -destination=mock_metricstore.go -package=metricstore github.com/carverauto/serviceradar/pkg/metricstore RperfManager,SNMPManager
//

// Package metricstore is a generated GoMock package.
package metricstore

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRperfManager is a mock of RperfManager interface.
type MockRperfManager struct {
	ctrl     *gomock.Controller
	recorder *MockRperfManagerMockRecorder
	isgomock struct{}
}

// MockRperfManagerMockRecorder is the mock recorder for MockRperfManager.
type MockRperfManagerMockRecorder struct {
	mock *MockRperfManager
}

// NewMockRperfManager creates a new mock instance.
func NewMockRperfManager(ctrl *gomock.Controller) *MockRperfManager {
	mock := &MockRperfManager{ctrl: ctrl}
	mock.recorder = &MockRperfManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRperfManager) EXPECT() *MockRperfManagerMockRecorder {
	return m.recorder
}

// GetRperfMetrics mocks base method.
func (m *MockRperfManager) GetRperfMetrics(ctx context.Context, pollerID string, startTime, endTime time.Time) ([]*models.RperfMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRperfMetrics", ctx, pollerID, startTime, endTime)
	ret0, _ := ret[0].([]*models.RperfMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRperfMetrics indicates an expected call of GetRperfMetrics.
func (mr *MockRperfManagerMockRecorder) GetRperfMetrics(ctx, pollerID, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRperfMetrics", reflect.TypeOf((*MockRperfManager)(nil).GetRperfMetrics), ctx, pollerID, startTime, endTime)
}

// StoreRperfMetric mocks base method.
func (m *MockRperfManager) StoreRperfMetric(ctx context.Context, pollerID string, metric *models.RperfMetric, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRperfMetric", ctx, pollerID, metric, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRperfMetric indicates an expected call of StoreRperfMetric.
func (mr *MockRperfManagerMockRecorder) StoreRperfMetric(ctx, pollerID, metric, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRperfMetric", reflect.TypeOf((*MockRperfManager)(nil).StoreRperfMetric), ctx, pollerID, metric, timestamp)
}

// MockSNMPManager is a mock of SNMPManager interface.
type MockSNMPManager struct {
	ctrl     *gomock.Controller
	recorder *MockSNMPManagerMockRecorder
	isgomock struct{}
}

// MockSNMPManagerMockRecorder is the mock recorder for MockSNMPManager.
type MockSNMPManagerMockRecorder struct {
	mock *MockSNMPManager
}

// NewMockSNMPManager creates a new mock instance.
func NewMockSNMPManager(ctrl *gomock.Controller) *MockSNMPManager {
	mock := &MockSNMPManager{ctrl: ctrl}
	mock.recorder = &MockSNMPManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSNMPManager) EXPECT() *MockSNMPManagerMockRecorder {
	return m.recorder
}

// GetSNMPMetrics mocks base method.
func (m *MockSNMPManager) GetSNMPMetrics(ctx context.Context, nodeID string, startTime, endTime time.Time) ([]models.SNMPMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSNMPMetrics", ctx, nodeID, startTime, endTime)
	ret0, _ := ret[0].([]models.SNMPMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSNMPMetrics indicates an expected call of GetSNMPMetrics.
func (mr *MockSNMPManagerMockRecorder) GetSNMPMetrics(ctx, nodeID, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSNMPMetrics", reflect.TypeOf((*MockSNMPManager)(nil).GetSNMPMetrics), ctx, nodeID, startTime, endTime)
}

// StoreSNMPMetric mocks base method.
func (m *MockSNMPManager) StoreSNMPMetric(ctx context.Context, pollerID string, metric *models.SNMPMetric, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSNMPMetric", ctx, pollerID, metric, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSNMPMetric indicates an expected call of StoreSNMPMetric.
func (mr *MockSNMPManagerMockRecorder) StoreSNMPMetric(ctx, pollerID, metric, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSNMPMetric", reflect.TypeOf((*MockSNMPManager)(nil).StoreSNMPMetric), ctx, pollerID, metric, timestamp)
}
