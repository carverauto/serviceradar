// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/grpc (interfaces: SecurityProvider)
//
// Generated by this command:
//
//	mockgen -destination=mock_grpc.go -package=grpc github.com/carverauto/serviceradar/pkg/grpc SecurityProvider
//

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSecurityProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSecurityProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSecurityProvider)(nil).Close))
}

// GetClientCredentials mocks base method.
func (m *MockSecurityProvider) GetClientCredentials(ctx context.Context) (grpc.DialOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientCredentials", ctx)
	ret0, _ := ret[0].(grpc.DialOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCredentials indicates an expected call of GetClientCredentials.
func (mr *MockSecurityProviderMockRecorder) GetClientCredentials(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCredentials", reflect.TypeOf((*MockSecurityProvider)(nil).GetClientCredentials), ctx)
}

// GetServerCredentials mocks base method.
func (m *MockSecurityProvider) GetServerCredentials(ctx context.Context) (grpc.ServerOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerCredentials", ctx)
	ret0, _ := ret[0].(grpc.ServerOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerCredentials indicates an expected call of GetServerCredentials.
func (mr *MockSecurityProviderMockRecorder) GetServerCredentials(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerCredentials", reflect.TypeOf((*MockSecurityProvider)(nil).GetServerCredentials), ctx)
}
