// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/db (interfaces: Service,SysmonMetricsProvider,Rows,QueryExecutor)
//
// Generated by this command:
//
//	mockgen -destination=mock_db.go -package=db github.com/carverauto/serviceradar/pkg/db Service,SysmonMetricsProvider,Rows,QueryExecutor
//

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// DeletePoller mocks base method.
func (m *MockService) DeletePoller(ctx context.Context, pollerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoller", ctx, pollerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoller indicates an expected call of DeletePoller.
func (mr *MockServiceMockRecorder) DeletePoller(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoller", reflect.TypeOf((*MockService)(nil).DeletePoller), ctx, pollerID)
}

// ExecuteQuery mocks base method.
func (m *MockService) ExecuteQuery(ctx context.Context, query string, params ...any) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteQuery", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockServiceMockRecorder) ExecuteQuery(ctx, query any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockService)(nil).ExecuteQuery), varargs...)
}

// GetAllCPUMetrics mocks base method.
func (m *MockService) GetAllCPUMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonCPUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCPUMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonCPUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCPUMetrics indicates an expected call of GetAllCPUMetrics.
func (mr *MockServiceMockRecorder) GetAllCPUMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCPUMetrics", reflect.TypeOf((*MockService)(nil).GetAllCPUMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetrics mocks base method.
func (m *MockService) GetAllDiskMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetrics indicates an expected call of GetAllDiskMetrics.
func (mr *MockServiceMockRecorder) GetAllDiskMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetrics", reflect.TypeOf((*MockService)(nil).GetAllDiskMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetricsGrouped mocks base method.
func (m *MockService) GetAllDiskMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetricsGrouped indicates an expected call of GetAllDiskMetricsGrouped.
func (mr *MockServiceMockRecorder) GetAllDiskMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetricsGrouped", reflect.TypeOf((*MockService)(nil).GetAllDiskMetricsGrouped), ctx, pollerID, start, end)
}

// GetAllMountPoints mocks base method.
func (m *MockService) GetAllMountPoints(ctx context.Context, pollerID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMountPoints", ctx, pollerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMountPoints indicates an expected call of GetAllMountPoints.
func (mr *MockServiceMockRecorder) GetAllMountPoints(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMountPoints", reflect.TypeOf((*MockService)(nil).GetAllMountPoints), ctx, pollerID)
}

// GetAllProcessMetrics mocks base method.
func (m *MockService) GetAllProcessMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.ProcessMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProcessMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.ProcessMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProcessMetrics indicates an expected call of GetAllProcessMetrics.
func (mr *MockServiceMockRecorder) GetAllProcessMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProcessMetrics", reflect.TypeOf((*MockService)(nil).GetAllProcessMetrics), ctx, pollerID, start, end)
}

// GetAllProcessMetricsGrouped mocks base method.
func (m *MockService) GetAllProcessMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProcessMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProcessMetricsGrouped indicates an expected call of GetAllProcessMetricsGrouped.
func (mr *MockServiceMockRecorder) GetAllProcessMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProcessMetricsGrouped", reflect.TypeOf((*MockService)(nil).GetAllProcessMetricsGrouped), ctx, pollerID, start, end)
}

// GetCPUMetrics mocks base method.
func (m *MockService) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockServiceMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockService)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDeviceByID mocks base method.
func (m *MockService) GetDeviceByID(ctx context.Context, deviceID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceByID", ctx, deviceID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceByID indicates an expected call of GetDeviceByID.
func (mr *MockServiceMockRecorder) GetDeviceByID(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceByID", reflect.TypeOf((*MockService)(nil).GetDeviceByID), ctx, deviceID)
}

// GetDevicesByIP mocks base method.
func (m *MockService) GetDevicesByIP(ctx context.Context, ip string) ([]*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesByIP", ctx, ip)
	ret0, _ := ret[0].([]*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesByIP indicates an expected call of GetDevicesByIP.
func (mr *MockServiceMockRecorder) GetDevicesByIP(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesByIP", reflect.TypeOf((*MockService)(nil).GetDevicesByIP), ctx, ip)
}

// GetDevicesWithRecentSNMPMetrics mocks base method.
func (m *MockService) GetDevicesWithRecentSNMPMetrics(ctx context.Context, deviceIDs []string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesWithRecentSNMPMetrics", ctx, deviceIDs)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicesWithRecentSNMPMetrics indicates an expected call of GetDevicesWithRecentSNMPMetrics.
func (mr *MockServiceMockRecorder) GetDevicesWithRecentSNMPMetrics(ctx, deviceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesWithRecentSNMPMetrics", reflect.TypeOf((*MockService)(nil).GetDevicesWithRecentSNMPMetrics), ctx, deviceIDs)
}

// GetDiskMetrics mocks base method.
func (m *MockService) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockServiceMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockService)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockService) GetMemoryMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockServiceMockRecorder) GetMemoryMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockService)(nil).GetMemoryMetrics), ctx, pollerID, start, end)
}

// GetMemoryMetricsGrouped mocks base method.
func (m *MockService) GetMemoryMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonMemoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetricsGrouped indicates an expected call of GetMemoryMetricsGrouped.
func (mr *MockServiceMockRecorder) GetMemoryMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetricsGrouped", reflect.TypeOf((*MockService)(nil).GetMemoryMetricsGrouped), ctx, pollerID, start, end)
}

// GetMetrics mocks base method.
func (m *MockService) GetMetrics(ctx context.Context, pollerID, metricName string, start, end time.Time) ([]models.TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, pollerID, metricName, start, end)
	ret0, _ := ret[0].([]models.TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockServiceMockRecorder) GetMetrics(ctx, pollerID, metricName, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockService)(nil).GetMetrics), ctx, pollerID, metricName, start, end)
}

// GetMetricsByType mocks base method.
func (m *MockService) GetMetricsByType(ctx context.Context, pollerID, metricType string, start, end time.Time) ([]models.TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByType", ctx, pollerID, metricType, start, end)
	ret0, _ := ret[0].([]models.TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsByType indicates an expected call of GetMetricsByType.
func (mr *MockServiceMockRecorder) GetMetricsByType(ctx, pollerID, metricType, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByType", reflect.TypeOf((*MockService)(nil).GetMetricsByType), ctx, pollerID, metricType, start, end)
}

// GetMetricsForDevice mocks base method.
func (m *MockService) GetMetricsForDevice(ctx context.Context, deviceID string, start, end time.Time) ([]models.TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsForDevice", ctx, deviceID, start, end)
	ret0, _ := ret[0].([]models.TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsForDevice indicates an expected call of GetMetricsForDevice.
func (mr *MockServiceMockRecorder) GetMetricsForDevice(ctx, deviceID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsForDevice", reflect.TypeOf((*MockService)(nil).GetMetricsForDevice), ctx, deviceID, start, end)
}

// GetMetricsForDeviceByType mocks base method.
func (m *MockService) GetMetricsForDeviceByType(ctx context.Context, deviceID, metricType string, start, end time.Time) ([]models.TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsForDeviceByType", ctx, deviceID, metricType, start, end)
	ret0, _ := ret[0].([]models.TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsForDeviceByType indicates an expected call of GetMetricsForDeviceByType.
func (mr *MockServiceMockRecorder) GetMetricsForDeviceByType(ctx, deviceID, metricType, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsForDeviceByType", reflect.TypeOf((*MockService)(nil).GetMetricsForDeviceByType), ctx, deviceID, metricType, start, end)
}

// GetMetricsForPartition mocks base method.
func (m *MockService) GetMetricsForPartition(ctx context.Context, partition string, start, end time.Time) ([]models.TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsForPartition", ctx, partition, start, end)
	ret0, _ := ret[0].([]models.TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsForPartition indicates an expected call of GetMetricsForPartition.
func (mr *MockServiceMockRecorder) GetMetricsForPartition(ctx, partition, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsForPartition", reflect.TypeOf((*MockService)(nil).GetMetricsForPartition), ctx, partition, start, end)
}

// GetPollerHistory mocks base method.
func (m *MockService) GetPollerHistory(ctx context.Context, pollerID string) ([]models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistory", ctx, pollerID)
	ret0, _ := ret[0].([]models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistory indicates an expected call of GetPollerHistory.
func (mr *MockServiceMockRecorder) GetPollerHistory(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistory", reflect.TypeOf((*MockService)(nil).GetPollerHistory), ctx, pollerID)
}

// GetPollerHistoryPoints mocks base method.
func (m *MockService) GetPollerHistoryPoints(ctx context.Context, pollerID string, limit int) ([]models.PollerHistoryPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistoryPoints", ctx, pollerID, limit)
	ret0, _ := ret[0].([]models.PollerHistoryPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistoryPoints indicates an expected call of GetPollerHistoryPoints.
func (mr *MockServiceMockRecorder) GetPollerHistoryPoints(ctx, pollerID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistoryPoints", reflect.TypeOf((*MockService)(nil).GetPollerHistoryPoints), ctx, pollerID, limit)
}

// GetPollerServices mocks base method.
func (m *MockService) GetPollerServices(ctx context.Context, pollerID string) ([]models.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerServices", ctx, pollerID)
	ret0, _ := ret[0].([]models.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerServices indicates an expected call of GetPollerServices.
func (mr *MockServiceMockRecorder) GetPollerServices(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerServices", reflect.TypeOf((*MockService)(nil).GetPollerServices), ctx, pollerID)
}

// GetPollerStatus mocks base method.
func (m *MockService) GetPollerStatus(ctx context.Context, pollerID string) (*models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerStatus", ctx, pollerID)
	ret0, _ := ret[0].(*models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerStatus indicates an expected call of GetPollerStatus.
func (mr *MockServiceMockRecorder) GetPollerStatus(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerStatus", reflect.TypeOf((*MockService)(nil).GetPollerStatus), ctx, pollerID)
}

// GetServiceHistory mocks base method.
func (m *MockService) GetServiceHistory(ctx context.Context, pollerID, serviceName string, limit int) ([]models.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHistory", ctx, pollerID, serviceName, limit)
	ret0, _ := ret[0].([]models.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceHistory indicates an expected call of GetServiceHistory.
func (mr *MockServiceMockRecorder) GetServiceHistory(ctx, pollerID, serviceName, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHistory", reflect.TypeOf((*MockService)(nil).GetServiceHistory), ctx, pollerID, serviceName, limit)
}

// GetStreamingConnection mocks base method.
func (m *MockService) GetStreamingConnection() (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingConnection")
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingConnection indicates an expected call of GetStreamingConnection.
func (mr *MockServiceMockRecorder) GetStreamingConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingConnection", reflect.TypeOf((*MockService)(nil).GetStreamingConnection))
}

// GetSweepHostStates mocks base method.
func (m *MockService) GetSweepHostStates(ctx context.Context, pollerID string, limit int) ([]*models.SweepHostState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSweepHostStates", ctx, pollerID, limit)
	ret0, _ := ret[0].([]*models.SweepHostState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSweepHostStates indicates an expected call of GetSweepHostStates.
func (mr *MockServiceMockRecorder) GetSweepHostStates(ctx, pollerID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSweepHostStates", reflect.TypeOf((*MockService)(nil).GetSweepHostStates), ctx, pollerID, limit)
}

// GetUnifiedDevice mocks base method.
func (m *MockService) GetUnifiedDevice(ctx context.Context, deviceID string) (*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnifiedDevice", ctx, deviceID)
	ret0, _ := ret[0].(*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnifiedDevice indicates an expected call of GetUnifiedDevice.
func (mr *MockServiceMockRecorder) GetUnifiedDevice(ctx, deviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnifiedDevice", reflect.TypeOf((*MockService)(nil).GetUnifiedDevice), ctx, deviceID)
}

// GetUnifiedDevicesByIP mocks base method.
func (m *MockService) GetUnifiedDevicesByIP(ctx context.Context, ip string) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnifiedDevicesByIP", ctx, ip)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnifiedDevicesByIP indicates an expected call of GetUnifiedDevicesByIP.
func (mr *MockServiceMockRecorder) GetUnifiedDevicesByIP(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnifiedDevicesByIP", reflect.TypeOf((*MockService)(nil).GetUnifiedDevicesByIP), ctx, ip)
}

// GetUnifiedDevicesByIPsOrIDs mocks base method.
func (m *MockService) GetUnifiedDevicesByIPsOrIDs(ctx context.Context, ips, deviceIDs []string) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnifiedDevicesByIPsOrIDs", ctx, ips, deviceIDs)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnifiedDevicesByIPsOrIDs indicates an expected call of GetUnifiedDevicesByIPsOrIDs.
func (mr *MockServiceMockRecorder) GetUnifiedDevicesByIPsOrIDs(ctx, ips, deviceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnifiedDevicesByIPsOrIDs", reflect.TypeOf((*MockService)(nil).GetUnifiedDevicesByIPsOrIDs), ctx, ips, deviceIDs)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), ctx, id)
}

// IsPollerOffline mocks base method.
func (m *MockService) IsPollerOffline(ctx context.Context, pollerID string, threshold time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPollerOffline", ctx, pollerID, threshold)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPollerOffline indicates an expected call of IsPollerOffline.
func (mr *MockServiceMockRecorder) IsPollerOffline(ctx, pollerID, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPollerOffline", reflect.TypeOf((*MockService)(nil).IsPollerOffline), ctx, pollerID, threshold)
}

// ListNeverReportedPollers mocks base method.
func (m *MockService) ListNeverReportedPollers(ctx context.Context, patterns []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNeverReportedPollers", ctx, patterns)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNeverReportedPollers indicates an expected call of ListNeverReportedPollers.
func (mr *MockServiceMockRecorder) ListNeverReportedPollers(ctx, patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNeverReportedPollers", reflect.TypeOf((*MockService)(nil).ListNeverReportedPollers), ctx, patterns)
}

// ListPollerStatuses mocks base method.
func (m *MockService) ListPollerStatuses(ctx context.Context, patterns []string) ([]models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPollerStatuses", ctx, patterns)
	ret0, _ := ret[0].([]models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPollerStatuses indicates an expected call of ListPollerStatuses.
func (mr *MockServiceMockRecorder) ListPollerStatuses(ctx, patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPollerStatuses", reflect.TypeOf((*MockService)(nil).ListPollerStatuses), ctx, patterns)
}

// ListPollers mocks base method.
func (m *MockService) ListPollers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPollers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPollers indicates an expected call of ListPollers.
func (mr *MockServiceMockRecorder) ListPollers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPollers", reflect.TypeOf((*MockService)(nil).ListPollers), ctx)
}

// ListUnifiedDevices mocks base method.
func (m *MockService) ListUnifiedDevices(ctx context.Context, limit, offset int) ([]*models.UnifiedDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnifiedDevices", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.UnifiedDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnifiedDevices indicates an expected call of ListUnifiedDevices.
func (mr *MockServiceMockRecorder) ListUnifiedDevices(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnifiedDevices", reflect.TypeOf((*MockService)(nil).ListUnifiedDevices), ctx, limit, offset)
}

// PublishBatchDeviceUpdates mocks base method.
func (m *MockService) PublishBatchDeviceUpdates(ctx context.Context, updates []*models.DeviceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBatchDeviceUpdates", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBatchDeviceUpdates indicates an expected call of PublishBatchDeviceUpdates.
func (mr *MockServiceMockRecorder) PublishBatchDeviceUpdates(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatchDeviceUpdates", reflect.TypeOf((*MockService)(nil).PublishBatchDeviceUpdates), ctx, updates)
}

// PublishBatchDiscoveredInterfaces mocks base method.
func (m *MockService) PublishBatchDiscoveredInterfaces(ctx context.Context, interfaces []*models.DiscoveredInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBatchDiscoveredInterfaces", ctx, interfaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBatchDiscoveredInterfaces indicates an expected call of PublishBatchDiscoveredInterfaces.
func (mr *MockServiceMockRecorder) PublishBatchDiscoveredInterfaces(ctx, interfaces any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatchDiscoveredInterfaces", reflect.TypeOf((*MockService)(nil).PublishBatchDiscoveredInterfaces), ctx, interfaces)
}

// PublishBatchTopologyDiscoveryEvents mocks base method.
func (m *MockService) PublishBatchTopologyDiscoveryEvents(ctx context.Context, events []*models.TopologyDiscoveryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBatchTopologyDiscoveryEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBatchTopologyDiscoveryEvents indicates an expected call of PublishBatchTopologyDiscoveryEvents.
func (mr *MockServiceMockRecorder) PublishBatchTopologyDiscoveryEvents(ctx, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBatchTopologyDiscoveryEvents", reflect.TypeOf((*MockService)(nil).PublishBatchTopologyDiscoveryEvents), ctx, events)
}

// PublishDeviceUpdate mocks base method.
func (m *MockService) PublishDeviceUpdate(ctx context.Context, update *models.DeviceUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDeviceUpdate", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDeviceUpdate indicates an expected call of PublishDeviceUpdate.
func (mr *MockServiceMockRecorder) PublishDeviceUpdate(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDeviceUpdate", reflect.TypeOf((*MockService)(nil).PublishDeviceUpdate), ctx, update)
}

// PublishDiscoveredInterface mocks base method.
func (m *MockService) PublishDiscoveredInterface(ctx context.Context, iface *models.DiscoveredInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDiscoveredInterface", ctx, iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDiscoveredInterface indicates an expected call of PublishDiscoveredInterface.
func (mr *MockServiceMockRecorder) PublishDiscoveredInterface(ctx, iface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDiscoveredInterface", reflect.TypeOf((*MockService)(nil).PublishDiscoveredInterface), ctx, iface)
}

// PublishTopologyDiscoveryEvent mocks base method.
func (m *MockService) PublishTopologyDiscoveryEvent(ctx context.Context, event *models.TopologyDiscoveryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTopologyDiscoveryEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTopologyDiscoveryEvent indicates an expected call of PublishTopologyDiscoveryEvent.
func (mr *MockServiceMockRecorder) PublishTopologyDiscoveryEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTopologyDiscoveryEvent", reflect.TypeOf((*MockService)(nil).PublishTopologyDiscoveryEvent), ctx, event)
}

// UpsertEdgeOnboardingPackage mocks base method.
func (m *MockService) UpsertEdgeOnboardingPackage(ctx context.Context, pkg *models.EdgeOnboardingPackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEdgeOnboardingPackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEdgeOnboardingPackage indicates an expected call of UpsertEdgeOnboardingPackage.
func (mr *MockServiceMockRecorder) UpsertEdgeOnboardingPackage(ctx, pkg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEdgeOnboardingPackage", reflect.TypeOf((*MockService)(nil).UpsertEdgeOnboardingPackage), ctx, pkg)
}

// GetEdgeOnboardingPackage mocks base method.
func (m *MockService) GetEdgeOnboardingPackage(ctx context.Context, packageID string) (*models.EdgeOnboardingPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdgeOnboardingPackage", ctx, packageID)
	ret0, _ := ret[0].(*models.EdgeOnboardingPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEdgeOnboardingPackage indicates an expected call of GetEdgeOnboardingPackage.
func (mr *MockServiceMockRecorder) GetEdgeOnboardingPackage(ctx, packageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdgeOnboardingPackage", reflect.TypeOf((*MockService)(nil).GetEdgeOnboardingPackage), ctx, packageID)
}

// ListEdgeOnboardingPackages mocks base method.
func (m *MockService) ListEdgeOnboardingPackages(ctx context.Context, filter *models.EdgeOnboardingListFilter) ([]*models.EdgeOnboardingPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEdgeOnboardingPackages", ctx, filter)
	ret0, _ := ret[0].([]*models.EdgeOnboardingPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeOnboardingPackages indicates an expected call of ListEdgeOnboardingPackages.
func (mr *MockServiceMockRecorder) ListEdgeOnboardingPackages(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeOnboardingPackages", reflect.TypeOf((*MockService)(nil).ListEdgeOnboardingPackages), ctx, filter)
}

// ListEdgeOnboardingPollerIDs mocks base method.
func (m *MockService) ListEdgeOnboardingPollerIDs(ctx context.Context, statuses ...models.EdgeOnboardingStatus) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEdgeOnboardingPollerIDs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeOnboardingPollerIDs indicates an expected call of ListEdgeOnboardingPollerIDs.
func (mr *MockServiceMockRecorder) ListEdgeOnboardingPollerIDs(ctx any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeOnboardingPollerIDs", reflect.TypeOf((*MockService)(nil).ListEdgeOnboardingPollerIDs), varargs...)
}

// InsertEdgeOnboardingEvent mocks base method.
func (m *MockService) InsertEdgeOnboardingEvent(ctx context.Context, event *models.EdgeOnboardingEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEdgeOnboardingEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEdgeOnboardingEvent indicates an expected call of InsertEdgeOnboardingEvent.
func (mr *MockServiceMockRecorder) InsertEdgeOnboardingEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEdgeOnboardingEvent", reflect.TypeOf((*MockService)(nil).InsertEdgeOnboardingEvent), ctx, event)
}

// ListEdgeOnboardingEvents mocks base method.
func (m *MockService) ListEdgeOnboardingEvents(ctx context.Context, packageID string, limit int) ([]*models.EdgeOnboardingEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEdgeOnboardingEvents", ctx, packageID, limit)
	ret0, _ := ret[0].([]*models.EdgeOnboardingEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeOnboardingEvents indicates an expected call of ListEdgeOnboardingEvents.
func (mr *MockServiceMockRecorder) ListEdgeOnboardingEvents(ctx, packageID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeOnboardingEvents", reflect.TypeOf((*MockService)(nil).ListEdgeOnboardingEvents), ctx, packageID, limit)
}

// StoreMetric mocks base method.
func (m *MockService) StoreMetric(ctx context.Context, pollerID string, metric *models.TimeseriesMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", ctx, pollerID, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockServiceMockRecorder) StoreMetric(ctx, pollerID, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockService)(nil).StoreMetric), ctx, pollerID, metric)
}

// StoreMetrics mocks base method.
func (m *MockService) StoreMetrics(ctx context.Context, pollerID string, metrics []*models.TimeseriesMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", ctx, pollerID, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetrics indicates an expected call of StoreMetrics.
func (mr *MockServiceMockRecorder) StoreMetrics(ctx, pollerID, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockService)(nil).StoreMetrics), ctx, pollerID, metrics)
}

// StoreNetflowMetrics mocks base method.
func (m *MockService) StoreNetflowMetrics(ctx context.Context, metrics []*models.NetflowMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreNetflowMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreNetflowMetrics indicates an expected call of StoreNetflowMetrics.
func (mr *MockServiceMockRecorder) StoreNetflowMetrics(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreNetflowMetrics", reflect.TypeOf((*MockService)(nil).StoreNetflowMetrics), ctx, metrics)
}

// StoreRperfMetrics mocks base method.
func (m *MockService) StoreRperfMetrics(ctx context.Context, pollerID, serviceName, message string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRperfMetrics", ctx, pollerID, serviceName, message, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRperfMetrics indicates an expected call of StoreRperfMetrics.
func (mr *MockServiceMockRecorder) StoreRperfMetrics(ctx, pollerID, serviceName, message, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRperfMetrics", reflect.TypeOf((*MockService)(nil).StoreRperfMetrics), ctx, pollerID, serviceName, message, timestamp)
}

// StoreServices mocks base method.
func (m *MockService) StoreServices(ctx context.Context, services []*models.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreServices", ctx, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreServices indicates an expected call of StoreServices.
func (mr *MockServiceMockRecorder) StoreServices(ctx, services any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreServices", reflect.TypeOf((*MockService)(nil).StoreServices), ctx, services)
}

// StoreSweepHostStates mocks base method.
func (m *MockService) StoreSweepHostStates(ctx context.Context, states []*models.SweepHostState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSweepHostStates", ctx, states)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSweepHostStates indicates an expected call of StoreSweepHostStates.
func (mr *MockServiceMockRecorder) StoreSweepHostStates(ctx, states any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSweepHostStates", reflect.TypeOf((*MockService)(nil).StoreSweepHostStates), ctx, states)
}

// StoreSysmonMetrics mocks base method.
func (m *MockService) StoreSysmonMetrics(ctx context.Context, pollerID, agentID, hostID, partition, hostIP string, metrics *models.SysmonMetrics, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSysmonMetrics", ctx, pollerID, agentID, hostID, partition, hostIP, metrics, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSysmonMetrics indicates an expected call of StoreSysmonMetrics.
func (mr *MockServiceMockRecorder) StoreSysmonMetrics(ctx, pollerID, agentID, hostID, partition, hostIP, metrics, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSysmonMetrics", reflect.TypeOf((*MockService)(nil).StoreSysmonMetrics), ctx, pollerID, agentID, hostID, partition, hostIP, metrics, timestamp)
}

// StoreUser mocks base method.
func (m *MockService) StoreUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockServiceMockRecorder) StoreUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockService)(nil).StoreUser), ctx, user)
}

// UpdatePollerStatus mocks base method.
func (m *MockService) UpdatePollerStatus(ctx context.Context, status *models.PollerStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollerStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollerStatus indicates an expected call of UpdatePollerStatus.
func (mr *MockServiceMockRecorder) UpdatePollerStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollerStatus", reflect.TypeOf((*MockService)(nil).UpdatePollerStatus), ctx, status)
}

// UpdateServiceStatus mocks base method.
func (m *MockService) UpdateServiceStatus(ctx context.Context, status *models.ServiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceStatus indicates an expected call of UpdateServiceStatus.
func (mr *MockServiceMockRecorder) UpdateServiceStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceStatus", reflect.TypeOf((*MockService)(nil).UpdateServiceStatus), ctx, status)
}

// UpdateServiceStatuses mocks base method.
func (m *MockService) UpdateServiceStatuses(ctx context.Context, statuses []*models.ServiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceStatuses", ctx, statuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceStatuses indicates an expected call of UpdateServiceStatuses.
func (mr *MockServiceMockRecorder) UpdateServiceStatuses(ctx, statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceStatuses", reflect.TypeOf((*MockService)(nil).UpdateServiceStatuses), ctx, statuses)
}

// MockSysmonMetricsProvider is a mock of SysmonMetricsProvider interface.
type MockSysmonMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSysmonMetricsProviderMockRecorder
	isgomock struct{}
}

// MockSysmonMetricsProviderMockRecorder is the mock recorder for MockSysmonMetricsProvider.
type MockSysmonMetricsProviderMockRecorder struct {
	mock *MockSysmonMetricsProvider
}

// NewMockSysmonMetricsProvider creates a new mock instance.
func NewMockSysmonMetricsProvider(ctrl *gomock.Controller) *MockSysmonMetricsProvider {
	mock := &MockSysmonMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockSysmonMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysmonMetricsProvider) EXPECT() *MockSysmonMetricsProviderMockRecorder {
	return m.recorder
}

// GetAllCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllCPUMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonCPUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCPUMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonCPUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCPUMetrics indicates an expected call of GetAllCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllCPUMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllCPUMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllDiskMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetrics indicates an expected call of GetAllDiskMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllDiskMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllDiskMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetAllDiskMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetricsGrouped indicates an expected call of GetAllDiskMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllDiskMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllDiskMetricsGrouped), ctx, pollerID, start, end)
}

// GetAllMountPoints mocks base method.
func (m *MockSysmonMetricsProvider) GetAllMountPoints(ctx context.Context, pollerID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMountPoints", ctx, pollerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMountPoints indicates an expected call of GetAllMountPoints.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllMountPoints(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMountPoints", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllMountPoints), ctx, pollerID)
}

// GetAllProcessMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllProcessMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.ProcessMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProcessMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.ProcessMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProcessMetrics indicates an expected call of GetAllProcessMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllProcessMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProcessMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllProcessMetrics), ctx, pollerID, start, end)
}

// GetAllProcessMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetAllProcessMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonProcessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProcessMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProcessMetricsGrouped indicates an expected call of GetAllProcessMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllProcessMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProcessMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllProcessMetricsGrouped), ctx, pollerID, start, end)
}

// GetCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetMemoryMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetMemoryMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetMemoryMetrics), ctx, pollerID, start, end)
}

// GetMemoryMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetMemoryMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]models.SysmonMemoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.SysmonMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetricsGrouped indicates an expected call of GetMemoryMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetMemoryMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetMemoryMetricsGrouped), ctx, pollerID, start, end)
}

// MockRows is a mock of Rows interface.
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
	isgomock struct{}
}

// MockRowsMockRecorder is the mock recorder for MockRows.
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance.
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Err mocks base method.
func (m *MockRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method.
func (m *MockRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), dest...)
}

// MockQueryExecutor is a mock of QueryExecutor interface.
type MockQueryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockQueryExecutorMockRecorder
	isgomock struct{}
}

// MockQueryExecutorMockRecorder is the mock recorder for MockQueryExecutor.
type MockQueryExecutorMockRecorder struct {
	mock *MockQueryExecutor
}

// NewMockQueryExecutor creates a new mock instance.
func NewMockQueryExecutor(ctrl *gomock.Controller) *MockQueryExecutor {
	mock := &MockQueryExecutor{ctrl: ctrl}
	mock.recorder = &MockQueryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryExecutor) EXPECT() *MockQueryExecutorMockRecorder {
	return m.recorder
}

// ExecuteQuery mocks base method.
func (m *MockQueryExecutor) ExecuteQuery(ctx context.Context, query string, params ...any) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteQuery", varargs...)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockQueryExecutorMockRecorder) ExecuteQuery(ctx, query any, params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockQueryExecutor)(nil).ExecuteQuery), varargs...)
}
