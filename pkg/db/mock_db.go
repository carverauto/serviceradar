// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/db (interfaces: Row,Result,Rows,Transaction,Service)
//
// Generated by this command:
//
//	mockgen -destination=mock_db.go -package=db github.com/carverauto/serviceradar/pkg/db Row,Result,Rows,Transaction,Service
//

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRow is a mock of Row interface.
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
	isgomock struct{}
}

// MockRowMockRecorder is the mock recorder for MockRow.
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance.
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRow) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), dest...)
}

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
	isgomock struct{}
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method.
func (m *MockResult) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId.
func (mr *MockResultMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockResult)(nil).LastInsertId))
}

// RowsAffected mocks base method.
func (m *MockResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockResult)(nil).RowsAffected))
}

// MockRows is a mock of Rows interface.
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
	isgomock struct{}
}

// MockRowsMockRecorder is the mock recorder for MockRows.
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance.
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Err mocks base method.
func (m *MockRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method.
func (m *MockRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), dest...)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Exec mocks base method.
func (m *MockTransaction) Exec(query string, args ...any) (Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransaction)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockTransaction) Query(query string, args ...any) (Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTransactionMockRecorder) Query(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTransaction)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockTransaction) QueryRow(query string, args ...any) Row {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockTransactionMockRecorder) QueryRow(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTransaction)(nil).QueryRow), varargs...)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockService) Begin() (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockServiceMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockService)(nil).Begin))
}

// CleanOldData mocks base method.
func (m *MockService) CleanOldData(retentionPeriod time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanOldData", retentionPeriod)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanOldData indicates an expected call of CleanOldData.
func (mr *MockServiceMockRecorder) CleanOldData(retentionPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanOldData", reflect.TypeOf((*MockService)(nil).CleanOldData), retentionPeriod)
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// Exec mocks base method.
func (m *MockService) Exec(query string, args ...any) (Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockServiceMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockService)(nil).Exec), varargs...)
}

// GetCPUMetrics mocks base method.
func (m *MockService) GetCPUMetrics(pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockServiceMockRecorder) GetCPUMetrics(pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockService)(nil).GetCPUMetrics), pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockService) GetDiskMetrics(pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockServiceMockRecorder) GetDiskMetrics(pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockService)(nil).GetDiskMetrics), pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockService) GetMemoryMetrics(pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockServiceMockRecorder) GetMemoryMetrics(pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockService)(nil).GetMemoryMetrics), pollerID, start, end)
}

// GetMetrics mocks base method.
func (m *MockService) GetMetrics(pollerID, metricName string, start, end time.Time) ([]TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", pollerID, metricName, start, end)
	ret0, _ := ret[0].([]TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockServiceMockRecorder) GetMetrics(pollerID, metricName, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockService)(nil).GetMetrics), pollerID, metricName, start, end)
}

// GetMetricsByType mocks base method.
func (m *MockService) GetMetricsByType(pollerID, metricType string, start, end time.Time) ([]TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByType", pollerID, metricType, start, end)
	ret0, _ := ret[0].([]TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsByType indicates an expected call of GetMetricsByType.
func (mr *MockServiceMockRecorder) GetMetricsByType(pollerID, metricType, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByType", reflect.TypeOf((*MockService)(nil).GetMetricsByType), pollerID, metricType, start, end)
}

// GetPollerHistory mocks base method.
func (m *MockService) GetPollerHistory(pollerID string) ([]PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistory", pollerID)
	ret0, _ := ret[0].([]PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistory indicates an expected call of GetPollerHistory.
func (mr *MockServiceMockRecorder) GetPollerHistory(pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistory", reflect.TypeOf((*MockService)(nil).GetPollerHistory), pollerID)
}

// GetPollerHistoryPoints mocks base method.
func (m *MockService) GetPollerHistoryPoints(pollerID string, limit int) ([]PollerHistoryPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistoryPoints", pollerID, limit)
	ret0, _ := ret[0].([]PollerHistoryPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistoryPoints indicates an expected call of GetPollerHistoryPoints.
func (mr *MockServiceMockRecorder) GetPollerHistoryPoints(pollerID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistoryPoints", reflect.TypeOf((*MockService)(nil).GetPollerHistoryPoints), pollerID, limit)
}

// GetPollerServices mocks base method.
func (m *MockService) GetPollerServices(pollerID string) ([]ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerServices", pollerID)
	ret0, _ := ret[0].([]ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerServices indicates an expected call of GetPollerServices.
func (mr *MockServiceMockRecorder) GetPollerServices(pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerServices", reflect.TypeOf((*MockService)(nil).GetPollerServices), pollerID)
}

// GetPollerStatus mocks base method.
func (m *MockService) GetPollerStatus(pollerID string) (*PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerStatus", pollerID)
	ret0, _ := ret[0].(*PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerStatus indicates an expected call of GetPollerStatus.
func (mr *MockServiceMockRecorder) GetPollerStatus(pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerStatus", reflect.TypeOf((*MockService)(nil).GetPollerStatus), pollerID)
}

// GetServiceHistory mocks base method.
func (m *MockService) GetServiceHistory(pollerID, serviceName string, limit int) ([]ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHistory", pollerID, serviceName, limit)
	ret0, _ := ret[0].([]ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceHistory indicates an expected call of GetServiceHistory.
func (mr *MockServiceMockRecorder) GetServiceHistory(pollerID, serviceName, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHistory", reflect.TypeOf((*MockService)(nil).GetServiceHistory), pollerID, serviceName, limit)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), id)
}

// IsPollerOffline mocks base method.
func (m *MockService) IsPollerOffline(pollerID string, threshold time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPollerOffline", pollerID, threshold)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPollerOffline indicates an expected call of IsPollerOffline.
func (mr *MockServiceMockRecorder) IsPollerOffline(pollerID, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPollerOffline", reflect.TypeOf((*MockService)(nil).IsPollerOffline), pollerID, threshold)
}

// Query mocks base method.
func (m *MockService) Query(query string, args ...any) (Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockServiceMockRecorder) Query(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockService)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockService) QueryRow(query string, args ...any) Row {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockServiceMockRecorder) QueryRow(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockService)(nil).QueryRow), varargs...)
}

// StoreMetric mocks base method.
func (m *MockService) StoreMetric(pollerID string, metric *TimeseriesMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", pollerID, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockServiceMockRecorder) StoreMetric(pollerID, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockService)(nil).StoreMetric), pollerID, metric)
}

// StoreRperfMetrics mocks base method.
func (m *MockService) StoreRperfMetrics(pollerID, serviceName, message string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRperfMetrics", pollerID, serviceName, message, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRperfMetrics indicates an expected call of StoreRperfMetrics.
func (mr *MockServiceMockRecorder) StoreRperfMetrics(pollerID, serviceName, message, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRperfMetrics", reflect.TypeOf((*MockService)(nil).StoreRperfMetrics), pollerID, serviceName, message, timestamp)
}

// StoreSysmonMetrics mocks base method.
func (m *MockService) StoreSysmonMetrics(pollerID string, metrics *models.SysmonMetrics, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSysmonMetrics", pollerID, metrics, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSysmonMetrics indicates an expected call of StoreSysmonMetrics.
func (mr *MockServiceMockRecorder) StoreSysmonMetrics(pollerID, metrics, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSysmonMetrics", reflect.TypeOf((*MockService)(nil).StoreSysmonMetrics), pollerID, metrics, timestamp)
}

// StoreUser mocks base method.
func (m *MockService) StoreUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockServiceMockRecorder) StoreUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockService)(nil).StoreUser), user)
}

// UpdatePollerStatus mocks base method.
func (m *MockService) UpdatePollerStatus(status *PollerStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollerStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollerStatus indicates an expected call of UpdatePollerStatus.
func (mr *MockServiceMockRecorder) UpdatePollerStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollerStatus", reflect.TypeOf((*MockService)(nil).UpdatePollerStatus), status)
}

// UpdateServiceStatus mocks base method.
func (m *MockService) UpdateServiceStatus(status *ServiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceStatus", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceStatus indicates an expected call of UpdateServiceStatus.
func (mr *MockServiceMockRecorder) UpdateServiceStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceStatus", reflect.TypeOf((*MockService)(nil).UpdateServiceStatus), status)
}
