// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/db (interfaces: Service,SysmonMetricsProvider,Rows)
//
// Generated by this command:
//
//	mockgen -destination=mock_db.go -package=db github.com/carverauto/serviceradar/pkg/db Service,SysmonMetricsProvider,Rows
//

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close))
}

// DeletePoller mocks base method.
func (m *MockService) DeletePoller(ctx context.Context, pollerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoller", ctx, pollerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoller indicates an expected call of DeletePoller.
func (mr *MockServiceMockRecorder) DeletePoller(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoller", reflect.TypeOf((*MockService)(nil).DeletePoller), ctx, pollerID)
}

// GetAllCPUMetrics mocks base method.
func (m *MockService) GetAllCPUMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonCPUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCPUMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonCPUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCPUMetrics indicates an expected call of GetAllCPUMetrics.
func (mr *MockServiceMockRecorder) GetAllCPUMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCPUMetrics", reflect.TypeOf((*MockService)(nil).GetAllCPUMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetrics mocks base method.
func (m *MockService) GetAllDiskMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetrics indicates an expected call of GetAllDiskMetrics.
func (mr *MockServiceMockRecorder) GetAllDiskMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetrics", reflect.TypeOf((*MockService)(nil).GetAllDiskMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetricsGrouped mocks base method.
func (m *MockService) GetAllDiskMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetricsGrouped indicates an expected call of GetAllDiskMetricsGrouped.
func (mr *MockServiceMockRecorder) GetAllDiskMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetricsGrouped", reflect.TypeOf((*MockService)(nil).GetAllDiskMetricsGrouped), ctx, pollerID, start, end)
}

// GetAllMountPoints mocks base method.
func (m *MockService) GetAllMountPoints(ctx context.Context, pollerID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMountPoints", ctx, pollerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMountPoints indicates an expected call of GetAllMountPoints.
func (mr *MockServiceMockRecorder) GetAllMountPoints(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMountPoints", reflect.TypeOf((*MockService)(nil).GetAllMountPoints), ctx, pollerID)
}

// GetCPUMetrics mocks base method.
func (m *MockService) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockServiceMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockService)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockService) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockServiceMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockService)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockService) GetMemoryMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockServiceMockRecorder) GetMemoryMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockService)(nil).GetMemoryMetrics), ctx, pollerID, start, end)
}

// GetMemoryMetricsGrouped mocks base method.
func (m *MockService) GetMemoryMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonMemoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetricsGrouped indicates an expected call of GetMemoryMetricsGrouped.
func (mr *MockServiceMockRecorder) GetMemoryMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetricsGrouped", reflect.TypeOf((*MockService)(nil).GetMemoryMetricsGrouped), ctx, pollerID, start, end)
}

// GetMetrics mocks base method.
func (m *MockService) GetMetrics(ctx context.Context, pollerID, metricName string, start, end time.Time) ([]TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, pollerID, metricName, start, end)
	ret0, _ := ret[0].([]TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockServiceMockRecorder) GetMetrics(ctx, pollerID, metricName, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockService)(nil).GetMetrics), ctx, pollerID, metricName, start, end)
}

// GetMetricsByType mocks base method.
func (m *MockService) GetMetricsByType(ctx context.Context, pollerID, metricType string, start, end time.Time) ([]TimeseriesMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsByType", ctx, pollerID, metricType, start, end)
	ret0, _ := ret[0].([]TimeseriesMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsByType indicates an expected call of GetMetricsByType.
func (mr *MockServiceMockRecorder) GetMetricsByType(ctx, pollerID, metricType, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsByType", reflect.TypeOf((*MockService)(nil).GetMetricsByType), ctx, pollerID, metricType, start, end)
}

// GetPollerHistory mocks base method.
func (m *MockService) GetPollerHistory(ctx context.Context, pollerID string) ([]models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistory", ctx, pollerID)
	ret0, _ := ret[0].([]models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistory indicates an expected call of GetPollerHistory.
func (mr *MockServiceMockRecorder) GetPollerHistory(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistory", reflect.TypeOf((*MockService)(nil).GetPollerHistory), ctx, pollerID)
}

// GetPollerHistoryPoints mocks base method.
func (m *MockService) GetPollerHistoryPoints(ctx context.Context, pollerID string, limit int) ([]PollerHistoryPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerHistoryPoints", ctx, pollerID, limit)
	ret0, _ := ret[0].([]PollerHistoryPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerHistoryPoints indicates an expected call of GetPollerHistoryPoints.
func (mr *MockServiceMockRecorder) GetPollerHistoryPoints(ctx, pollerID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerHistoryPoints", reflect.TypeOf((*MockService)(nil).GetPollerHistoryPoints), ctx, pollerID, limit)
}

// GetPollerServices mocks base method.
func (m *MockService) GetPollerServices(ctx context.Context, pollerID string) ([]ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerServices", ctx, pollerID)
	ret0, _ := ret[0].([]ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerServices indicates an expected call of GetPollerServices.
func (mr *MockServiceMockRecorder) GetPollerServices(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerServices", reflect.TypeOf((*MockService)(nil).GetPollerServices), ctx, pollerID)
}

// GetPollerStatus mocks base method.
func (m *MockService) GetPollerStatus(ctx context.Context, pollerID string) (*models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPollerStatus", ctx, pollerID)
	ret0, _ := ret[0].(*models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPollerStatus indicates an expected call of GetPollerStatus.
func (mr *MockServiceMockRecorder) GetPollerStatus(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPollerStatus", reflect.TypeOf((*MockService)(nil).GetPollerStatus), ctx, pollerID)
}

// GetServiceHistory mocks base method.
func (m *MockService) GetServiceHistory(ctx context.Context, pollerID, serviceName string, limit int) ([]ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceHistory", ctx, pollerID, serviceName, limit)
	ret0, _ := ret[0].([]ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceHistory indicates an expected call of GetServiceHistory.
func (mr *MockServiceMockRecorder) GetServiceHistory(ctx, pollerID, serviceName, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceHistory", reflect.TypeOf((*MockService)(nil).GetServiceHistory), ctx, pollerID, serviceName, limit)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), ctx, id)
}

// IsPollerOffline mocks base method.
func (m *MockService) IsPollerOffline(ctx context.Context, pollerID string, threshold time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPollerOffline", ctx, pollerID, threshold)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPollerOffline indicates an expected call of IsPollerOffline.
func (mr *MockServiceMockRecorder) IsPollerOffline(ctx, pollerID, threshold any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPollerOffline", reflect.TypeOf((*MockService)(nil).IsPollerOffline), ctx, pollerID, threshold)
}

// ListNeverReportedPollers mocks base method.
func (m *MockService) ListNeverReportedPollers(ctx context.Context, patterns []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNeverReportedPollers", ctx, patterns)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNeverReportedPollers indicates an expected call of ListNeverReportedPollers.
func (mr *MockServiceMockRecorder) ListNeverReportedPollers(ctx, patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNeverReportedPollers", reflect.TypeOf((*MockService)(nil).ListNeverReportedPollers), ctx, patterns)
}

// ListPollerStatuses mocks base method.
func (m *MockService) ListPollerStatuses(ctx context.Context, patterns []string) ([]models.PollerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPollerStatuses", ctx, patterns)
	ret0, _ := ret[0].([]models.PollerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPollerStatuses indicates an expected call of ListPollerStatuses.
func (mr *MockServiceMockRecorder) ListPollerStatuses(ctx, patterns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPollerStatuses", reflect.TypeOf((*MockService)(nil).ListPollerStatuses), ctx, patterns)
}

// ListPollers mocks base method.
func (m *MockService) ListPollers(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPollers", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPollers indicates an expected call of ListPollers.
func (mr *MockServiceMockRecorder) ListPollers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPollers", reflect.TypeOf((*MockService)(nil).ListPollers), ctx)
}

// StoreMetric mocks base method.
func (m *MockService) StoreMetric(ctx context.Context, pollerID string, metric *TimeseriesMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", ctx, pollerID, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockServiceMockRecorder) StoreMetric(ctx, pollerID, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockService)(nil).StoreMetric), ctx, pollerID, metric)
}

// StoreMetrics mocks base method.
func (m *MockService) StoreMetrics(ctx context.Context, pollerID string, metrics []*TimeseriesMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", ctx, pollerID, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetrics indicates an expected call of StoreMetrics.
func (mr *MockServiceMockRecorder) StoreMetrics(ctx, pollerID, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockService)(nil).StoreMetrics), ctx, pollerID, metrics)
}

// StoreRperfMetrics mocks base method.
func (m *MockService) StoreRperfMetrics(ctx context.Context, pollerID, serviceName, message string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRperfMetrics", ctx, pollerID, serviceName, message, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRperfMetrics indicates an expected call of StoreRperfMetrics.
func (mr *MockServiceMockRecorder) StoreRperfMetrics(ctx, pollerID, serviceName, message, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRperfMetrics", reflect.TypeOf((*MockService)(nil).StoreRperfMetrics), ctx, pollerID, serviceName, message, timestamp)
}

// StoreSysmonMetrics mocks base method.
func (m *MockService) StoreSysmonMetrics(ctx context.Context, pollerID string, metrics *models.SysmonMetrics, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSysmonMetrics", ctx, pollerID, metrics, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSysmonMetrics indicates an expected call of StoreSysmonMetrics.
func (mr *MockServiceMockRecorder) StoreSysmonMetrics(ctx, pollerID, metrics, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSysmonMetrics", reflect.TypeOf((*MockService)(nil).StoreSysmonMetrics), ctx, pollerID, metrics, timestamp)
}

// StoreUser mocks base method.
func (m *MockService) StoreUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockServiceMockRecorder) StoreUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockService)(nil).StoreUser), ctx, user)
}

// UpdatePollerStatus mocks base method.
func (m *MockService) UpdatePollerStatus(ctx context.Context, status *models.PollerStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePollerStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePollerStatus indicates an expected call of UpdatePollerStatus.
func (mr *MockServiceMockRecorder) UpdatePollerStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollerStatus", reflect.TypeOf((*MockService)(nil).UpdatePollerStatus), ctx, status)
}

// UpdateServiceStatus mocks base method.
func (m *MockService) UpdateServiceStatus(ctx context.Context, status *ServiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceStatus indicates an expected call of UpdateServiceStatus.
func (mr *MockServiceMockRecorder) UpdateServiceStatus(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceStatus", reflect.TypeOf((*MockService)(nil).UpdateServiceStatus), ctx, status)
}

// UpdateServiceStatuses mocks base method.
func (m *MockService) UpdateServiceStatuses(ctx context.Context, statuses []*ServiceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceStatuses", ctx, statuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceStatuses indicates an expected call of UpdateServiceStatuses.
func (mr *MockServiceMockRecorder) UpdateServiceStatuses(ctx, statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceStatuses", reflect.TypeOf((*MockService)(nil).UpdateServiceStatuses), ctx, statuses)
}

// MockSysmonMetricsProvider is a mock of SysmonMetricsProvider interface.
type MockSysmonMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSysmonMetricsProviderMockRecorder
	isgomock struct{}
}

// MockSysmonMetricsProviderMockRecorder is the mock recorder for MockSysmonMetricsProvider.
type MockSysmonMetricsProviderMockRecorder struct {
	mock *MockSysmonMetricsProvider
}

// NewMockSysmonMetricsProvider creates a new mock instance.
func NewMockSysmonMetricsProvider(ctrl *gomock.Controller) *MockSysmonMetricsProvider {
	mock := &MockSysmonMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockSysmonMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysmonMetricsProvider) EXPECT() *MockSysmonMetricsProviderMockRecorder {
	return m.recorder
}

// GetAllCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllCPUMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonCPUResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCPUMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonCPUResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCPUMetrics indicates an expected call of GetAllCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllCPUMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllCPUMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetAllDiskMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetrics indicates an expected call of GetAllDiskMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllDiskMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllDiskMetrics), ctx, pollerID, start, end)
}

// GetAllDiskMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetAllDiskMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonDiskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDiskMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDiskMetricsGrouped indicates an expected call of GetAllDiskMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllDiskMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDiskMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllDiskMetricsGrouped), ctx, pollerID, start, end)
}

// GetAllMountPoints mocks base method.
func (m *MockSysmonMetricsProvider) GetAllMountPoints(ctx context.Context, pollerID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMountPoints", ctx, pollerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMountPoints indicates an expected call of GetAllMountPoints.
func (mr *MockSysmonMetricsProviderMockRecorder) GetAllMountPoints(ctx, pollerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMountPoints", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetAllMountPoints), ctx, pollerID)
}

// GetCPUMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetCPUMetrics(ctx context.Context, pollerID string, coreID int, start, end time.Time) ([]models.CPUMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUMetrics", ctx, pollerID, coreID, start, end)
	ret0, _ := ret[0].([]models.CPUMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUMetrics indicates an expected call of GetCPUMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetCPUMetrics(ctx, pollerID, coreID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetCPUMetrics), ctx, pollerID, coreID, start, end)
}

// GetDiskMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetDiskMetrics(ctx context.Context, pollerID, mountPoint string, start, end time.Time) ([]models.DiskMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskMetrics", ctx, pollerID, mountPoint, start, end)
	ret0, _ := ret[0].([]models.DiskMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskMetrics indicates an expected call of GetDiskMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetDiskMetrics(ctx, pollerID, mountPoint, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetDiskMetrics), ctx, pollerID, mountPoint, start, end)
}

// GetMemoryMetrics mocks base method.
func (m *MockSysmonMetricsProvider) GetMemoryMetrics(ctx context.Context, pollerID string, start, end time.Time) ([]models.MemoryMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetrics", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]models.MemoryMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetrics indicates an expected call of GetMemoryMetrics.
func (mr *MockSysmonMetricsProviderMockRecorder) GetMemoryMetrics(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetrics", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetMemoryMetrics), ctx, pollerID, start, end)
}

// GetMemoryMetricsGrouped mocks base method.
func (m *MockSysmonMetricsProvider) GetMemoryMetricsGrouped(ctx context.Context, pollerID string, start, end time.Time) ([]SysmonMemoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryMetricsGrouped", ctx, pollerID, start, end)
	ret0, _ := ret[0].([]SysmonMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoryMetricsGrouped indicates an expected call of GetMemoryMetricsGrouped.
func (mr *MockSysmonMetricsProviderMockRecorder) GetMemoryMetricsGrouped(ctx, pollerID, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryMetricsGrouped", reflect.TypeOf((*MockSysmonMetricsProvider)(nil).GetMemoryMetricsGrouped), ctx, pollerID, start, end)
}

// MockRows is a mock of Rows interface.
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
	isgomock struct{}
}

// MockRowsMockRecorder is the mock recorder for MockRows.
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance.
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Err mocks base method.
func (m *MockRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method.
func (m *MockRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), dest...)
}
