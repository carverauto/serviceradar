package parser

import (
	"errors"
	"github.com/antlr/antlr4/runtime/Go/antlr"
	"github.com/carverauto/serviceradar/pkg/srql/models"
	// This will be generated by ANTLR:
	"github.com/carverauto/serviceradar/pkg/srql/parser/gen"
)

// Parser is responsible for parsing network query language strings
type Parser struct {
	// Any configuration options can be added here
}

// NewParser creates a new Parser instance
func NewParser() *Parser {
	return &Parser{}
}

// Parse parses a query string and returns a Query model
func (p *Parser) Parse(queryStr string) (*models.Query, error) {
	// Create the lexer and parser
	input := antlr.NewInputStream(queryStr)
	lexer := gen.NewNetworkQueryLanguageLexer(input)
	tokens := antlr.NewCommonTokenStream(lexer, antlr.TokenDefaultChannel)
	parser := gen.NewNetworkQueryLanguageParser(tokens)

	// Set error handling
	errorListener := &errorListener{}
	parser.RemoveErrorListeners()
	parser.AddErrorListener(errorListener)

	// Parse the query
	tree := parser.Query()

	// Check for syntax errors
	if errorListener.HasErrors() {
		return nil, errors.New("syntax error: " + errorListener.GetErrorMessage())
	}

	// Create a visitor to build the query model
	visitor := NewQueryVisitor()
	query := visitor.Visit(tree)

	if query == nil {
		return nil, errors.New("failed to parse query")
	}

	return query.(*models.Query), nil
}

// Custom error listener to capture syntax errors
type errorListener struct {
	errorMsg string
}

func (l *errorListener) SyntaxError(recognizer antlr.Recognizer, offendingSymbol interface{}, line, column int, msg string, e antlr.RecognitionException) {
	l.errorMsg = msg
}

func (l *errorListener) HasErrors() bool {
	return l.errorMsg != ""
}

func (l *errorListener) GetErrorMessage() string {
	return l.errorMsg
}

// Other methods required by the antlr.ErrorListener interface
func (l *errorListener) ReportAmbiguity(recognizer antlr.Parser, dfa *antlr.DFA, startIndex, stopIndex int, exact bool, ambigAlts *antlr.BitSet, configs antlr.ATNConfigSet) {
}
func (l *errorListener) ReportAttemptingFullContext(recognizer antlr.Parser, dfa *antlr.DFA, startIndex, stopIndex int, conflictingAlts *antlr.BitSet, configs antlr.ATNConfigSet) {
}
func (l *errorListener) ReportContextSensitivity(recognizer antlr.Parser, dfa *antlr.DFA, startIndex, stopIndex int, prediction int, configs antlr.ATNConfigSet) {
}
