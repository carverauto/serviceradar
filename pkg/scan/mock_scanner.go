// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mfreeman451/serviceradar/pkg/scan (interfaces: Scanner,ResultProcessor)
//
// Generated by this command:
//
//	mockgen -destination=mock_scanner.go -package=scan github.com/mfreeman451/serviceradar/pkg/scan Scanner,ResultProcessor
//

// Package scan is a generated GoMock package.
package scan

import (
	context "context"
	reflect "reflect"

	models "github.com/mfreeman451/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
	isgomock struct{}
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockScanner) Scan(arg0 context.Context, arg1 []models.Target) (<-chan models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].(<-chan models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), arg0, arg1)
}

// Stop mocks base method.
func (m *MockScanner) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockScannerMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScanner)(nil).Stop), ctx)
}

// MockResultProcessor is a mock of ResultProcessor interface.
type MockResultProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockResultProcessorMockRecorder
	isgomock struct{}
}

// MockResultProcessorMockRecorder is the mock recorder for MockResultProcessor.
type MockResultProcessorMockRecorder struct {
	mock *MockResultProcessor
}

// NewMockResultProcessor creates a new mock instance.
func NewMockResultProcessor(ctrl *gomock.Controller) *MockResultProcessor {
	mock := &MockResultProcessor{ctrl: ctrl}
	mock.recorder = &MockResultProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultProcessor) EXPECT() *MockResultProcessorMockRecorder {
	return m.recorder
}

// GetSummary mocks base method.
func (m *MockResultProcessor) GetSummary() (*models.SweepSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary")
	ret0, _ := ret[0].(*models.SweepSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockResultProcessorMockRecorder) GetSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockResultProcessor)(nil).GetSummary))
}

// Process mocks base method.
func (m *MockResultProcessor) Process(result *models.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockResultProcessorMockRecorder) Process(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockResultProcessor)(nil).Process), result)
}

// Reset mocks base method.
func (m *MockResultProcessor) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockResultProcessorMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResultProcessor)(nil).Reset))
}
