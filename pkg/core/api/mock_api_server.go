// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/core/api (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=mock_api_server.go -package=api github.com/carverauto/serviceradar/pkg/core/api Service
//

// Package api is a generated GoMock package.
package api

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SetKnownPollers mocks base method.
func (m *MockService) SetKnownPollers(knownPollers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKnownPollers", knownPollers)
}

// SetKnownPollers indicates an expected call of SetKnownPollers.
func (mr *MockServiceMockRecorder) SetKnownPollers(knownPollers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKnownPollers", reflect.TypeOf((*MockService)(nil).SetKnownPollers), knownPollers)
}

// SetPollerHistoryHandler mocks base method.
func (m *MockService) SetPollerHistoryHandler(handler func(string) ([]PollerHistoryPoint, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPollerHistoryHandler", handler)
}

// SetPollerHistoryHandler indicates an expected call of SetPollerHistoryHandler.
func (mr *MockServiceMockRecorder) SetPollerHistoryHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPollerHistoryHandler", reflect.TypeOf((*MockService)(nil).SetPollerHistoryHandler), handler)
}

// Start mocks base method.
func (m *MockService) Start(addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), addr)
}

// UpdatePollerStatus mocks base method.
func (m *MockService) UpdatePollerStatus(pollerID string, status *PollerStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePollerStatus", pollerID, status)
}

// UpdatePollerStatus indicates an expected call of UpdatePollerStatus.
func (mr *MockServiceMockRecorder) UpdatePollerStatus(pollerID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePollerStatus", reflect.TypeOf((*MockService)(nil).UpdatePollerStatus), pollerID, status)
}
