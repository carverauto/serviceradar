load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "core",
    srcs = [
        "backfill.go",
        "config.go",
        "devices.go",
        "discovery.go",
        "errors.go",
        "events.go",
        "flush.go",
        "interfaces.go",
        "identity_lookup.go",
        "metrics.go",
        "mock_server.go",
        "notifications.go",
        "poller_recovery.go",
        "pollers.go",
        "result_processor.go",
        "server.go",
        "services.go",
        "snmp.go",
        "time_utils.go",
        "types.go",
    ],
    importpath = "github.com/carverauto/serviceradar/pkg/core",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/checker/snmp",
        "//pkg/config",
        "//pkg/core/alerts",
        "//pkg/core/api",
        "//pkg/core/auth",
        "//pkg/db",
        "//pkg/grpc",
        "//pkg/lifecycle",
        "//pkg/logger",
        "//pkg/identitymap:identitymap",
        "//pkg/metrics",
        "//pkg/metricstore",
        "//pkg/models",
        "//pkg/natsutil",
        "//pkg/registry",
        "//proto",
        "//proto/discovery",
        "@com_github_nats_io_nats_go//:nats_go",
        "@io_opentelemetry_go_otel//:otel",
        "@io_opentelemetry_go_otel//attribute",
        "@io_opentelemetry_go_otel//codes",
        "@io_opentelemetry_go_otel_trace//:trace",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_uber_go_mock//gomock",
    ],
)

go_test(
    name = "core_test",
    srcs = [
        "discovery_test.go",
        "identity_lookup_test.go",
        "kv_metadata_test.go",
        "result_processor_test.go",
        "metrics_sweep_test.go",
        "metrics_test.go",
        "performance_integration_test.go",
        "poller_recovery_test.go",
        "server_test.go",
    ],
    embed = [":core"],
    deps = [
        "//pkg/core/alerts",
        "//pkg/core/api",
        "//pkg/core/auth",
        "//pkg/db",
        "//pkg/logger",
        "//pkg/identitymap:identitymap",
        "//pkg/metrics",
        "//pkg/metricstore",
        "//pkg/models",
        "//pkg/registry",
        "//proto",
        "//proto/discovery",
        "//proto/identitymap/v1:identity_map",
        "@com_github_stretchr_testify//assert",
        "@com_github_stretchr_testify//require",
        "@io_opentelemetry_go_otel//:otel",
        "@io_opentelemetry_go_otel_trace//noop",
        "@org_golang_google_protobuf//types/known/wrapperspb",
        "@org_uber_go_mock//gomock",
    ],
)
