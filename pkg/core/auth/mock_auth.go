// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/core/auth (interfaces: AuthService)
//
// Generated by this command:
//
//	mockgen -destination=mock_auth.go -package=auth github.com/carverauto/serviceradar/pkg/core/auth AuthService
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	models "github.com/carverauto/serviceradar/pkg/models"
	goth "github.com/markbates/goth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// BeginOAuth mocks base method.
func (m *MockAuthService) BeginOAuth(ctx context.Context, provider string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginOAuth", ctx, provider)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginOAuth indicates an expected call of BeginOAuth.
func (mr *MockAuthServiceMockRecorder) BeginOAuth(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginOAuth", reflect.TypeOf((*MockAuthService)(nil).BeginOAuth), ctx, provider)
}

// CompleteOAuth mocks base method.
func (m *MockAuthService) CompleteOAuth(ctx context.Context, provider string, user goth.User) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOAuth", ctx, provider, user)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteOAuth indicates an expected call of CompleteOAuth.
func (mr *MockAuthServiceMockRecorder) CompleteOAuth(ctx, provider, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOAuth", reflect.TypeOf((*MockAuthService)(nil).CompleteOAuth), ctx, provider, user)
}

// LoginLocal mocks base method.
func (m *MockAuthService) LoginLocal(ctx context.Context, username, password string) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginLocal", ctx, username, password)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginLocal indicates an expected call of LoginLocal.
func (mr *MockAuthServiceMockRecorder) LoginLocal(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginLocal", reflect.TypeOf((*MockAuthService)(nil).LoginLocal), ctx, username, password)
}

// RefreshToken mocks base method.
func (m *MockAuthService) RefreshToken(ctx context.Context, refreshToken string) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthServiceMockRecorder) RefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthService)(nil).RefreshToken), ctx, refreshToken)
}

// VerifyToken mocks base method.
func (m *MockAuthService) VerifyToken(ctx context.Context, token string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthServiceMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthService)(nil).VerifyToken), ctx, token)
}
