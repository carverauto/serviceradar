// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/mapper (interfaces: Mapper,Publisher)
//
// Generated by this command:
//
//	mockgen -destination=mock_mapper.go -package=mapper github.com/carverauto/serviceradar/pkg/mapper Mapper,Publisher
//

// Package mapper is a generated GoMock package.
package mapper

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMapper is a mock of Mapper interface.
type MockMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMapperMockRecorder
	isgomock struct{}
}

// MockMapperMockRecorder is the mock recorder for MockMapper.
type MockMapperMockRecorder struct {
	mock *MockMapper
}

// NewMockMapper creates a new mock instance.
func NewMockMapper(ctrl *gomock.Controller) *MockMapper {
	mock := &MockMapper{ctrl: ctrl}
	mock.recorder = &MockMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapper) EXPECT() *MockMapperMockRecorder {
	return m.recorder
}

// CancelDiscovery mocks base method.
func (m *MockMapper) CancelDiscovery(ctx context.Context, discoveryID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDiscovery", ctx, discoveryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelDiscovery indicates an expected call of CancelDiscovery.
func (mr *MockMapperMockRecorder) CancelDiscovery(ctx, discoveryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDiscovery", reflect.TypeOf((*MockMapper)(nil).CancelDiscovery), ctx, discoveryID)
}

// GetDiscoveryResults mocks base method.
func (m *MockMapper) GetDiscoveryResults(ctx context.Context, discoveryID string, includeRawData bool) (*DiscoveryResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryResults", ctx, discoveryID, includeRawData)
	ret0, _ := ret[0].(*DiscoveryResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveryResults indicates an expected call of GetDiscoveryResults.
func (mr *MockMapperMockRecorder) GetDiscoveryResults(ctx, discoveryID, includeRawData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryResults", reflect.TypeOf((*MockMapper)(nil).GetDiscoveryResults), ctx, discoveryID, includeRawData)
}

// GetDiscoveryStatus mocks base method.
func (m *MockMapper) GetDiscoveryStatus(ctx context.Context, discoveryID string) (*DiscoveryStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveryStatus", ctx, discoveryID)
	ret0, _ := ret[0].(*DiscoveryStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscoveryStatus indicates an expected call of GetDiscoveryStatus.
func (mr *MockMapperMockRecorder) GetDiscoveryStatus(ctx, discoveryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveryStatus", reflect.TypeOf((*MockMapper)(nil).GetDiscoveryStatus), ctx, discoveryID)
}

// Start mocks base method.
func (m *MockMapper) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMapperMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMapper)(nil).Start), ctx)
}

// StartDiscovery mocks base method.
func (m *MockMapper) StartDiscovery(ctx context.Context, params *DiscoveryParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDiscovery", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDiscovery indicates an expected call of StartDiscovery.
func (mr *MockMapperMockRecorder) StartDiscovery(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDiscovery", reflect.TypeOf((*MockMapper)(nil).StartDiscovery), ctx, params)
}

// Stop mocks base method.
func (m *MockMapper) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockMapperMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMapper)(nil).Stop), ctx)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
	isgomock struct{}
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishDevice mocks base method.
func (m *MockPublisher) PublishDevice(ctx context.Context, device *DiscoveredDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDevice indicates an expected call of PublishDevice.
func (mr *MockPublisherMockRecorder) PublishDevice(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDevice", reflect.TypeOf((*MockPublisher)(nil).PublishDevice), ctx, device)
}

// PublishInterface mocks base method.
func (m *MockPublisher) PublishInterface(ctx context.Context, iface *DiscoveredInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishInterface", ctx, iface)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishInterface indicates an expected call of PublishInterface.
func (mr *MockPublisherMockRecorder) PublishInterface(ctx, iface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishInterface", reflect.TypeOf((*MockPublisher)(nil).PublishInterface), ctx, iface)
}

// PublishTopologyLink mocks base method.
func (m *MockPublisher) PublishTopologyLink(ctx context.Context, link *TopologyLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTopologyLink", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTopologyLink indicates an expected call of PublishTopologyLink.
func (mr *MockPublisherMockRecorder) PublishTopologyLink(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTopologyLink", reflect.TypeOf((*MockPublisher)(nil).PublishTopologyLink), ctx, link)
}
