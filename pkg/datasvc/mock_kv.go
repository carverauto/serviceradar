// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/kv (interfaces: KVStore)
//
// Generated by this command:
//
//	mockgen -destination=mock_kv.go -package=kv github.com/carverauto/serviceradar/pkg/kv KVStore
//

// Package kv is a generated GoMock package.
package datasvc

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
	isgomock struct{}
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKVStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKVStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKVStore)(nil).Close))
}

// Delete mocks base method.
func (m *MockKVStore) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKVStoreMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVStore)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockKVStore) Get(ctx context.Context, key string) ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockKVStoreMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStore)(nil).Get), ctx, key)
}

// GetEntry mocks base method.
func (m *MockKVStore) GetEntry(ctx context.Context, key string) (Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", ctx, key)
	ret0, _ := ret[0].(Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockKVStoreMockRecorder) GetEntry(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockKVStore)(nil).GetEntry), ctx, key)
}

// Put mocks base method.
func (m *MockKVStore) Put(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKVStoreMockRecorder) Put(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVStore)(nil).Put), ctx, key, value, ttl)
}

// PutIfAbsent mocks base method.
func (m *MockKVStore) PutIfAbsent(ctx context.Context, key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIfAbsent", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutIfAbsent indicates an expected call of PutIfAbsent.
func (mr *MockKVStoreMockRecorder) PutIfAbsent(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIfAbsent", reflect.TypeOf((*MockKVStore)(nil).PutIfAbsent), ctx, key, value, ttl)
}

// PutMany mocks base method.
func (m *MockKVStore) PutMany(ctx context.Context, entries []KeyValueEntry, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMany", ctx, entries, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMany indicates an expected call of PutMany.
func (mr *MockKVStoreMockRecorder) PutMany(ctx, entries, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockKVStore)(nil).PutMany), ctx, entries, ttl)
}

// Update mocks base method.
func (m *MockKVStore) Update(ctx context.Context, key string, value []byte, revision uint64, ttl time.Duration) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, key, value, revision, ttl)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockKVStoreMockRecorder) Update(ctx, key, value, revision, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKVStore)(nil).Update), ctx, key, value, revision, ttl)
}

// Watch mocks base method.
func (m *MockKVStore) Watch(ctx context.Context, key string) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, key)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKVStoreMockRecorder) Watch(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKVStore)(nil).Watch), ctx, key)
}

// PutObject mocks base method.
func (m *MockKVStore) PutObject(ctx context.Context, key string, reader io.Reader, meta ObjectMetadata) (*ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, key, reader, meta)
	ret0, _ := ret[0].(*ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockKVStoreMockRecorder) PutObject(ctx, key, reader, meta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockKVStore)(nil).PutObject), ctx, key, reader, meta)
}

// GetObject mocks base method.
func (m *MockKVStore) GetObject(ctx context.Context, key string) (io.ReadCloser, *ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, key)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*ObjectInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetObject indicates an expected call of GetObject.
func (mr *MockKVStoreMockRecorder) GetObject(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockKVStore)(nil).GetObject), ctx, key)
}

// DeleteObject mocks base method.
func (m *MockKVStore) DeleteObject(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockKVStoreMockRecorder) DeleteObject(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockKVStore)(nil).DeleteObject), ctx, key)
}

// GetObjectInfo mocks base method.
func (m *MockKVStore) GetObjectInfo(ctx context.Context, key string) (*ObjectInfo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectInfo", ctx, key)
	ret0, _ := ret[0].(*ObjectInfo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetObjectInfo indicates an expected call of GetObjectInfo.
func (mr *MockKVStoreMockRecorder) GetObjectInfo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectInfo", reflect.TypeOf((*MockKVStore)(nil).GetObjectInfo), ctx, key)
}
