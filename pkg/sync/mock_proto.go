// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/proto (interfaces: AgentService_StreamResultsServer)
//
// Generated by this command:
//
//	mockgen -destination=mock_proto.go -package=sync github.com/carverauto/serviceradar/proto AgentService_StreamResultsServer
//

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	proto "github.com/carverauto/serviceradar/proto"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockAgentService_StreamResultsServer is a mock of AgentService_StreamResultsServer interface.
type MockAgentService_StreamResultsServer[Res any] struct {
	ctrl     *gomock.Controller
	recorder *MockAgentService_StreamResultsServerMockRecorder[Res]
	isgomock struct{}
}

// MockAgentService_StreamResultsServerMockRecorder is the mock recorder for MockAgentService_StreamResultsServer.
type MockAgentService_StreamResultsServerMockRecorder[Res any] struct {
	mock *MockAgentService_StreamResultsServer[Res]
}

// NewMockAgentService_StreamResultsServer creates a new mock instance.
func NewMockAgentService_StreamResultsServer[Res any](ctrl *gomock.Controller) *MockAgentService_StreamResultsServer[Res] {
	mock := &MockAgentService_StreamResultsServer[Res]{ctrl: ctrl}
	mock.recorder = &MockAgentService_StreamResultsServerMockRecorder[Res]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentService_StreamResultsServer[Res]) EXPECT() *MockAgentService_StreamResultsServerMockRecorder[Res] {
	return m.recorder
}

// Context mocks base method.
func (m *MockAgentService_StreamResultsServer[Res]) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockAgentService_StreamResultsServer[Res]) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockAgentService_StreamResultsServer[Res]) Send(arg0 *proto.ResultsChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockAgentService_StreamResultsServer[Res]) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockAgentService_StreamResultsServer[Res]) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockAgentService_StreamResultsServer[Res]) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockAgentService_StreamResultsServer[Res]) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockAgentService_StreamResultsServerMockRecorder[Res]) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAgentService_StreamResultsServer[Res])(nil).SetTrailer), arg0)
}
