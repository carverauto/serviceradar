// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/sync/integrations/armis (interfaces: HTTPClient,TokenProvider,DeviceFetcher,KVWriter,SweepResultsQuerier,ArmisUpdater)
//
// Generated by this command:
//
//	mockgen -destination=mock_armis.go -package=armis github.com/carverauto/serviceradar/pkg/sync/integrations/armis HTTPClient,TokenProvider,DeviceFetcher,KVWriter,SweepResultsQuerier,ArmisUpdater
//

// Package armis is a generated GoMock package.
package armis

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

// MockTokenProvider is a mock of TokenProvider interface.
type MockTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTokenProviderMockRecorder
	isgomock struct{}
}

// MockTokenProviderMockRecorder is the mock recorder for MockTokenProvider.
type MockTokenProviderMockRecorder struct {
	mock *MockTokenProvider
}

// NewMockTokenProvider creates a new mock instance.
func NewMockTokenProvider(ctrl *gomock.Controller) *MockTokenProvider {
	mock := &MockTokenProvider{ctrl: ctrl}
	mock.recorder = &MockTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenProvider) EXPECT() *MockTokenProviderMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockTokenProvider) GetAccessToken(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockTokenProviderMockRecorder) GetAccessToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockTokenProvider)(nil).GetAccessToken), ctx)
}

// MockDeviceFetcher is a mock of DeviceFetcher interface.
type MockDeviceFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceFetcherMockRecorder
	isgomock struct{}
}

// MockDeviceFetcherMockRecorder is the mock recorder for MockDeviceFetcher.
type MockDeviceFetcherMockRecorder struct {
	mock *MockDeviceFetcher
}

// NewMockDeviceFetcher creates a new mock instance.
func NewMockDeviceFetcher(ctrl *gomock.Controller) *MockDeviceFetcher {
	mock := &MockDeviceFetcher{ctrl: ctrl}
	mock.recorder = &MockDeviceFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceFetcher) EXPECT() *MockDeviceFetcherMockRecorder {
	return m.recorder
}

// FetchDevicesPage mocks base method.
func (m *MockDeviceFetcher) FetchDevicesPage(ctx context.Context, accessToken, query string, from, length int) (*SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDevicesPage", ctx, accessToken, query, from, length)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDevicesPage indicates an expected call of FetchDevicesPage.
func (mr *MockDeviceFetcherMockRecorder) FetchDevicesPage(ctx, accessToken, query, from, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDevicesPage", reflect.TypeOf((*MockDeviceFetcher)(nil).FetchDevicesPage), ctx, accessToken, query, from, length)
}

// MockKVWriter is a mock of KVWriter interface.
type MockKVWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKVWriterMockRecorder
	isgomock struct{}
}

// MockKVWriterMockRecorder is the mock recorder for MockKVWriter.
type MockKVWriterMockRecorder struct {
	mock *MockKVWriter
}

// NewMockKVWriter creates a new mock instance.
func NewMockKVWriter(ctrl *gomock.Controller) *MockKVWriter {
	mock := &MockKVWriter{ctrl: ctrl}
	mock.recorder = &MockKVWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVWriter) EXPECT() *MockKVWriterMockRecorder {
	return m.recorder
}

// WriteSweepConfig mocks base method.
func (m *MockKVWriter) WriteSweepConfig(ctx context.Context, sweepConfig *models.SweepConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSweepConfig", ctx, sweepConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSweepConfig indicates an expected call of WriteSweepConfig.
func (mr *MockKVWriterMockRecorder) WriteSweepConfig(ctx, sweepConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSweepConfig", reflect.TypeOf((*MockKVWriter)(nil).WriteSweepConfig), ctx, sweepConfig)
}

// MockSweepResultsQuerier is a mock of SweepResultsQuerier interface.
type MockSweepResultsQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockSweepResultsQuerierMockRecorder
	isgomock struct{}
}

// MockSweepResultsQuerierMockRecorder is the mock recorder for MockSweepResultsQuerier.
type MockSweepResultsQuerierMockRecorder struct {
	mock *MockSweepResultsQuerier
}

// NewMockSweepResultsQuerier creates a new mock instance.
func NewMockSweepResultsQuerier(ctrl *gomock.Controller) *MockSweepResultsQuerier {
	mock := &MockSweepResultsQuerier{ctrl: ctrl}
	mock.recorder = &MockSweepResultsQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSweepResultsQuerier) EXPECT() *MockSweepResultsQuerierMockRecorder {
	return m.recorder
}

// GetDeviceStatesBySource mocks base method.
func (m *MockSweepResultsQuerier) GetDeviceStatesBySource(ctx context.Context, source string) ([]DeviceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStatesBySource", ctx, source)
	ret0, _ := ret[0].([]DeviceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStatesBySource indicates an expected call of GetDeviceStatesBySource.
func (mr *MockSweepResultsQuerierMockRecorder) GetDeviceStatesBySource(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStatesBySource", reflect.TypeOf((*MockSweepResultsQuerier)(nil).GetDeviceStatesBySource), ctx, source)
}

// MockArmisUpdater is a mock of ArmisUpdater interface.
type MockArmisUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockArmisUpdaterMockRecorder
	isgomock struct{}
}

// MockArmisUpdaterMockRecorder is the mock recorder for MockArmisUpdater.
type MockArmisUpdaterMockRecorder struct {
	mock *MockArmisUpdater
}

// NewMockArmisUpdater creates a new mock instance.
func NewMockArmisUpdater(ctrl *gomock.Controller) *MockArmisUpdater {
	mock := &MockArmisUpdater{ctrl: ctrl}
	mock.recorder = &MockArmisUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArmisUpdater) EXPECT() *MockArmisUpdaterMockRecorder {
	return m.recorder
}

// UpdateDeviceCustomAttributes mocks base method.
func (m *MockArmisUpdater) UpdateDeviceCustomAttributes(ctx context.Context, deviceID int, attributes map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCustomAttributes", ctx, deviceID, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCustomAttributes indicates an expected call of UpdateDeviceCustomAttributes.
func (mr *MockArmisUpdaterMockRecorder) UpdateDeviceCustomAttributes(ctx, deviceID, attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCustomAttributes", reflect.TypeOf((*MockArmisUpdater)(nil).UpdateDeviceCustomAttributes), ctx, deviceID, attributes)
}

// UpdateDeviceStatus mocks base method.
func (m *MockArmisUpdater) UpdateDeviceStatus(ctx context.Context, updates []ArmisDeviceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceStatus", ctx, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceStatus indicates an expected call of UpdateDeviceStatus.
func (mr *MockArmisUpdaterMockRecorder) UpdateDeviceStatus(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceStatus", reflect.TypeOf((*MockArmisUpdater)(nil).UpdateDeviceStatus), ctx, updates)
}
