// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/sync/integrations/netbox (interfaces: SRQLQuerier,ResultSubmitter)
//
// Generated by this command:
//
//	mockgen -destination=pkg/sync/integrations/netbox/mock_netbox.go -package=netbox github.com/carverauto/serviceradar/pkg/sync/integrations/netbox SRQLQuerier,ResultSubmitter
//

// Package netbox is a generated GoMock package.
package netbox

import (
	context "context"
	reflect "reflect"

	models "github.com/carverauto/serviceradar/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSRQLQuerier is a mock of SRQLQuerier interface.
type MockSRQLQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockSRQLQuerierMockRecorder
	isgomock struct{}
}

// MockSRQLQuerierMockRecorder is the mock recorder for MockSRQLQuerier.
type MockSRQLQuerierMockRecorder struct {
	mock *MockSRQLQuerier
}

// NewMockSRQLQuerier creates a new mock instance.
func NewMockSRQLQuerier(ctrl *gomock.Controller) *MockSRQLQuerier {
	mock := &MockSRQLQuerier{ctrl: ctrl}
	mock.recorder = &MockSRQLQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSRQLQuerier) EXPECT() *MockSRQLQuerierMockRecorder {
	return m.recorder
}

// GetDeviceStatesBySource mocks base method.
func (m *MockSRQLQuerier) GetDeviceStatesBySource(ctx context.Context, source string) ([]DeviceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStatesBySource", ctx, source)
	ret0, _ := ret[0].([]DeviceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStatesBySource indicates an expected call of GetDeviceStatesBySource.
func (mr *MockSRQLQuerierMockRecorder) GetDeviceStatesBySource(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStatesBySource", reflect.TypeOf((*MockSRQLQuerier)(nil).GetDeviceStatesBySource), ctx, source)
}

// MockResultSubmitter is a mock of ResultSubmitter interface.
type MockResultSubmitter struct {
	ctrl     *gomock.Controller
	recorder *MockResultSubmitterMockRecorder
	isgomock struct{}
}

// MockResultSubmitterMockRecorder is the mock recorder for MockResultSubmitter.
type MockResultSubmitterMockRecorder struct {
	mock *MockResultSubmitter
}

// NewMockResultSubmitter creates a new mock instance.
func NewMockResultSubmitter(ctrl *gomock.Controller) *MockResultSubmitter {
	mock := &MockResultSubmitter{ctrl: ctrl}
	mock.recorder = &MockResultSubmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultSubmitter) EXPECT() *MockResultSubmitterMockRecorder {
	return m.recorder
}

// SubmitBatchSweepResults mocks base method.
func (m *MockResultSubmitter) SubmitBatchSweepResults(ctx context.Context, results []*models.SweepResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatchSweepResults", ctx, results)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitBatchSweepResults indicates an expected call of SubmitBatchSweepResults.
func (mr *MockResultSubmitterMockRecorder) SubmitBatchSweepResults(ctx, results any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatchSweepResults", reflect.TypeOf((*MockResultSubmitter)(nil).SubmitBatchSweepResults), ctx, results)
}

// SubmitSweepResult mocks base method.
func (m *MockResultSubmitter) SubmitSweepResult(ctx context.Context, result *models.SweepResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitSweepResult", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitSweepResult indicates an expected call of SubmitSweepResult.
func (mr *MockResultSubmitterMockRecorder) SubmitSweepResult(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitSweepResult", reflect.TypeOf((*MockResultSubmitter)(nil).SubmitSweepResult), ctx, result)
}
