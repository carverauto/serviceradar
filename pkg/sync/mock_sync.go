// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/sync (interfaces: KVClient,GRPCClient,Integration,SRQLQuerier)
//
// Generated by this command:
//
//	mockgen -destination=mock_sync.go -package=sync github.com/carverauto/serviceradar/pkg/sync KVClient,GRPCClient,Integration,SRQLQuerier
//

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	models "github.com/carverauto/serviceradar/pkg/models"
	proto "github.com/carverauto/serviceradar/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKVClient is a mock of KVClient interface.
type MockKVClient struct {
	ctrl     *gomock.Controller
	recorder *MockKVClientMockRecorder
	isgomock struct{}
}

// MockKVClientMockRecorder is the mock recorder for MockKVClient.
type MockKVClientMockRecorder struct {
	mock *MockKVClient
}

// NewMockKVClient creates a new mock instance.
func NewMockKVClient(ctrl *gomock.Controller) *MockKVClient {
	mock := &MockKVClient{ctrl: ctrl}
	mock.recorder = &MockKVClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVClient) EXPECT() *MockKVClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKVClient) Delete(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKVClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockKVClient) Get(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVClient)(nil).Get), varargs...)
}

// Info mocks base method.
func (m *MockKVClient) Info(ctx context.Context, in *proto.InfoRequest, opts ...grpc.CallOption) (*proto.InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*proto.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockKVClientMockRecorder) Info(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockKVClient)(nil).Info), varargs...)
}

// Put mocks base method.
func (m *MockKVClient) Put(ctx context.Context, in *proto.PutRequest, opts ...grpc.CallOption) (*proto.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*proto.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKVClientMockRecorder) Put(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVClient)(nil).Put), varargs...)
}

// PutIfAbsent mocks base method.
func (m *MockKVClient) PutIfAbsent(ctx context.Context, in *proto.PutRequest, opts ...grpc.CallOption) (*proto.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutIfAbsent", varargs...)
	ret0, _ := ret[0].(*proto.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIfAbsent indicates an expected call of PutIfAbsent.
func (mr *MockKVClientMockRecorder) PutIfAbsent(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIfAbsent", reflect.TypeOf((*MockKVClient)(nil).PutIfAbsent), varargs...)
}

// PutMany mocks base method.
func (m *MockKVClient) PutMany(ctx context.Context, in *proto.PutManyRequest, opts ...grpc.CallOption) (*proto.PutManyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMany", varargs...)
	ret0, _ := ret[0].(*proto.PutManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMany indicates an expected call of PutMany.
func (mr *MockKVClientMockRecorder) PutMany(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockKVClient)(nil).PutMany), varargs...)
}

// Update mocks base method.
func (m *MockKVClient) Update(ctx context.Context, in *proto.UpdateRequest, opts ...grpc.CallOption) (*proto.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*proto.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockKVClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKVClient)(nil).Update), varargs...)
}

// Watch mocks base method.
func (m *MockKVClient) Watch(ctx context.Context, in *proto.WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[proto.WatchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKVClientMockRecorder) Watch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKVClient)(nil).Watch), varargs...)
}

// MockGRPCClient is a mock of GRPCClient interface.
type MockGRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientMockRecorder
	isgomock struct{}
}

// MockGRPCClientMockRecorder is the mock recorder for MockGRPCClient.
type MockGRPCClientMockRecorder struct {
	mock *MockGRPCClient
}

// NewMockGRPCClient creates a new mock instance.
func NewMockGRPCClient(ctrl *gomock.Controller) *MockGRPCClient {
	mock := &MockGRPCClient{ctrl: ctrl}
	mock.recorder = &MockGRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClient) EXPECT() *MockGRPCClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGRPCClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGRPCClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGRPCClient)(nil).Close))
}

// GetConnection mocks base method.
func (m *MockGRPCClient) GetConnection() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockGRPCClientMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockGRPCClient)(nil).GetConnection))
}

// MockIntegration is a mock of Integration interface.
type MockIntegration struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationMockRecorder
	isgomock struct{}
}

// MockIntegrationMockRecorder is the mock recorder for MockIntegration.
type MockIntegrationMockRecorder struct {
	mock *MockIntegration
}

// NewMockIntegration creates a new mock instance.
func NewMockIntegration(ctrl *gomock.Controller) *MockIntegration {
	mock := &MockIntegration{ctrl: ctrl}
	mock.recorder = &MockIntegrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegration) EXPECT() *MockIntegrationMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockIntegration) Fetch(ctx context.Context) (map[string][]byte, []*models.DeviceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].([]*models.DeviceUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIntegrationMockRecorder) Fetch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIntegration)(nil).Fetch), ctx)
}

// Reconcile mocks base method.
func (m *MockIntegration) Reconcile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockIntegrationMockRecorder) Reconcile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockIntegration)(nil).Reconcile), ctx)
}

// MockSRQLQuerier is a mock of SRQLQuerier interface.
type MockSRQLQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockSRQLQuerierMockRecorder
	isgomock struct{}
}

// MockSRQLQuerierMockRecorder is the mock recorder for MockSRQLQuerier.
type MockSRQLQuerierMockRecorder struct {
	mock *MockSRQLQuerier
}

// NewMockSRQLQuerier creates a new mock instance.
func NewMockSRQLQuerier(ctrl *gomock.Controller) *MockSRQLQuerier {
	mock := &MockSRQLQuerier{ctrl: ctrl}
	mock.recorder = &MockSRQLQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSRQLQuerier) EXPECT() *MockSRQLQuerierMockRecorder {
	return m.recorder
}

// GetDeviceStatesBySource mocks base method.
func (m *MockSRQLQuerier) GetDeviceStatesBySource(ctx context.Context, source string) ([]DeviceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStatesBySource", ctx, source)
	ret0, _ := ret[0].([]DeviceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStatesBySource indicates an expected call of GetDeviceStatesBySource.
func (mr *MockSRQLQuerierMockRecorder) GetDeviceStatesBySource(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStatesBySource", reflect.TypeOf((*MockSRQLQuerier)(nil).GetDeviceStatesBySource), ctx, source)
}
