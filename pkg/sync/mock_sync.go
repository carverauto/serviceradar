// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/serviceradar/pkg/sync (interfaces: KVClient,GRPCClient,Integration,Clock,SyncerInterface,Ticker)
//
// Generated by this command:
//
//	mockgen -destination=mock_sync.go -package=sync github.com/carverauto/serviceradar/pkg/sync KVClient,GRPCClient,Integration,Clock,SyncerInterface,Ticker
//

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/carverauto/serviceradar/pkg/models"
	proto "github.com/carverauto/serviceradar/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKVClient is a mock of KVClient interface.
type MockKVClient struct {
	ctrl     *gomock.Controller
	recorder *MockKVClientMockRecorder
	isgomock struct{}
}

// MockKVClientMockRecorder is the mock recorder for MockKVClient.
type MockKVClientMockRecorder struct {
	mock *MockKVClient
}

// NewMockKVClient creates a new mock instance.
func NewMockKVClient(ctrl *gomock.Controller) *MockKVClient {
	mock := &MockKVClient{ctrl: ctrl}
	mock.recorder = &MockKVClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVClient) EXPECT() *MockKVClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKVClient) Delete(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*proto.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKVClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockKVClient) Get(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVClient)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockKVClient) Put(ctx context.Context, in *proto.PutRequest, opts ...grpc.CallOption) (*proto.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*proto.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKVClientMockRecorder) Put(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKVClient)(nil).Put), varargs...)
}

// PutMany mocks base method.
func (m *MockKVClient) PutMany(ctx context.Context, in *proto.PutManyRequest, opts ...grpc.CallOption) (*proto.PutManyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMany", varargs...)
	ret0, _ := ret[0].(*proto.PutManyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMany indicates an expected call of PutMany.
func (mr *MockKVClientMockRecorder) PutMany(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockKVClient)(nil).PutMany), varargs...)
}

// Watch mocks base method.
func (m *MockKVClient) Watch(ctx context.Context, in *proto.WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[proto.WatchResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKVClientMockRecorder) Watch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKVClient)(nil).Watch), varargs...)
}

// MockGRPCClient is a mock of GRPCClient interface.
type MockGRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientMockRecorder
	isgomock struct{}
}

// MockGRPCClientMockRecorder is the mock recorder for MockGRPCClient.
type MockGRPCClientMockRecorder struct {
	mock *MockGRPCClient
}

// NewMockGRPCClient creates a new mock instance.
func NewMockGRPCClient(ctrl *gomock.Controller) *MockGRPCClient {
	mock := &MockGRPCClient{ctrl: ctrl}
	mock.recorder = &MockGRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClient) EXPECT() *MockGRPCClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGRPCClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGRPCClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGRPCClient)(nil).Close))
}

// GetConnection mocks base method.
func (m *MockGRPCClient) GetConnection() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockGRPCClientMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockGRPCClient)(nil).GetConnection))
}

// MockIntegration is a mock of Integration interface.
type MockIntegration struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationMockRecorder
	isgomock struct{}
}

// MockIntegrationMockRecorder is the mock recorder for MockIntegration.
type MockIntegrationMockRecorder struct {
	mock *MockIntegration
}

// NewMockIntegration creates a new mock instance.
func NewMockIntegration(ctrl *gomock.Controller) *MockIntegration {
	mock := &MockIntegration{ctrl: ctrl}
	mock.recorder = &MockIntegrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegration) EXPECT() *MockIntegrationMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockIntegration) Fetch(ctx context.Context) (map[string][]byte, []*models.SweepResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].([]*models.SweepResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIntegrationMockRecorder) Fetch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIntegration)(nil).Fetch), ctx)
}

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
	isgomock struct{}
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// Ticker mocks base method.
func (m *MockClock) Ticker(d time.Duration) Ticker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticker", d)
	ret0, _ := ret[0].(Ticker)
	return ret0
}

// Ticker indicates an expected call of Ticker.
func (mr *MockClockMockRecorder) Ticker(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker", reflect.TypeOf((*MockClock)(nil).Ticker), d)
}

// MockSyncerInterface is a mock of SyncerInterface interface.
type MockSyncerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerInterfaceMockRecorder
	isgomock struct{}
}

// MockSyncerInterfaceMockRecorder is the mock recorder for MockSyncerInterface.
type MockSyncerInterfaceMockRecorder struct {
	mock *MockSyncerInterface
}

// NewMockSyncerInterface creates a new mock instance.
func NewMockSyncerInterface(ctrl *gomock.Controller) *MockSyncerInterface {
	mock := &MockSyncerInterface{ctrl: ctrl}
	mock.recorder = &MockSyncerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncerInterface) EXPECT() *MockSyncerInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockSyncerInterface) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSyncerInterfaceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSyncerInterface)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockSyncerInterface) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSyncerInterfaceMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSyncerInterface)(nil).Stop), ctx)
}

// Sync mocks base method.
func (m *MockSyncerInterface) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncerInterfaceMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncerInterface)(nil).Sync), ctx)
}

// MockTicker is a mock of Ticker interface.
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
	isgomock struct{}
}

// MockTickerMockRecorder is the mock recorder for MockTicker.
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance.
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// Chan mocks base method.
func (m *MockTicker) Chan() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockTickerMockRecorder) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockTicker)(nil).Chan))
}

// Stop mocks base method.
func (m *MockTicker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTickerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTicker)(nil).Stop))
}
