diff --git a/build/_rules/ocaml_binary.bzl b/build/_rules/ocaml_binary.bzl
index 92c7543..19ef573 100644
--- a/build/_rules/ocaml_binary.bzl
+++ b/build/_rules/ocaml_binary.bzl
@@ -82,6 +82,14 @@ the difference between '/' and ':' in such labels):
         _allowlist_function_transition = attr.label(
             default = "@bazel_tools//tools/allowlists/function_transition_allowlist"
         ),
+        _sdk_stdlib = attr.label(
+            default = "@@tools_opam++opam+opam.ocamlsdk//stdlib/lib:all_files",
+            allow_files = True,
+        ),
+        _sdk_stublibs = attr.label(
+            default = "@@tools_opam++opam+opam.stublibs//lib:stublibs",
+            allow_files = True,
+        ),
     ),
     provides = [OcamlExecutableMarker], # OCamlModuleProvider],
     ## this is not an ns archive, and it does not use ns ConfigState,
diff --git a/build/_rules/ocaml_binary/impl_binary.bzl b/build/_rules/ocaml_binary/impl_binary.bzl
index 189ad55..d7ceb26 100644
--- a/build/_rules/ocaml_binary/impl_binary.bzl
+++ b/build/_rules/ocaml_binary/impl_binary.bzl
@@ -761,6 +761,8 @@ def impl_binary(ctx): # , mode, tc, tool, tool_args):
     args.add("-o", out_bin)
     action_outputs.append(out_bin)
 
+    args.add(paths.normalize(paths.join(paths.dirname(tc.compiler.path), "..", "stdlib", "lib", "stdlib.cmxa")))
+
     # if tc.target == "vm":
     #     # FIXME: requires that runtime and stubs files be added to cmd line
     #     # e.g. -lbase_stubs
@@ -807,6 +809,8 @@ def impl_binary(ctx): # , mode, tc, tool, tool_args):
         + depsets.deps.afiles
         + depsets.deps.astructs
         + [cli_link_depset] # depsets.deps.cli_link_deps
+        + [depset(ctx.files._sdk_stdlib)]
+        + [depset(ctx.files._sdk_stublibs)]
 
         + depsets.codeps.sigs
         + depsets.codeps.structs
@@ -840,7 +844,14 @@ def impl_binary(ctx): # , mode, tc, tool, tool_args):
     if hasattr(ctx.attr, "diff_cmd"):
         if ctx.attr.diff_cmd:
             path = path + ":" + ctx.file.diff_cmd.dirname
-    env = {"PATH": path}
+    compiler_dir = paths.dirname(tc.compiler.path)
+    stdlib_dir = paths.normalize(paths.join(compiler_dir, "..", "stdlib", "lib"))
+    stublib_dir = paths.normalize(paths.join(compiler_dir, "..", "stublibs", "lib"))
+    env = {
+        "PATH": path,
+        "OCAMLLIB": stdlib_dir,
+        "CAML_LD_LIBRARY_PATH": stublib_dir,
+    }
     ## sweet jeebus. this is the only way I could find to merge tw
     ## dicts. sheesh.
 
diff --git a/build/_rules/ocaml_module.bzl b/build/_rules/ocaml_module.bzl
index e680acc..926e0fc 100644
--- a/build/_rules/ocaml_module.bzl
+++ b/build/_rules/ocaml_module.bzl
@@ -178,6 +178,14 @@ Label of an link:ocaml_ns[ocaml_ns] target, which must list this module in its `
         ),
 
         _cmd_line_option = attr.label(default = "@rules_ocaml//cfg/option"),
+        _sdk_stdlib = attr.label(
+            default = "@@tools_opam++opam+opam.ocamlsdk//stdlib/lib:all_files",
+            allow_files = True,
+        ),
+        _sdk_stublibs = attr.label(
+            default = "@@tools_opam++opam+opam.stublibs//lib:stublibs",
+            allow_files = True,
+        ),
     ),
 
     fragments      = ["platform", "cpp"],
diff --git a/build/_rules/ocaml_module/impl_module.bzl b/build/_rules/ocaml_module/impl_module.bzl
index ef5c921..8ab20ba 100644
--- a/build/_rules/ocaml_module/impl_module.bzl
+++ b/build/_rules/ocaml_module/impl_module.bzl
@@ -977,6 +977,8 @@ def impl_module(ctx): ## , mode, tool, tool_args):
         + depsets.deps.astructs
         + depsets.deps.archives ## FIXME: redundant (cli_link_deps)
         + depsets.deps.afiles
+        + [depset(ctx.files._sdk_stdlib)]
+        + [depset(ctx.files._sdk_stublibs)]
         ## module compilation never depends on cclibs
         # + bottomup_ns_inputs
         + depsets.codeps.sigs
@@ -995,6 +997,11 @@ def impl_module(ctx): ## , mode, tool, tool_args):
 
     args.add_all(includes, before_each="-I", uniquify = True)
 
+    compiler_dir = paths.dirname(tc.compiler.path)
+    stdlib_dir = paths.normalize(paths.join(compiler_dir, "..", "stdlib", "lib"))
+    stublib_dir = paths.normalize(paths.join(compiler_dir, "..", "stublibs", "lib"))
+    args.add("-I", stdlib_dir)
+
     if ctx.attr.open:
         for dep in ctx.attr.open:
             if OCamlModuleProvider in dep:
@@ -1050,6 +1057,14 @@ def impl_module(ctx): ## , mode, tool, tool_args):
 
     ################
     out_sig = ctx.actions.declare_file(ctx.label.name + ".mli")
+    action_env = {
+        "OCAMLLIB": stdlib_dir,
+        "CAML_LD_LIBRARY_PATH": stublib_dir,
+    }
+
+    if getattr(tc, "cc_link_env_vars", None):
+        action_env.update(tc.cc_link_env_vars)
+
     ctx.actions.run_shell(
         tools = [tc.compiler],
         arguments = ["-i", args],
@@ -1078,6 +1093,7 @@ def impl_module(ctx): ## , mode, tool, tool_args):
         inputs    = action_inputs_depset,
         outputs   = action_outputs,
         tools = [tc.compiler], # + tool_args,
+        env = action_env,
         mnemonic = mnemonic,
         progress_message = "{mode} compiling {rule}: {ws}//{pkg}:{tgt}".format(
             mode = tc.host + ">" + tc.target,
