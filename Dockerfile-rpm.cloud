# Stage 1: Build the web UI
FROM --platform=linux/amd64 node:18-bullseye AS web-builder

WORKDIR /web-build

COPY web/package*.json ./
RUN npm install
COPY web/ .
RUN npm run build

# Stage 2: Build the Go binary
FROM --platform=linux/amd64 golang:1.24-bullseye AS go-builder

WORKDIR /src

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libc6-dev \
    libsqlite3-dev

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the source
COPY . .

# Copy the built web UI from the previous stage
COPY --from=web-builder /web-build/dist ./pkg/cloud/api/web/dist

# Build the cloud service
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
    go build -o serviceradar-cloud ./cmd/cloud

# Stage 3: Create RPM
FROM --platform=linux/amd64 rockylinux:9 AS rpm-builder

# Install RPM build tools
RUN dnf install -y \
    rpm-build \
    rpmdevtools \
    systemd-devel

# Set up RPM build environment
RUN rpmdev-setuptree

# Copy built artifacts and spec files
COPY --from=go-builder /src/serviceradar-cloud /root/rpmbuild/BUILD/
COPY packaging/specs/serviceradar-cloud.spec /root/rpmbuild/SPECS/
COPY scripts/setup-rpm-*.sh /build/

# Set default version (can be overridden at build time)
ARG VERSION=1.0.16
ARG RELEASE=1

# Build the RPM
RUN rpmbuild -bb \
    --define "version ${VERSION}" \
    --define "release ${RELEASE}" \
    /root/rpmbuild/SPECS/serviceradar-cloud.spec

# Stage 4: Create a minimal image with just the RPM
FROM --platform=linux/amd64 rockylinux:9
WORKDIR /rpms
COPY --from=rpm-builder /root/rpmbuild/RPMS/*/*.rpm .
CMD ["/bin/bash"]