namespace: serviceradar-staging

image:
  registryPullSecret: ghcr-io-cred
  tags:
    core: latest
    web: latest
    proton: latest
    nats: latest
    datasvc: latest
    agent: latest
    poller: latest
    snmpChecker: latest
    dbEventWriter: latest
    otel: latest
    mapper: latest
    trapd: latest
    flowgger: latest
    zen: latest
    sync: latest
    rperfClient: latest
    faker: latest
    rperfChecker: latest

spire:
  enabled: true
  namespace: ""
  serverSelector: app=spire-server
  trustDomain: carverauto.dev
  clusterName: carverauto-cluster
  agentServiceAccount: spire-agent
  coreServiceAccount: serviceradar-core
  pollerServiceAccount: serviceradar-poller
  datasvcServiceAccount: serviceradar-datasvc
  serviceradarAgentServiceAccount: serviceradar-agent
  syncServiceAccount: serviceradar-sync
  zenServiceAccount: serviceradar-zen
  mapperServiceAccount: serviceradar-mapper
  dbEventWriterServiceAccount: serviceradar-db-event-writer
  snmpCheckerServiceAccount: serviceradar-snmp-checker
  rperfCheckerServiceAccount: serviceradar-rperf-checker
  flowggerServiceAccount: serviceradar-flowgger
  trapdServiceAccount: serviceradar-trapd
  bundleConfigMap: spire-bundle
  server:
    image: ghcr.io/spiffe/spire-server:1.11.2
    logLevel: DEBUG
    initConfigImage: busybox
    serviceName: spire-server
    serviceType: LoadBalancer
    dataPVC:
      size: 1Gi
      storageClass: ""
  agent:
    image: ghcr.io/spiffe/spire-agent:1.11.2
    logLevel: DEBUG
    waitForImage: cgr.dev/chainguard/wait-for-it
  postgres:
    enabled: true
    clusterName: spire-pg
    database: spire
    instances: 3
    storageClass: local-path
    storageSize: 5Gi
    secretName: spire-db-credentials
    username: spire
    password: changeme
  controllerManager:
    image: ghcr.io/spiffe/spire-controller-manager
    tag: 0.6.3
    configMapName: spire-controller-manager-config
    spireServerSocketPath: /spire-server/api.sock
    metricsBindAddress: 127.0.0.1:8082
    healthProbeBindAddress: 0.0.0.0:8083
    logLevel: info
    leaderElectionResourceName: spire-controller-manager
    ignoreNamespaces:
      - kube-system
      - kube-public
      - local-path-storage
      - kube-node-lease
    validatingWebhookConfigurationName: spire-controller-manager-webhook
    enableWebhooks: false
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi

ingress:
  enabled: true
  host: staging.serviceradar.cloud
  tls:
    enabled: true
    secretName: serviceradar-staging-tls

secrets:
  existingSecretName: serviceradar-secrets
  # Provide adminBcryptHash to avoid in-cluster generation.
  adminBcryptHash: ""

# Proton (TimeStream DB) configuration
proton:
  resources:
    requests:
      cpu: "1"
      memory: "8Gi"
    limits:
      cpu: "4"
      memory: "16Gi"
  storage:
    size: "150Gi"

# Network sweep defaults (can be tuned per-deploy)
sweep:
  # Target networks and ports to scan
  networks:
    - 192.168.2.0/24
    - 192.168.3.1/32
  ports:
    - 22
    - 80
    - 443
    - 3306
    - 5432
    - 6379
    - 8080
    - 8443
  # Sweep modes and pacing
  modes:
    - icmp
    - tcp
  interval: 5m
  concurrency: 100
  timeout: 10s
  tcp:
    # SYN packets per second; keep conservative by default
    rateLimit: 20000
    rateLimitBurst: 20000
    # Per-scanner tuning
    maxBatch: 32
    concurrency: 256
    timeout: 3s
    # Route discovery and ring buffer tuning
    routeDiscoveryHost: 8.8.8.8:80
    ringBlockSize: 0
    ringBlockCount: 0
    interface: ""
    suppressRSTReply: false
    globalRingMemoryMB: 0
    ringReaders: 0
    ringPollTimeoutMs: 0
  icmp:
    # Enable high performance ICMP (raw sockets) where permitted
    highPerf: true
    # Global ICMP rate limit (scanner-level)
    rateLimit: 5000
    settings:
      # Per-batch ICMP settings for fine tuning
      rateLimit: 1000
      timeout: 5s
      maxBatch: 64
