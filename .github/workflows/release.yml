  # Copyright 2025 Carver Automation Corporation.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

name: Release ServiceRadar Packages
on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-deb-packages:
      runs-on: ubuntu-latest
      env:
        VERSION: ${{ github.ref_name }}
      steps:
        - uses: actions/checkout@v4
        - name: Cache Node.js dependencies and Next.js build
          uses: actions/cache@v4
          with:
            path: |
              ~/.npm
              ${{ github.workspace }}/.next/cache
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
            restore-keys: |
              ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
        - name: Set up Go
          uses: actions/setup-go@v5
          with:
            go-version: '1.24'
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
        - name: Log in to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Set up Docker credentials for builds
          run: |
            mkdir -p ~/.docker
            echo '{"auths":{"ghcr.io":{"auth":"'$(echo -n "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" | base64)'"}}}'  > ~/.docker/config.json
            chmod 600 ~/.docker/config.json
            # Verify credentials file was created
            cat ~/.docker/config.json
        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential protobuf-compiler jq
            go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        - name: Pull required base images
          run: |
            # Pre-pull any required base images to ensure authentication works
            docker pull ghcr.io/carverauto/custom-rust-zfs:latest || echo "Failed to pull custom-rust-zfs, will try during build"
        - name: Build DEB packages
          env:
            DOCKER_BUILDKIT: 1
          run: |
            # Build all DEB packages using the unified script
            ./scripts/setup-package.sh --type=deb --all
        - name: List Artifacts (for debugging)
          run: ls -al ./release-artifacts
        - name: Upload DEB Release Assets
          uses: softprops/action-gh-release@v2
          with:
            files: ./release-artifacts/*.deb
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rpm-packages:
      runs-on: ubuntu-latest
      env:
        VERSION: ${{ github.ref_name }}
      steps:
        - uses: actions/checkout@v4
        - name: Cache Node.js dependencies and Next.js build
          uses: actions/cache@v4
          with:
            path: |
              ~/.npm
              ${{ github.workspace }}/.next/cache
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
            restore-keys: |
              ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
        - name: Log in to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Set up Docker credentials for builds
          run: |
            mkdir -p ~/.docker
            echo '{"auths":{"ghcr.io":{"auth":"'$(echo -n "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" | base64)'"}}}'  > ~/.docker/config.json
            chmod 600 ~/.docker/config.json
            # Verify credentials file was created
            cat ~/.docker/config.json
        - name: Install dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y jq protobuf-compiler
            go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        - name: Create output directory
          run: |
            mkdir -p ./release-artifacts/rpm
        - name: Pull required base images
          run: |
            # Pre-pull any required base images to ensure authentication works
            docker pull ghcr.io/carverauto/custom-rust-zfs:latest || echo "Failed to pull custom-rust-zfs, will try during build"
            docker pull ghcr.io/carverauto/rockylinux9-rust-rpm-base:latest || echo "Failed to pull rockylinux9-rust-rpm-base, will try during build"
        - name: Build all RPM packages
          env:
            DOCKER_BUILDKIT: 1
          run: |
            # Build all RPM packages using the unified script
            ./scripts/setup-package.sh --type=rpm --all
        - name: List RPM Artifacts (for debugging)
          run: |
            find ./release-artifacts/rpm -type f -name "*.rpm" | sort
        - name: Upload RPM Release Assets
          uses: softprops/action-gh-release@v2
          with:
            files: ./release-artifacts/rpm/*/*.rpm
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_PREFIX: ghcr.io/carverauto/serviceradar
      VERSION: ${{ github.ref_name }}
      GOPROXY: direct
      DOCKER_BUILDKIT_INLINE_CACHE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push all ServiceRadar Docker images
        env:
          DOCKER_BUILDKIT: 1
        run: |
          # Use our comprehensive build script for releases
          export VERSION="${{ env.VERSION }}"
          export BUILD_ID="${{ github.run_number }}"
          export TAG="${{ env.VERSION }}"
          
          # Verify login works before building
          docker buildx ls
          echo "Testing registry access..."
          docker pull ghcr.io/carverauto/serviceradar-cert-generator:latest 2>/dev/null || echo "No existing image found, will build fresh"
          
          ./scripts/build-all-images.sh --push --tag "$TAG"
          
          # Also tag as latest for releases
          ./scripts/build-all-images.sh --push --tag latest