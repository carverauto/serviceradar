# Copyright 2025 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# .github/workflows/release.yml

name: Release ServiceRadar Packages
on:
  release:
    types: [created]
permissions:
  contents: write
  packages: write
jobs:
  build-deb-packages:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - name: Build DEB packages
        run: |
          ./scripts/setup-deb-agent.sh
          ./scripts/setup-deb-poller.sh
          ./scripts/setup-deb-core.sh
          ./scripts/setup-deb-web.sh
          ./scripts/setup-deb-nats.sh
          ./scripts/setup-deb-kv.sh
          ./scripts/setup-deb-sync.sh
          ./scripts/setup-deb-cli.sh
          ./scripts/setup-deb-dusk-checker.sh
          ./scripts/setup-deb-snmp-checker.sh
          ./scripts/setup-deb-rperf-client.sh
          ./scripts/setup-deb-rperf-server.sh
          ./scripts/setup-installer.sh
      - name: List Artifacts (for debugging)
        run: ls -al ./release-artifacts
      - name: Upload DEB Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-artifacts/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-rpm-packages:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create output directory
        run: |
          mkdir -p ./release-artifacts/rpm
      - name: Build Core RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            -f Dockerfile.rpm.core \
            -t serviceradar-rpm-core \
            .
          docker create --name core-container serviceradar-rpm-core
          docker cp core-container:/rpms/. ./release-artifacts/rpm/
          docker rm core-container
      - name: Build Web RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="web" \
            --build-arg BINARY_PATH="./cmd/web" \
            -f Dockerfile.rpm.web \
            -t serviceradar-rpm-web \
            .
          docker create --name web-container serviceradar-rpm-web
          docker cp web-container:/rpms/. ./release-artifacts/rpm/
          docker rm web-container
      - name: Build Agent RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="agent" \
            --build-arg BINARY_PATH="./cmd/agent" \
            -f Dockerfile.rpm.simple \
            -t serviceradar-rpm-agent \
            .
          docker create --name agent-container serviceradar-rpm-agent
          docker cp agent-container:/rpms/. ./release-artifacts/rpm/
          docker rm agent-container
      - name: Build Poller RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="poller" \
            --build-arg BINARY_PATH="./cmd/poller" \
            -f Dockerfile.rpm.simple \
            -t serviceradar-rpm-poller \
            .
          docker create --name poller-container serviceradar-rpm-poller
          docker cp poller-container:/rpms/. ./release-artifacts/rpm/
          docker rm poller-container
      - name: Build NATS RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="nats" \
            --build-arg BINARY_PATH="" \
            -f Dockerfile.rpm.nats \
            -t serviceradar-rpm-nats \
            .
          docker create --name nats-container serviceradar-rpm-nats
          docker cp nats-container:/rpms/. ./release-artifacts/rpm/
          docker rm nats-container
      - name: Build KV RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="kv" \
            --build-arg BINARY_PATH="./cmd/kv" \
            -f Dockerfile.rpm.simple \
            -t serviceradar-rpm-kv \
            .
          docker create --name kv-container serviceradar-rpm-kv
          docker cp kv-container:/rpms/. ./release-artifacts/rpm/
          docker rm kv-container
      - name: Build Sync RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="sync" \
            --build-arg BINARY_PATH="./cmd/sync" \
            -f Dockerfile.rpm.simple \
            -t serviceradar-rpm-sync \
            .
          docker create --name sync-container serviceradar-rpm-sync
          docker cp sync-container:/rpms/. ./release-artifacts/rpm/
          docker rm sync-container
      - name: Build RPerf (client) Checker RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="rperf-checker" \
            --build-arg BINARY_PATH="./cmd/checkers/rperf-client" \
            -f Dockerfile.rpm.rust \
            -t serviceradar-rpm-rperf-checker \
            .
          docker create --name rperf-checker-container serviceradar-rpm-rperf-checker
          docker cp rperf-checker-container:/rpms/. ./release-artifacts/rpm/
          docker rm rperf-checker-container
      - name: Build RPerf (server) RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="rperf" \
            --build-arg BINARY_PATH="" \
            -f ./cmd/checkers/rperf-server/Dockerfile \
            -t serviceradar-rpm-rperf \
            .
          docker create --name rperf-container serviceradar-rpm-rperf
          docker cp rperf-container:/rpms/. ./release-artifacts/rpm/
          docker rm rperf-container
      - name: Build SNMP Checker RPM
        run: |
          docker build \
            --platform linux/amd64 \
            --build-arg VERSION="${VERSION}" \
            --build-arg RELEASE="1" \
            --build-arg COMPONENT="snmp-checker" \
            --build-arg BINARY_PATH="./cmd/checkers/snmp" \
            -f Dockerfile.rpm.simple \
            -t serviceradar-rpm-snmp-checker \
            .
          docker create --name snmp-checker-container serviceradar-rpm-snmp-checker
          docker cp snmp-checker-container:/rpms/. ./release-artifacts/rpm/
          docker rm snmp-checker-container
      - name: List RPM Artifacts (for debugging)
        run: ls -al ./release-artifacts/rpm
      - name: Upload RPM Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-artifacts/rpm/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}