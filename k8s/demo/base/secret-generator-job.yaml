# base/secret-generator-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: serviceradar-secret-generator
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-5"
spec:
  template:
    metadata:
      labels:
        app: serviceradar-secret-generator
        app.kubernetes.io/part-of: serviceradar
    spec:
      restartPolicy: OnFailure
      containers:
      - name: secret-generator
        image: ghcr.io/carverauto/serviceradar-tools:latest
        imagePullPolicy: Always
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e
          
          echo "üîê ServiceRadar Secret Generator"
          
          # Set up Kubernetes API access
          APISERVER=https://kubernetes.default.svc
          SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
          TOKEN=$(cat ${SERVICEACCOUNT}/token)
          NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
          CACERT=${SERVICEACCOUNT}/ca.crt
          
          # Check if secrets already exist (treat non-2xx as failure)
          if curl -fsS --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" \
             ${APISERVER}/api/v1/namespaces/${NAMESPACE}/secrets/serviceradar-secrets >/dev/null 2>&1; then
            echo "‚úÖ Secrets already exist, skipping generation"
            exit 0
          fi
          
          echo "üîë Generating new secrets..."
          
          # Generate random secrets  
          JWT_SECRET_RAW=$(openssl rand -hex 32)
          API_KEY_RAW=$(openssl rand -hex 32)
          PROTON_PASSWORD_RAW=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
          ADMIN_PASSWORD_RAW=$(openssl rand -base64 18 | tr -d "=+/" | cut -c1-12)
          
          echo "Generated admin password: $ADMIN_PASSWORD_RAW"
          echo "This password will be saved in the secret for retrieval"
          
          # Generate bcrypt hash using serviceradar-cli
          ADMIN_BCRYPT_HASH=$(serviceradar-cli auth bcrypt-gen --password "$ADMIN_PASSWORD_RAW")
          
          echo "üîê Generated bcrypt hash for admin password"
          
          # Base64 encode all values
          JWT_SECRET=$(echo -n "$JWT_SECRET_RAW" | base64 -w 0)
          API_KEY=$(echo -n "$API_KEY_RAW" | base64 -w 0)
          PROTON_PASSWORD=$(echo -n "$PROTON_PASSWORD_RAW" | base64 -w 0)
          ADMIN_PASSWORD=$(echo -n "$ADMIN_PASSWORD_RAW" | base64 -w 0)
          ADMIN_BCRYPT_HASH_B64=$(echo -n "$ADMIN_BCRYPT_HASH" | base64 -w 0)
          
          # Create the secret via Kubernetes API
          echo "üìù Creating serviceradar-secrets via Kubernetes API..."
          cat << EOF > /tmp/secret.json
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
              "name": "serviceradar-secrets",
              "labels": {
                "app.kubernetes.io/part-of": "serviceradar",
                "app.kubernetes.io/component": "secrets"
              }
            },
            "type": "Opaque",
            "data": {
              "jwt-secret": "$JWT_SECRET",
              "api-key": "$API_KEY", 
              "proton-password": "$PROTON_PASSWORD",
              "admin-password": "$ADMIN_PASSWORD",
              "admin-bcrypt-hash": "$ADMIN_BCRYPT_HASH_B64"
            }
          }
          EOF
          
          curl -fsS --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" \
               --header "Content-Type: application/json" \
               -X POST ${APISERVER}/api/v1/namespaces/${NAMESPACE}/secrets \
               -d @/tmp/secret.json
          
          echo "‚úÖ Secret generation complete!"
          echo ""
          echo "üìã To retrieve the admin password later:"
          echo "kubectl get secret serviceradar-secrets -o jsonpath='{.data.admin-password}' | base64 -d"
          echo ""
          echo "üîë Generated credentials:"
          echo "  Admin Password: $ADMIN_PASSWORD_RAW"
          echo "  JWT Secret: ${JWT_SECRET_RAW:0:16}..."
          echo "  API Key: ${API_KEY_RAW:0:16}..."
        env:
        - name: KUBERNETES_SERVICE_HOST
          value: "kubernetes.default.svc"
        - name: KUBERNETES_SERVICE_PORT
          value: "443"
      serviceAccountName: serviceradar-secret-generator
      
---
# ServiceAccount for the secret generator job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: serviceradar-secret-generator
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: secret-generator

---
# Role for secret management (namespace-scoped)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: serviceradar-secret-generator
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: secret-generator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: serviceradar-secret-generator
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: secret-generator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: serviceradar-secret-generator
subjects:
- kind: ServiceAccount
  name: serviceradar-secret-generator
