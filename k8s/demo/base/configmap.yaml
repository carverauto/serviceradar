# base/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: serviceradar-config
data:
  # Core service configuration (replaces cloud.json)
  core.json: |
    {
      "listen_addr": ":8090",
      "grpc_addr": ":50052",
      "alert_threshold": "5m",
      "known_pollers": ["k8s-poller"],
      "metrics": {
        "enabled": true,
        "retention": 100,
        "max_pollers": 10000
      },
      "database": {
        "addresses": ["serviceradar-proton:9440"],
        "name": "default",
        "username": "default",
        "password": "",
        "max_conns": 10,
        "idle_conns": 5,
        "tls": {
          "cert_file": "/etc/serviceradar/certs/core.pem",
          "key_file": "/etc/serviceradar/certs/core-key.pem",
          "ca_file": "/etc/serviceradar/certs/root.pem",
          "server_name": "proton.serviceradar"
        },
        "settings": {
          "max_execution_time": 60,
          "output_format_json_quote_64bit_int": 0,
          "allow_experimental_live_view": 1,
          "idle_connection_timeout": 600,
          "join_use_nulls": 1,
          "input_format_defaults_for_omitted_fields": 1
        }
      },
      "security": {
        "mode": "mtls",
        "cert_dir": "/etc/serviceradar/certs",
        "role": "core",
        "server_name": "core.serviceradar",
        "tls": {
          "cert_file": "/etc/serviceradar/certs/core.pem",
          "key_file": "/etc/serviceradar/certs/core-key.pem",
          "ca_file": "/etc/serviceradar/certs/root.pem",
          "client_ca_file": "/etc/serviceradar/certs/root.pem",
          "skip_verify": false
        }
      },
      "cors": {
        "allowed_origins": ["*"],
        "allow_credentials": true
      },
      "auth": {
        "jwt_secret": "PLACEHOLDER_WILL_BE_REPLACED",
        "jwt_expiration": "24h",
        "local_users": {
          "admin": "PLACEHOLDER_BCRYPT_HASH_WILL_BE_REPLACED"
        }
      },
      "nats": {
        "url": "nats://serviceradar-nats:4222",
        "max_reconnects": 10,
        "reconnect_wait": "2s",
        "drain_timeout": "30s"
      },
      "write_buffer": {
        "size": 10000,
        "flush_interval": "5s",
        "max_retries": 3,
        "retry_delay": "1s"
      },
      "logging": {
        "level": "info",
        "debug": false,
        "output": "stdout"
      }
    }

  poller.json: |
    {
      "agents": {
        "local-agent": {
          "address": "localhost:50051",
          "security": {
            "server_name": "demo.serviceradar.cloud",
            "mode": "none"
          },
          "checks": [
            {
              "service_type": "port",
              "service_name": "SSH",
              "details": "127.0.0.1:22"
            },
            {
              "service_type": "snmp",
              "service_name": "snmp",
              "details": "localhost:50054"
            },
            {
              "service_type": "icmp",
              "service_name": "ping",
              "details": "8.8.8.8"
            },
            {
              "service_type": "sweep",
              "service_name": "network_sweep",
              "details": ""
            }
          ]
        }
      },
      "cloud_address": "demo.serviceradar.cloud:50052",
      "listen_addr": "localhost:50053",
      "poll_interval": "30s",
      "poller_id": "demo-poller",
      "service_name": "PollerService",
      "service_type": "grpc",
          "security": {
            "mode": "none",
            "cert_dir": "/etc/serviceradar/certs",
            "server_name": "demo.serviceradar.cloud",
            "role": "poller"
          }
    }

  agent.json: |
    {
      "checkers_dir": "/etc/serviceradar/checkers",
      "listen_addr": ":50051",
      "service_type": "grpc",
      "service_name": "AgentService",
      "security": {
        "mode": "none",
        "cert_dir": "/etc/serviceradar/certs",
        "server_name": "demo.serviceradar.cloud",
        "role": "agent"
      }
    }

  sweep.json: |
    {
      "networks": [
          "192.168.2.0/24",
          "192.168.3.1/32"
      ],
      "ports": [
        22,
        80,
        443,
        3306,
        5432,
        6379,
        8080,
        8443
      ],
      "sweep_modes": [
        "icmp",
        "tcp"
      ],
      "interval": "5m",
      "concurrency": 100,
      "timeout": "10s"
    } 

  external.json: |
    {
      "enabled": true
    }

  snmp.json: |
    {
      "node_address": "localhost:50051",
      "listen_addr": ":50054",
      "security": {
        "server_name": "serviceradar-demo",
        "mode": "none",
        "role": "checker",
        "cert_dir": "/etc/serviceradar/certs"
      },
      "timeout": "30s",
      "targets": [
        {
          "name": "test-router",
          "host": "192.168.1.1",
          "port": 161,
          "community": "public",
          "version": "v2c",
          "interval": "30s",
          "retries": 2,
          "oids": [
            {
              "oid": ".1.3.6.1.2.1.2.2.1.10.4",
              "name": "ifInOctets_4",
              "type": "counter",
              "scale": 1.0
            }
          ]
        }
      ]
    }

  # NATS configuration
  nats.conf: |
    server_name: nats-serviceradar-k8s
    listen: 0.0.0.0:4222
    http: 0.0.0.0:8222
    
    jetstream {
      store_dir: /data/jetstream
      max_memory_store: 1G
      max_file_store: 10G
    }
    
    tls {
      cert_file: "/etc/serviceradar/certs/nats.pem"
      key_file: "/etc/serviceradar/certs/nats-key.pem"
      ca_file: "/etc/serviceradar/certs/root.pem"
      verify: true
      verify_and_map: true
    }
    
    authorization {
      users: [
        {
          user: "CN=core.serviceradar,OU=K8s,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
          permissions: {
            publish: { allow: [">"] }
            subscribe: { allow: [">"] }
          }
        }
      ]
    }
    
    debug: true
    trace: false

  # Nginx configuration for ingress
  nginx.conf: |
    resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;
    
    server {
        listen 80;
        server_name _;
        
        client_max_body_size 100M;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        
        location /_next/ {
            proxy_pass http://serviceradar-web:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/stream {
            proxy_pass http://serviceradar-core:8090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-API-Key $http_x_api_key;
            proxy_set_header Cookie $http_cookie;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 60;
            proxy_buffering off;
            proxy_cache off;
        }
        
        location ~ ^/api/(auth|nodes|status|pollers|devices|mcp) {
            proxy_pass http://serviceradar-web:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/ {
            proxy_pass http://serviceradar-core:8090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-API-Key $http_x_api_key;
            proxy_set_header Cookie $http_cookie;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
        
        location /auth/ {
            proxy_pass http://serviceradar-core:8090;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Cookie $http_cookie;
        }
        
        location / {
            proxy_pass http://serviceradar-web:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
