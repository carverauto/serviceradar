# base/serviceradar-tools.yaml - Debugging container with comprehensive tooling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: serviceradar-tools
  labels:
    app.kubernetes.io/part-of: serviceradar
spec:
  replicas: 1
  selector:
    matchLabels:
      app: serviceradar-tools
  template:
    metadata:
      labels:
        app: serviceradar-tools
        app.kubernetes.io/part-of: serviceradar
    spec:
      initContainers:
      - name: init-debug-tools
        image: ghcr.io/carverauto/serviceradar-tools:latest
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "ðŸ”§ Initializing ServiceRadar debugging tools..."
          
          # Create NATS context directory
          mkdir -p /root/.config/nats/context
          
          # Setup NATS context with proper TLS configuration
          if [ -f /etc/serviceradar/nats/serviceradar.json ]; then
            cp /etc/serviceradar/nats/serviceradar.json /root/.config/nats/context/
            echo "âœ“ NATS context configuration copied"
          else
            echo "âš  NATS context configuration not found"
          fi
          
          # Set up bash profile to show MOTD and setup PATH
          cat > /shared/.bashrc << 'EOF'
          # ServiceRadar Debug Tools - Auto-generated
          export PATH="/usr/local/go/bin:/go/bin:$PATH"
          
          # Show MOTD on login
          if [ -f /etc/motd ] && [ "$SHOW_MOTD" != "0" ]; then
            cat /etc/motd
            echo ""
          fi
          
          # Setup NATS context automatically
          if [ -f /root/.config/nats/context/serviceradar.json ] && command -v nats >/dev/null 2>&1; then
            export NATS_CONTEXT="serviceradar"
            nats context select serviceradar 2>/dev/null || true
          fi
          
          # ServiceRadar debugging aliases
          alias test-connectivity='echo "Testing ServiceRadar connectivity..."; nc -zv serviceradar-nats 4222 2>&1 || echo "NATS: Not available"; nc -zv serviceradar-core 8090 2>&1 || echo "Core: Not available"'
          alias nats-info='nats --context serviceradar server info'
          alias nats-streams='echo "=== NATS Streams ==="; nats --context serviceradar stream ls 2>/dev/null || echo "Streams not available - check NATS connection and JetStream"'
          alias nats-events='echo "=== Events Stream Info ==="; nats --context serviceradar stream info events 2>/dev/null || echo "Events stream not found"'
          alias nats-kv='echo "=== KV Stores ==="; nats --context serviceradar kv ls 2>/dev/null || echo "KV stores not available - check NATS connection and JetStream"'
          alias nats-datasvc='echo "=== Object Stores ==="; nats --context serviceradar obj ls 2>/dev/null || echo "object stores not available - check NATS connection and JetStream"'
          alias nats-js-status='echo "=== NATS JetStream Status ==="; nats --context serviceradar server info 2>/dev/null | grep -E "(Cluster|JetStream|Storage|Memory)" || echo "JetStream info not available - check connection"'
          alias grpc-core='echo "Usage: grpc-core [METHOD] - Examples:"; echo "  grpc-core grpc.health.v1.Health/Check"; echo "  grpc-core list"; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-core:50052'
          alias grpc-agent='echo "Usage: grpc-agent [METHOD] - Examples:"; echo "  grpc-agent grpc.health.v1.Health/Check"; echo "  grpc-agent list"; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-agent:50051'
          alias grpc-mapper='echo "Usage: grpc-mapper [METHOD] - Examples:"; echo "  grpc-mapper grpc.health.v1.Health/Check"; echo "  grpc-mapper list"; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-mapper:50056'
          alias grpc-trapd='echo "Usage: grpc-trapd [METHOD] - Examples:"; echo "  grpc-trapd grpc.health.v1.Health/Check"; echo "  grpc-trapd list"; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-trapd:50043'
          alias nc-nats='nc -zv serviceradar-nats 4222'
          alias ping-nats='ping serviceradar-nats'
          alias sr-devices='serviceradar-cli devices list'
          alias test-grpc='echo "=== gRPC Service Health Checks ==="; echo "Testing serviceradar-core:50052..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-core:50052 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"; echo "Testing serviceradar-agent:50051..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-agent:50051 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"; echo "Testing serviceradar-poller:50053..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-poller:50053 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"; echo "Testing serviceradar-datasvc:50057..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-datasvc:50057 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"; echo "Testing serviceradar-mapper:50056..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-mapper:50056 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"; echo "Testing serviceradar-trapd:50043..."; grpcurl -cacert /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem serviceradar-trapd:50043 grpc.health.v1.Health/Check 2>/dev/null && echo "  âœ“ Healthy" || echo "  âœ— Unhealthy"'
          alias nats-cert-check='echo "=== NATS Certificate Check ==="; echo "1. Client Certificate:"; openssl x509 -in /etc/serviceradar/certs/client.pem -subject -issuer -noout; echo ""; echo "2. Client CA:"; openssl x509 -in /etc/serviceradar/certs/root.pem -subject -issuer -noout; echo ""; echo "3. Testing NATS without client cert (server cert only):"; timeout 5 openssl s_client -connect serviceradar-nats:4222 -CAfile /etc/serviceradar/certs/root.pem -verify_return_error 2>/dev/null || echo "Server cert verification failed"; echo ""; echo "4. Testing NATS with client cert (mTLS):"; timeout 5 openssl s_client -connect serviceradar-nats:4222 -CAfile /etc/serviceradar/certs/root.pem -cert /etc/serviceradar/certs/client.pem -key /etc/serviceradar/certs/client-key.pem -verify_return_error 2>/dev/null || echo "mTLS verification failed"'
          alias nats-skip-verify='echo "=== NOTE: This NATS CLI version does not support --tls-skip-verify ==="; echo "To debug TLS issues, check the NATS server certificate SAN entries"; echo "The server cert must include: serviceradar-nats"'
          
          echo "âœ“ ServiceRadar debugging environment configured"
          EOF
          
          # Copy the bashrc to persistent volume
          cp /root/.config /shared/ -r
          
          echo "ðŸŽ‰ ServiceRadar debugging tools initialization complete!"
        volumeMounts:
        - name: cert-data
          mountPath: /etc/serviceradar/certs
          readOnly: true
        - name: credentials
          mountPath: /etc/serviceradar/credentials
          readOnly: true
        - name: nats-context-config
          mountPath: /etc/serviceradar/nats/serviceradar.json
          subPath: serviceradar.json
          readOnly: true
        - name: shared-config
          mountPath: /shared
      containers:
      - name: tools
        image: ghcr.io/carverauto/serviceradar-tools:latest
        imagePullPolicy: Always
        command: ["/bin/bash", "-c"]
        args:
        - |
          # Copy initialized config from init container
          if [ -d /shared/.config ]; then
            cp -r /shared/.config /root/
          fi
          
          if [ -f /shared/.bashrc ]; then
            cp /shared/.bashrc /root/.bashrc
          fi
          
          # Start the container with bash as the default shell
          exec /bin/bash -l -c "tail -f /dev/null"
        env:
        - name: NATS_CA
          value: "/etc/serviceradar/certs/root.pem"
        - name: NATS_CERT
          value: "/etc/serviceradar/certs/client.pem"
        - name: NATS_KEY
          value: "/etc/serviceradar/certs/client-key.pem"
        - name: NATS_CONTEXT
          value: "serviceradar"
        - name: NATS_CREDS_FILE
          value: "/etc/serviceradar/nats/client.creds"
        - name: API_URL
          value: "https://serviceradar-core:8090"
        - name: SHOW_MOTD
          value: "1"
        - name: PROTON_HOST
          value: "serviceradar-proton"
        - name: PROTON_PORT
          value: "9440"
        - name: PROTON_DATABASE
          value: "default"
        - name: PROTON_SECURE
          value: "1"
        - name: PROTON_PASSWORD_FILE
          value: "/etc/serviceradar/credentials/proton-password"
        volumeMounts:
        - name: cert-data
          mountPath: /etc/serviceradar/certs
          readOnly: true
        - name: nats-context-config
          mountPath: /etc/serviceradar/nats/serviceradar.json
          subPath: serviceradar.json
          readOnly: true
        - name: credentials
          mountPath: /etc/serviceradar/credentials
          readOnly: true
        - name: tools-config
          mountPath: /etc/serviceradar/nats/setup-nats-context.sh
          subPath: setup-nats-context.sh
          readOnly: true
        - name: tools-config
          mountPath: /etc/motd
          subPath: motd
          readOnly: true
        - name: shared-config
          mountPath: /shared
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
      volumes:
      - name: cert-data
        persistentVolumeClaim:
          claimName: serviceradar-cert-data
      - name: nats-context-config
        configMap:
          name: serviceradar-nats-context
      - name: tools-config
        configMap:
          name: serviceradar-tools-config
          defaultMode: 0755
      - name: credentials
        secret:
          secretName: serviceradar-secrets
          items:
          - key: proton-password
            path: proton-password
      - name: shared-config
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: serviceradar-tools
  labels:
    app.kubernetes.io/part-of: serviceradar
spec:
  selector:
    app: serviceradar-tools
  ports:
  - name: debug-port
    port: 22
    targetPort: 22
  type: ClusterIP
---
# ConfigMap for NATS context configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: serviceradar-nats-context
data:
  # NATS context configuration for debugging
  serviceradar.json: |
    {
      "description": "ServiceRadar NATS Context for Debugging",
      "url": "tls://serviceradar-nats:4222",
      "user": "",
      "password": "",
      "token": "",
      "nsc": "",
      "creds": "",
      "nkey": "",
      "cert": "/etc/serviceradar/certs/client.pem",
      "key": "/etc/serviceradar/certs/client-key.pem",
      "ca": "/etc/serviceradar/certs/root.pem",
      "nats_ca": "",
      "inbox_prefix": "_INBOX",
      "user_jwt": "",
      "color_scheme": "",
      "tls_first": false
    }
---
# Additional configuration for serviceradar-tools
apiVersion: v1
kind: ConfigMap
metadata:
  name: serviceradar-tools-config
data:
  motd: |

    ===============================================================================
    =                          ServiceRadar Debug Tools                          =
    ===============================================================================
    
    [*] DEBUGGING COMMANDS:
        test-connectivity    - Test all service connectivity
        nats-js-status       - Show NATS JetStream status
        test-grpc            - Health check all gRPC services
        nats-cert-check      - Diagnose NATS certificate issues
    
    [*] PROTON HELPERS:
        proton-cli           - Proton CLI wrapper (mTLS defaults)
        proton-sql <SQL>     - Run SQL (ex: proton-sql "SELECT 1")
        proton_sql <SQL>     - Bash helper (login shells only)
        proton-version       - Print Proton server version via SQL
        proton-info          - Show Proton host/port/password source
    
    [*] PASSWORD SOURCE:
        /etc/serviceradar/credentials/proton-password (secret mount)
        Override with PROTON_PASSWORD or PROTON_PASSWORD_FILE if required.
    
    [*] NATS ALIASES:
        nats-info            - Show NATS server information
        nats-streams         - List all JetStream streams
        nats-events          - Show events stream details
        nats-kv                   - Show KV store stream details
        nats-datasvc              - Show object store details
        nats --context serviceradar <cmd>  - Use preloaded TLS context
    
    [*] gRPC ALIASES:
        grpc-core            - Connect to core gRPC (add method after)
        grpc-agent           - Connect to agent gRPC
        grpc-mapper          - Connect to mapper gRPC
        grpc-trapd           - Connect to trapd gRPC
    
    [*] QUICK TESTS:
        nc-nats              - Test NATS TCP connectivity
        ping-nats            - Ping NATS server
        sr-devices           - List devices via ServiceRadar CLI
    
    [*] CERT LOCATIONS:
        /etc/serviceradar/certs/root.pem       - Root CA
        /etc/serviceradar/certs/client.pem     - Client certificate
        /etc/serviceradar/certs/client-key.pem - Client private key
    
    [*] NATS CONTEXT: Auto-configured with proper FQDN and mTLS
    
    [+] STATUS: TLS certs, Proton helpers, and JetStream aliases ready to use
    
    [!] READY TO USE: MOTD appears on login; environment auto-loads helpers
    
    ===============================================================================

  # Initialization script to setup NATS context automatically
  setup-nats-context.sh: |
    #!/bin/bash
    set -e
    
    echo "Setting up NATS context for debugging..."
    
    # Create context directory if it doesn't exist
    mkdir -p /root/.config/nats/context
    
    # Copy context configuration
    if [ -f /etc/serviceradar/nats/serviceradar.json ]; then
        cp /etc/serviceradar/nats/serviceradar.json /root/.config/nats/context/
        echo "NATS context configuration copied."
        
        # Set as default context
        if command -v nats >/dev/null 2>&1; then
            nats context select serviceradar 2>/dev/null || echo "Context selection failed, but config is available"
            echo "NATS context ready for debugging!"
        else
            echo "NATS CLI not found, but context config is available."
        fi
    else
        echo "Warning: NATS context configuration not found at /etc/serviceradar/nats/serviceradar.json"
    fi
    
    # Test basic connectivity
    echo ""
    echo "Testing basic connectivity..."
    if nc -zv serviceradar-nats 4222 2>/dev/null; then
        echo "âœ“ NATS connection successful"
    else
        echo "âœ— NATS connection failed"
    fi
    
    echo ""
    echo "ðŸ”§ ServiceRadar debugging tools are ready!"
    echo "   Run 'test-connectivity' to test all services"
    echo "   Run 'nats-js-status' to check JetStream"
    echo "   Run 'test-grpc' to test all gRPC services"
    echo ""
