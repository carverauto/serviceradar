apiVersion: batch/v1
kind: Job
metadata:
  name: spire-postgres-secret-sync
  namespace: spire
  labels:
    app: spire-postgres-secret-sync
    app.kubernetes.io/part-of: serviceradar
spec:
  template:
    metadata:
      labels:
        app: spire-postgres-secret-sync
        app.kubernetes.io/part-of: serviceradar
    spec:
      serviceAccountName: spire-postgres-secret-sync
      restartPolicy: OnFailure
      containers:
        - name: sync
          image: ghcr.io/carverauto/serviceradar-tools:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -euo pipefail

              echo "üîÑ Synchronizing SPIRE Postgres credentials from CNPG"

              APISERVER="https://kubernetes.default.svc"
              SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
              TOKEN="$(cat ${SERVICEACCOUNT}/token)"
              CACERT="${SERVICEACCOUNT}/ca.crt"

              SRC_NAMESPACE="cnpg-system"
              SRC_SECRET="spire-db-credentials"
              DEST_NAMESPACE="spire"
              DEST_SECRET="spire-postgres"

              echo "‚û°Ô∏è  Fetching source secret ${SRC_NAMESPACE}/${SRC_SECRET}"
              SRC_PAYLOAD=$(curl -fsS \
                --cacert "${CACERT}" \
                --header "Authorization: Bearer ${TOKEN}" \
                "${APISERVER}/api/v1/namespaces/${SRC_NAMESPACE}/secrets/${SRC_SECRET}")

              USERNAME_B64=$(echo "${SRC_PAYLOAD}" | jq -r '.data.username // empty')
              PASSWORD_B64=$(echo "${SRC_PAYLOAD}" | jq -r '.data.password // empty')

              if [ -z "${PASSWORD_B64}" ] || [ "${PASSWORD_B64}" = "null" ]; then
                echo "‚ùå Source secret missing password field"
                exit 1
              fi

              if [ -z "${USERNAME_B64}" ] || [ "${USERNAME_B64}" = "null" ]; then
                echo "‚ö†Ô∏è  Source secret missing username, defaulting to c3BpcmU=" # "spire" base64
                USERNAME_B64="c3BpcmU="
              fi

              echo "üîç Checking existing destination secret ${DEST_NAMESPACE}/${DEST_SECRET}"
              DEST_STATUS=$(curl -sS -o /tmp/dest-secret.json -w "%{http_code}" \
                --cacert "${CACERT}" \
                --header "Authorization: Bearer ${TOKEN}" \
                "${APISERVER}/api/v1/namespaces/${DEST_NAMESPACE}/secrets/${DEST_SECRET}" || true)

              if [ "${DEST_STATUS}" = "200" ]; then
                EXISTING_PASSWORD_B64=$(jq -r '.data.DB_PASSWORD // empty' /tmp/dest-secret.json)
                EXISTING_USERNAME_B64=$(jq -r '.data.DB_USERNAME // empty' /tmp/dest-secret.json)

                if [ "${EXISTING_PASSWORD_B64}" = "${PASSWORD_B64}" ] && \
                   [ -n "${EXISTING_PASSWORD_B64}" ] && \
                   [ "${EXISTING_USERNAME_B64}" = "${USERNAME_B64}" ]; then
                  echo "‚úÖ Destination secret already in sync"
                  exit 0
                fi

                echo "‚ôªÔ∏è  Updating existing destination secret"
                cat <<EOF >/tmp/patch.json
{
  "data": {
    "DB_USERNAME": "${USERNAME_B64}",
    "DB_PASSWORD": "${PASSWORD_B64}"
  }
}
EOF
                curl -fsS \
                  --cacert "${CACERT}" \
                  --header "Authorization: Bearer ${TOKEN}" \
                  --header "Content-Type: application/merge-patch+json" \
                  -X PATCH \
                  "${APISERVER}/api/v1/namespaces/${DEST_NAMESPACE}/secrets/${DEST_SECRET}" \
                  -d @/tmp/patch.json
                echo "‚úÖ Secret updated"
                exit 0
              fi

              if [ "${DEST_STATUS}" != "404" ]; then
                echo "‚ùå Unexpected status ${DEST_STATUS} while checking destination secret"
                cat /tmp/dest-secret.json || true
                exit 1
              fi

              echo "üÜï Creating destination secret"
              cat <<EOF >/tmp/secret.json
{
  "apiVersion": "v1",
  "kind": "Secret",
  "metadata": {
    "name": "${DEST_SECRET}",
    "namespace": "${DEST_NAMESPACE}",
    "labels": {
      "app.kubernetes.io/part-of": "serviceradar",
      "app.kubernetes.io/component": "spire"
    }
  },
  "type": "Opaque",
  "data": {
    "DB_USERNAME": "${USERNAME_B64}",
    "DB_PASSWORD": "${PASSWORD_B64}"
  }
}
EOF
              curl -fsS \
                --cacert "${CACERT}" \
                --header "Authorization: Bearer ${TOKEN}" \
                --header "Content-Type: application/json" \
                -X POST \
                "${APISERVER}/api/v1/namespaces/${DEST_NAMESPACE}/secrets" \
                -d @/tmp/secret.json
              echo "‚úÖ Secret created"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-postgres-secret-sync
  namespace: spire
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: spire

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spire-postgres-secret-sync
  namespace: spire
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: spire
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["spire-postgres"]
    verbs: ["get", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spire-postgres-secret-sync
  namespace: spire
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spire-postgres-secret-sync
subjects:
  - kind: ServiceAccount
    name: spire-postgres-secret-sync
    namespace: spire

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spire-postgres-secret-sync-reader
  namespace: cnpg-system
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: spire
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["spire-db-credentials"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spire-postgres-secret-sync-reader
  namespace: cnpg-system
  labels:
    app.kubernetes.io/part-of: serviceradar
    app.kubernetes.io/component: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spire-postgres-secret-sync-reader
subjects:
  - kind: ServiceAccount
    name: spire-postgres-secret-sync
    namespace: spire
