apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: spire
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      initContainers:
        - name: init-config
          image: busybox
          command: ["sh", "-c"]
          args:
            - |
              cp /config-template/server.conf /config/server.conf
              sed -i "s|__DB_PASSWORD__|$DB_PASSWORD|g" /config/server.conf
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spire-postgres
                  key: DB_PASSWORD
          volumeMounts:
            - name: spire-config-template
              mountPath: /config-template
            - name: generated-config
              mountPath: /config
      containers:
        - name: spire-server
          image: ghcr.io/spiffe/spire-server:1.11.2
          args:
            - -config
            - /run/spire/config/server.conf
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    set -eu
                    SOCKET_PATH="/tmp/spire-server/private/api.sock"

                    echo "Waiting for SPIRE server socket at ${SOCKET_PATH}"
                    for i in $(seq 1 30); do
                      if /opt/spire/bin/spire-server healthcheck -socketPath "${SOCKET_PATH}" >/dev/null 2>&1; then
                        break
                      fi
                      sleep 2
                    done

                    register_node() {
                      /opt/spire/bin/spire-server entry create \
                        -socketPath "${SOCKET_PATH}" \
                        -node \
                        -spiffeID spiffe://carverauto.dev/ns/spire/sa/spire-agent \
                        -selector k8s_sat:cluster:carverauto-cluster \
                        -selector k8s_sat:agent_ns:spire \
                        -selector k8s_sat:agent_sa:spire-agent >/dev/null 2>&1 || true
                    }

                    register_workload() {
                      SPIFFE_ID="$1"; shift
                      /opt/spire/bin/spire-server entry create \
                        -socketPath "${SOCKET_PATH}" \
                        -parentID spiffe://carverauto.dev/ns/spire/sa/spire-agent \
                        -spiffeID "${SPIFFE_ID}" \
                        "$@" >/dev/null 2>&1 || true
                    }

                    register_node
                    register_workload "spiffe://carverauto.dev/ns/demo/sa/serviceradar-core" \
                      -selector k8s:ns:demo \
                      -selector k8s:sa:serviceradar-core
                    register_workload "spiffe://carverauto.dev/ns/demo/sa/serviceradar-poller" \
                      -selector k8s:ns:demo \
                      -selector k8s:sa:serviceradar-poller
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: generated-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: spire-config-template
          configMap:
            name: spire-server
        - name: generated-config
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
