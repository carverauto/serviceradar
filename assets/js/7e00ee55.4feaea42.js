"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2887],{28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var s=n(96540);const t={},c=s.createContext(t);function i(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(c.Provider,{value:r},e.children)}},74583:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tls-security","title":"TLS Security","description":"ServiceRadar supports mutual TLS (mTLS) authentication to secure communications between its components, including the Timeplus Proton server used by ServiceRadar-core for data storage. This guide provides instructions for generating and configuring mTLS certificates for all ServiceRadar components using OpenSSL, tailored for environments without DNS resolution. Certificates use IP-based Subject Alternative Names (SANs) to ensure compatibility with Proton, ServiceRadar-core, Poller, Agent, NATS JetStream, and serviceradar-kv.","source":"@site/docs/tls-security.md","sourceDirName":".","slug":"/tls-security","permalink":"/docs/tls-security","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"TLS Security"},"sidebar":"tutorialSidebar","previous":{"title":"Proton Configuration","permalink":"/docs/proton"},"next":{"title":"Web UI Configuration","permalink":"/docs/web-ui"}}');var t=n(74848),c=n(28453);const i={sidebar_position:4,title:"TLS Security"},a="TLS Security",o={},l=[{value:"Security Architecture",id:"security-architecture",level:2},{value:"Certificate Overview",id:"certificate-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Certificate Generation with OpenSSL",id:"certificate-generation-with-openssl",level:2},{value:"1. Set Up Working Directory",id:"1-set-up-working-directory",level:3},{value:"2. Generate Root CA Certificate",id:"2-generate-root-ca-certificate",level:3},{value:"3. Generate Component Certificates",id:"3-generate-component-certificates",level:3},{value:"Proton and ServiceRadar-core Certificate (core.pem)",id:"proton-and-serviceradar-core-certificate-corepem",level:4},{value:"Poller Certificate (poller.pem)",id:"poller-certificate-pollerpem",level:4},{value:"Agent Certificate (agent.pem)",id:"agent-certificate-agentpem",level:4},{value:"NATS JetStream Certificate (nats-server.pem)",id:"nats-jetstream-certificate-nats-serverpem",level:4},{value:"serviceradar-kv Certificate (kv.pem)",id:"serviceradar-kv-certificate-kvpem",level:4},{value:"4. Secure the CA Private Key",id:"4-secure-the-ca-private-key",level:3},{value:"Certificate Deployment",id:"certificate-deployment",level:2},{value:"Role-Based Requirements",id:"role-based-requirements",level:3},{value:"Installation Steps",id:"installation-steps",level:3},{value:"Create Directories:",id:"create-directories",level:4},{value:"Deploy Certificates:",id:"deploy-certificates",level:4},{value:"Proton (on serviceradar-cloud):",id:"proton-on-serviceradar-cloud",level:5},{value:"ServiceRadar-core (on serviceradar-cloud):",id:"serviceradar-core-on-serviceradar-cloud",level:5},{value:"Poller (on dusk01):",id:"poller-on-dusk01",level:5},{value:"Agent (on Agent host):",id:"agent-on-agent-host",level:5},{value:"Component Configuration",id:"component-configuration",level:2},{value:"Proton Configuration (on serviceradar-cloud)",id:"proton-configuration-on-serviceradar-cloud",level:3},{value:"ServiceRadar-core Configuration (on serviceradar-cloud)",id:"serviceradar-core-configuration-on-serviceradar-cloud",level:3},{value:"Poller Configuration (on dusk01)",id:"poller-configuration-on-dusk01",level:3},{value:"Agent Configuration (on Agent host)",id:"agent-configuration-on-agent-host",level:3},{value:"NATS JetStream Configuration (on serviceradar-cloud)",id:"nats-jetstream-configuration-on-serviceradar-cloud",level:3},{value:"serviceradar-kv Configuration (on serviceradar-cloud)",id:"serviceradar-kv-configuration-on-serviceradar-cloud",level:3},{value:"Verification",id:"verification",level:2},{value:"Verify Certificates:",id:"verify-certificates",level:3},{value:"Restart Services:",id:"restart-services",level:3},{value:"Test mTLS Connections:",id:"test-mtls-connections",level:3},{value:"Poller to Core (from dusk01):",id:"poller-to-core-from-dusk01",level:4},{value:"Core to Proton (on serviceradar-cloud):",id:"core-to-proton-on-serviceradar-cloud",level:4},{value:"Agent to KV (on Agent host):",id:"agent-to-kv-on-agent-host",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Certificate Verification Failure:",id:"certificate-verification-failure",level:3},{value:"Unknown Authority Error:",id:"unknown-authority-error",level:3},{value:"Missing SANs:",id:"missing-sans",level:3},{value:"Connection Errors:",id:"connection-errors",level:3},{value:"Proton Configuration:",id:"proton-configuration",level:3},{value:"Poller IP Mismatch:",id:"poller-ip-mismatch",level:3},{value:"Checker Certificate Configuration",id:"checker-certificate-configuration",level:2},{value:"Generate Checker Certificates",id:"generate-checker-certificates",level:3},{value:"Deploy Checker Certificates",id:"deploy-checker-certificates",level:3},{value:"Configure Checkers to Use TLS",id:"configure-checkers-to-use-tls",level:3},{value:"Generic Checker Configuration",id:"generic-checker-configuration",level:4},{value:"Dusk Checker Configuration",id:"dusk-checker-configuration",level:4},{value:"SysMon Checker Configuration",id:"sysmon-checker-configuration",level:4},{value:"Using Shared Certificates for Multiple Checkers",id:"using-shared-certificates-for-multiple-checkers",level:3},{value:"Troubleshooting Checker Certificate Issues",id:"troubleshooting-checker-certificate-issues",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"tls-security",children:"TLS Security"})}),"\n",(0,t.jsx)(r.p,{children:"ServiceRadar supports mutual TLS (mTLS) authentication to secure communications between its components, including the Timeplus Proton server used by ServiceRadar-core for data storage. This guide provides instructions for generating and configuring mTLS certificates for all ServiceRadar components using OpenSSL, tailored for environments without DNS resolution. Certificates use IP-based Subject Alternative Names (SANs) to ensure compatibility with Proton, ServiceRadar-core, Poller, Agent, NATS JetStream, and serviceradar-kv."}),"\n",(0,t.jsx)(r.h2,{id:"security-architecture",children:"Security Architecture"}),"\n",(0,t.jsx)(r.p,{children:"ServiceRadar components communicate securely using mTLS with the following roles:"}),"\n",(0,t.jsx)(r.mermaid,{value:'graph TB\nsubgraph "Agent Node"\n    AG[Agent<br/>Role: Client+Server<br/>:50051]\n    SNMPCheck[SNMP Checker<br/>:50054]\n    DuskCheck[Dusk Checker<br/>:50052]\n    SweepCheck[Network Sweep]\n    AG --\x3e SNMPCheck\n    AG --\x3e DuskCheck\n    AG --\x3e SweepCheck\nend\n    \nsubgraph "Poller Service"\n    PL[Poller<br/>Role: Client+Server<br/>:50053]\nend\n    \nsubgraph "Core Service"\n    CL[Core Service<br/>Role: Client+Server<br/>:50052]\n    DB[Proton DB<br/>:9440]\n    API[HTTP API<br/>:8090]\n    CL --\x3e DB\n    CL --\x3e API\nend\n\nsubgraph "KV Store"\n    KV[serviceradar-kv<br/>Role: Client+Server<br/>:50057]\n    NATS[NATS JetStream<br/>Role: Server<br/>:4222]\n    KV --\x3e|mTLS Client| NATS\n    AG --\x3e|mTLS Client| KV\nend\n    \n%% Client connections from Poller\nPL --\x3e|mTLS Client| AG\nPL --\x3e|mTLS Client| CL\n    \n%% Server connections to Poller\nHC1[Health Checks] --\x3e|mTLS Client| PL\n    \nclassDef server fill:#e1f5fe,stroke:#01579b\nclassDef client fill:#f3e5f5,stroke:#4a148c\nclassDef dual fill:#fff3e0,stroke:#e65100\n    \nclass NATS,DB server\nclass AG,PL,CL,KV dual\nclass SNMPCheck,DuskCheck,SweepCheck client'}),"\n",(0,t.jsx)(r.h2,{id:"certificate-overview",children:"Certificate Overview"}),"\n",(0,t.jsx)(r.p,{children:"ServiceRadar and Proton use the following certificate files:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"root.pem"}),": Root CA certificate, shared across all components."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"<component>.pem"}),": Component-specific certificate (e.g., core.pem, poller.pem)."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"<component>-key.pem"}),": Component-specific private key."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Certificates are stored in:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"/etc/proton-server/"})," for Proton (ca-cert.pem, root.pem, core-key.pem)."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"/etc/serviceradar/certs/"})," for ServiceRadar components (root.pem, <component>.pem, <component>-key.pem)."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"OpenSSL"}),": Installed on the system where certificates are generated."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo apt-get install -y openssl  # Debian/Ubuntu\nsudo dnf install -y openssl     # RHEL/Oracle Linux\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Root or sudo access"}),": Required for creating directories and deploying certificates."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Network information"}),": IP addresses for each component:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"ServiceRadar-core and Proton: 172.233.208.210 (plus internal IPs like 192.168.2.x)."}),"\n",(0,t.jsx)(r.li,{children:"Poller: <poller-ip> (e.g., 192.168.2.100 for dusk01, replace with actual IP)."}),"\n",(0,t.jsx)(r.li,{children:"Agent, NATS, KV: Respective IPs."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Directory"}),": A working directory (e.g., ",(0,t.jsx)(r.code,{children:"/path/to/tls/"}),") for generating certificates."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"No DNS"}),": This guide assumes no DNS resolution, so all configurations and certificates use IP addresses."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsxs)(r.p,{children:["To find the Poller's IP address, run ",(0,t.jsx)(r.code,{children:"ip addr show"})," on the Poller host (e.g., dusk01) and note the inet address on the primary interface (e.g., 192.168.2.100). If the IP is unknown, use 192.168.2.100 as a placeholder and regenerate the Poller certificate later with the correct IP."]})}),"\n",(0,t.jsx)(r.h2,{id:"certificate-generation-with-openssl",children:"Certificate Generation with OpenSSL"}),"\n",(0,t.jsx)(r.p,{children:"All certificates are generated using OpenSSL with IP-based SANs to avoid DNS dependencies. We'll generate a CA certificate and individual certificates for each component."}),"\n",(0,t.jsx)(r.h3,{id:"1-set-up-working-directory",children:"1. Set Up Working Directory"}),"\n",(0,t.jsx)(r.p,{children:"Create a directory for certificate generation:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"mkdir -p /path/to/tls\ncd /path/to/tls\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2-generate-root-ca-certificate",children:"2. Generate Root CA Certificate"}),"\n",(0,t.jsx)(r.p,{children:"Create the CA certificate and private key:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl ecparam -name prime256v1 -genkey -out root-key.pem\nopenssl req -x509 -new -nodes -key root-key.pem -sha256 -days 3650 -out root.pem -subj "/C=US/ST=Your State/L=Your Location/O=ServiceRadar/OU=Operations/CN=ServiceRadar CA"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in root.pem -text -noout | grep -E "Subject:|Issuer:"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Expected:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Subject: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=ServiceRadar CA\nIssuer: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=ServiceRadar CA\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-generate-component-certificates",children:"3. Generate Component Certificates"}),"\n",(0,t.jsx)(r.p,{children:"Generate certificates for each component with IP-based SANs."}),"\n",(0,t.jsx)(r.h4,{id:"proton-and-serviceradar-core-certificate-corepem",children:"Proton and ServiceRadar-core Certificate (core.pem)"}),"\n",(0,t.jsx)(r.p,{children:"Proton (server) and ServiceRadar-core (client to Proton, server to Poller) share the same certificate (CN=core.serviceradar) with SANs covering all relevant IPs."}),"\n",(0,t.jsx)(r.p,{children:"Create SAN Configuration:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > core-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = core.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth,clientAuth\nsubjectAltName = IP:192.168.2.22,IP:192.168.2.10,IP:192.168.2.11,IP:192.168.2.12,IP:192.168.2.13,IP:192.168.2.14,IP:192.168.2.18,IP:192.168.2.19,IP:172.233.208.210\nEOF\n"})}),"\n",(0,t.jsx)(r.p,{children:"Ensure IP:172.233.208.210 is included. Adjust other IPs based on your network."}),"\n",(0,t.jsx)(r.p,{children:"Generate Certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out core-key.pem\nopenssl req -new -key core-key.pem -out core.csr -config core-san.cnf\nopenssl x509 -req -in core.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out core.pem -days 365 -sha256 -extfile core-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in core.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Expected:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Subject: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=core.serviceradar\nIssuer: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=ServiceRadar CA\nX509v3 Subject Alternative Name: \n    IP Address:192.168.2.22, ..., IP Address:172.233.208.210\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl verify -CAfile root.pem core.pem\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Expected: ",(0,t.jsx)(r.code,{children:"core.pem: OK."})]}),"\n",(0,t.jsx)(r.h4,{id:"poller-certificate-pollerpem",children:"Poller Certificate (poller.pem)"}),"\n",(0,t.jsx)(r.p,{children:"The Poller acts as a client to ServiceRadar-core and a server for health checks."}),"\n",(0,t.jsx)(r.p,{children:"Create SAN Configuration:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > poller-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = poller.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth,serverAuth\nsubjectAltName = IP:192.168.2.100\nEOF\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Replace 192.168.2.100 with the actual IP of dusk01. To find it, run ",(0,t.jsx)(r.code,{children:"ip addr show"})," on dusk01 and note the inet address. If unknown, use 192.168.2.100 as a placeholder and regenerate later."]}),"\n",(0,t.jsx)(r.p,{children:"Generate Certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out poller-key.pem\nopenssl req -new -key poller-key.pem -out poller.csr -config poller-san.cnf\nopenssl x509 -req -in poller.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out poller.pem -days 365 -sha256 -extfile poller-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in poller.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Expected:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Subject: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=poller.serviceradar\nIssuer: C=US, ST=Your State, L=Your Location, O=ServiceRadar, OU=Operations, CN=ServiceRadar CA\nX509v3 Subject Alternative Name: \n    IP Address:192.168.2.100\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl verify -CAfile root.pem poller.pem\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Expected: ",(0,t.jsx)(r.code,{children:"poller.pem: OK."})]}),"\n",(0,t.jsx)(r.h4,{id:"agent-certificate-agentpem",children:"Agent Certificate (agent.pem)"}),"\n",(0,t.jsx)(r.p,{children:"The Agent acts as a client to the KV store and a server for the Poller."}),"\n",(0,t.jsx)(r.p,{children:"Create SAN Configuration:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > agent-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = agent.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth,serverAuth\nsubjectAltName = IP:<agent-ip>\nEOF\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"<agent-ip>"})," with the Agent's IP (e.g., 192.168.2.x). Run ",(0,t.jsx)(r.code,{children:"ip addr show"})," on the Agent host to find it."]}),"\n",(0,t.jsx)(r.p,{children:"Generate Certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out agent-key.pem\nopenssl req -new -key agent-key.pem -out agent.csr -config agent-san.cnf\nopenssl x509 -req -in agent.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out agent.pem -days 365 -sha256 -extfile agent-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in agent.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\nopenssl verify -CAfile root.pem agent.pem\n'})}),"\n",(0,t.jsx)(r.h4,{id:"nats-jetstream-certificate-nats-serverpem",children:"NATS JetStream Certificate (nats-server.pem)"}),"\n",(0,t.jsx)(r.p,{children:"NATS JetStream acts as a server for the KV store, typically co-located with ServiceRadar-core on 172.233.208.210."}),"\n",(0,t.jsx)(r.p,{children:"Create SAN Configuration:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > nats-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = nats-serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = IP:127.0.0.1,IP:172.233.208.210\nEOF\n"})}),"\n",(0,t.jsx)(r.p,{children:"Generate Certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out nats-server-key.pem\nopenssl req -new -key nats-server-key.pem -out nats-server.csr -config nats-san.cnf\nopenssl x509 -req -in nats-server.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out nats-server.pem -days 365 -sha256 -extfile nats-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in nats-server.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\nopenssl verify -CAfile root.pem nats-server.pem\n'})}),"\n",(0,t.jsx)(r.h4,{id:"serviceradar-kv-certificate-kvpem",children:"serviceradar-kv Certificate (kv.pem)"}),"\n",(0,t.jsx)(r.p,{children:"The KV service acts as a client to NATS and a server for Agents, co-located on 172.233.208.210."}),"\n",(0,t.jsx)(r.p,{children:"Create SAN Configuration:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > kv-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = kv.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth,serverAuth\nsubjectAltName = IP:172.233.208.210\nEOF\n"})}),"\n",(0,t.jsx)(r.p,{children:"Generate Certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out kv-key.pem\nopenssl req -new -key kv-key.pem -out kv.csr -config kv-san.cnf\nopenssl x509 -req -in kv.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out kv.pem -days 365 -sha256 -extfile kv-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in kv.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\nopenssl verify -CAfile root.pem kv.pem\n'})}),"\n",(0,t.jsx)(r.h3,{id:"4-secure-the-ca-private-key",children:"4. Secure the CA Private Key"}),"\n",(0,t.jsx)(r.p,{children:"Move root-key.pem to a secure location:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mv root-key.pem /path/to/secure/location/root-key.pem\nsudo chmod 600 /path/to/secure/location/root-key.pem\n"})}),"\n",(0,t.jsx)(r.h2,{id:"certificate-deployment",children:"Certificate Deployment"}),"\n",(0,t.jsx)(r.h3,{id:"role-based-requirements",children:"Role-Based Requirements"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Component"}),(0,t.jsx)(r.th,{children:"Role"}),(0,t.jsx)(r.th,{children:"Certificates Needed"}),(0,t.jsx)(r.th,{children:"Location"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Proton"}),(0,t.jsx)(r.td,{children:"Server"}),(0,t.jsx)(r.td,{children:"ca-cert.pem, root.pem, core-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/proton-server/"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"ServiceRadar-core"}),(0,t.jsx)(r.td,{children:"Client+Server"}),(0,t.jsx)(r.td,{children:"root.pem, core.pem, core-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/serviceradar/certs/"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Poller"}),(0,t.jsx)(r.td,{children:"Client+Server"}),(0,t.jsx)(r.td,{children:"root.pem, poller.pem, poller-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/serviceradar/certs/"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Agent"}),(0,t.jsx)(r.td,{children:"Client+Server"}),(0,t.jsx)(r.td,{children:"root.pem, agent.pem, agent-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/serviceradar/certs/"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"NATS JetStream"}),(0,t.jsx)(r.td,{children:"Server"}),(0,t.jsx)(r.td,{children:"root.pem, nats-server.pem, nats-server-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/serviceradar/certs/"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"serviceradar-kv"}),(0,t.jsx)(r.td,{children:"Client+Server"}),(0,t.jsx)(r.td,{children:"root.pem, kv.pem, kv-key.pem"}),(0,t.jsx)(r.td,{children:"/etc/serviceradar/certs/"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"installation-steps",children:"Installation Steps"}),"\n",(0,t.jsx)(r.h4,{id:"create-directories",children:"Create Directories:"}),"\n",(0,t.jsx)(r.p,{children:"On serviceradar-cloud (core and Proton host):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mkdir -p /etc/proton-server /etc/serviceradar/certs\nsudo chown proton:proton /etc/proton-server\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs\nsudo chmod 700 /etc/proton-server /etc/serviceradar/certs\n"})}),"\n",(0,t.jsx)(r.p,{children:"On dusk01 (Poller host):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mkdir -p /etc/serviceradar/certs\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs\nsudo chmod 700 /etc/serviceradar/certs\n"})}),"\n",(0,t.jsx)(r.p,{children:"On Agent host (if separate):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mkdir -p /etc/serviceradar/certs\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs\nsudo chmod 700 /etc/serviceradar/certs\n"})}),"\n",(0,t.jsx)(r.h4,{id:"deploy-certificates",children:"Deploy Certificates:"}),"\n",(0,t.jsx)(r.h5,{id:"proton-on-serviceradar-cloud",children:"Proton (on serviceradar-cloud):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo cp /path/to/tls/root.pem /etc/proton-server/ca-cert.pem\nsudo cp /path/to/tls/core.pem /etc/proton-server/root.pem\nsudo cp /path/to/tls/core-key.pem /etc/proton-server/core-key.pem\nsudo chown proton:proton /etc/proton-server/*\nsudo chmod 644 /etc/proton-server/*.pem\nsudo chmod 600 /etc/proton-server/*-key.pem\n"})}),"\n",(0,t.jsx)(r.h5,{id:"serviceradar-core-on-serviceradar-cloud",children:"ServiceRadar-core (on serviceradar-cloud):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo cp /path/to/tls/root.pem /etc/serviceradar/certs/root.pem\nsudo cp /path/to/tls/core.pem /etc/serviceradar/certs/core.pem\nsudo cp /path/to/tls/core-key.pem /etc/serviceradar/certs/core-key.pem\nsudo cp /path/to/tls/nats-server.pem /etc/serviceradar/certs/nats-server.pem\nsudo cp /path/to/tls/nats-server-key.pem /etc/serviceradar/certs/nats-server-key.pem\nsudo cp /path/to/tls/kv.pem /etc/serviceradar/certs/kv.pem\nsudo cp /path/to/tls/kv-key.pem /etc/serviceradar/certs/kv-key.pem\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs/*\nsudo chmod 644 /etc/serviceradar/certs/*.pem\nsudo chmod 600 /etc/serviceradar/certs/*-key.pem\n"})}),"\n",(0,t.jsx)(r.h5,{id:"poller-on-dusk01",children:"Poller (on dusk01):"}),"\n",(0,t.jsx)(r.p,{children:"Transfer certificates from serviceradar-cloud:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"scp /path/to/tls/root.pem /path/to/tls/poller.pem /path/to/tls/poller-key.pem <user>@dusk01:/tmp/\n"})}),"\n",(0,t.jsx)(r.p,{children:"On dusk01:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mv /tmp/root.pem /etc/serviceradar/certs/root.pem\nsudo mv /tmp/poller.pem /etc/serviceradar/certs/poller.pem\nsudo mv /tmp/poller-key.pem /etc/serviceradar/certs/poller-key.pem\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs/*\nsudo chmod 644 /etc/serviceradar/certs/*.pem\nsudo chmod 600 /etc/serviceradar/certs/*-key.pem\n"})}),"\n",(0,t.jsx)(r.h5,{id:"agent-on-agent-host",children:"Agent (on Agent host):"}),"\n",(0,t.jsx)(r.p,{children:"Transfer certificates:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"scp /path/to/tls/root.pem /path/to/tls/agent.pem /path/to/tls/agent-key.pem <user>@<agent-ip>:/tmp/\n"})}),"\n",(0,t.jsx)(r.p,{children:"On Agent host:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo mv /tmp/root.pem /etc/serviceradar/certs/root.pem\nsudo mv /tmp/agent.pem /etc/serviceradar/certs/agent.pem\nsudo mv /tmp/agent-key.pem /etc/serviceradar/certs/agent-key.pem\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs/*\nsudo chmod 644 /etc/serviceradar/certs/*.pem\nsudo chmod 600 /etc/serviceradar/certs/*-key.pem\n"})}),"\n",(0,t.jsx)(r.h2,{id:"component-configuration",children:"Component Configuration"}),"\n",(0,t.jsx)(r.h3,{id:"proton-configuration-on-serviceradar-cloud",children:"Proton Configuration (on serviceradar-cloud)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/proton-server/config.yaml"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:"openSSL:\n  server:\n    certificateFile: /etc/proton-server/root.pem\n    privateKeyFile: /etc/proton-server/core-key.pem\n    caConfig: /etc/proton-server/ca-cert.pem\n    dhParamsFile: /etc/proton-server/dhparam.pem\n    verificationMode: strict\n    loadDefaultCAFile: false\n    cacheSessions: true\n    disableProtocols: 'sslv2,sslv3'\n    preferServerCiphers: true\n  client:\n    loadDefaultCAFile: true\n    cacheSessions: true\n    disableProtocols: 'sslv2,sslv3'\n    preferServerCiphers: true\n    invalidCertificateHandler:\n      name: AcceptCertificateHandler\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/proton-server/users.yaml"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:"users:\n  default:\n    password: ''\n    networks:\n      - ip: '172.233.208.210/32'\n    profile: default\n    quota: default\n    allow_databases:\n      - database: default\n    default_database: default\n    auth_type: ssl_certificates\n    auth_params:\n      common_names:\n        - \"core.serviceradar\"\n  system:\n    password: 'sys@t+'\n    allow_databases:\n      - database: system\n    default_database: system\n  pgadmin:\n    allow_databases:\n      - database: default\n    default_database: default\n    password: 'pgadmin'\n    networks:\n      ip: '::/0'\n  neutron:\n    allow_databases:\n      - database: neutron\n    default_database: neutron\n    password: 'neutron@t+'\n    networks:\n      ip: '::/0'\n  proton:\n    default_database: default\n    password: 'proton@t+'\n    networks:\n      - ip: '::1'\n      - ip: 127.0.0.1\n    access_management: 1\n"})}),"\n",(0,t.jsx)(r.h3,{id:"serviceradar-core-configuration-on-serviceradar-cloud",children:"ServiceRadar-core Configuration (on serviceradar-cloud)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/core.json"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "listen_addr": ":8090",\n  "grpc_addr": ":50052",\n  "alert_threshold": "5m",\n  "known_pollers": ["my-poller"],\n  "metrics": {\n    "enabled": true,\n    "retention": 100,\n    "max_pollers": 10000\n  },\n  "database": {\n    "addresses": ["172.233.208.210:9440"],\n    "name": "default",\n    "username": "default",\n    "password": "",\n    "max_conns": 10,\n    "idle_conns": 5,\n    "settings": {\n      "max_execution_time": 60,\n      "output_format_json_quote_64bit_integers": 0,\n      "allow_experimental_live_view": 0,\n      "idle_connection_timeout": 600,\n      "join_use_nulls": 1,\n      "input_format_defaults_for_omitted_fields": 1\n    }\n  },\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "role": "core",\n    "tls": {\n      "cert_file": "core.pem",\n      "key_file": "core-key.pem",\n      "ca_file": "root.pem",\n      "client_ca_file": "root.pem"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"poller-configuration-on-dusk01",children:"Poller Configuration (on dusk01)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/poller.json"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "agents": {\n    "local-agent": {\n      "address": "<agent-ip>:50051",\n      "security": {\n        "server_name": "agent.serviceradar",\n        "mode": "mtls",\n        "tls": {\n          "cert_file": "poller.pem",\n          "key_file": "poller-key.pem",\n          "ca_file": "root.pem"\n        }\n      },\n      "checks": []\n    }\n  },\n  "core_address": "172.233.208.210:50052",\n  "listen_addr": ":50053",\n  "poll_interval": "30s",\n  "poller_id": "my-poller",\n  "service_name": "PollerService",\n  "service_type": "grpc",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "core.serviceradar",\n    "role": "poller",\n    "tls": {\n      "cert_file": "poller.pem",\n      "key_file": "poller-key.pem",\n      "ca_file": "root.pem"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"<agent-ip>"})," with the Agent's IP address (e.g., 192.168.2.x)."]}),"\n",(0,t.jsx)(r.h3,{id:"agent-configuration-on-agent-host",children:"Agent Configuration (on Agent host)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/agent.json"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "checkers_dir": "/etc/serviceradar/checkers",\n  "listen_addr": "<agent-ip>:50051",\n  "service_type": "grpc",\n  "service_name": "AgentService",\n  "agent_id": "default-agent",\n  "agent_name": "<agent-ip>",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "poller.serviceradar",\n    "role": "agent",\n    "tls": {\n      "cert_file": "agent.pem",\n      "key_file": "agent-key.pem",\n      "ca_file": "root.pem"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Replace ",(0,t.jsx)(r.code,{children:"<agent-ip>"})," with the Agent's IP address."]}),"\n",(0,t.jsx)(r.h3,{id:"nats-jetstream-configuration-on-serviceradar-cloud",children:"NATS JetStream Configuration (on serviceradar-cloud)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/nats/nats-server.conf"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'listen: 127.0.0.1:4222\nserver_name: nats-serviceradar\njetstream {\n  store_dir: /var/lib/nats/jetstream\n  max_memory_store: 1G\n  max_file_store: 10G\n}\ntls {\n  cert_file: "/etc/serviceradar/certs/nats-server.pem"\n  key_file: "/etc/serviceradar/certs/nats-server-key.pem"\n  ca_file: "/etc/serviceradar/certs/root.pem"\n  verify: true\n  verify_and_map: true\n}\nlogfile: "/var/log/nats/nats.log"\ndebug: true\n'})}),"\n",(0,t.jsx)(r.h3,{id:"serviceradar-kv-configuration-on-serviceradar-cloud",children:"serviceradar-kv Configuration (on serviceradar-cloud)"}),"\n",(0,t.jsxs)(r.p,{children:["Update ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/kv.json"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "listen_addr": ":50057",\n  "nats_url": "nats://127.0.0.1:4222",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "nats-serviceradar",\n    "role": "server",\n    "tls": {\n      "cert_file": "kv.pem",\n      "key_file": "kv-key.pem",\n      "ca_file": "root.pem",\n      "client_ca_file": "root.pem"\n    }\n  },\n  "rbac": {\n    "roles": [\n      {"identity": "CN=agent.serviceradar,O=ServiceRadar", "role": "reader"}\n    ]\n  },\n  "bucket": "serviceradar-kv"\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"verification",children:"Verification"}),"\n",(0,t.jsx)(r.h3,{id:"verify-certificates",children:"Verify Certificates:"}),"\n",(0,t.jsx)(r.p,{children:"On serviceradar-cloud:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'# Proton\nopenssl x509 -in /etc/proton-server/ca-cert.pem -text -noout | grep -E "Subject:|Issuer:"\nopenssl x509 -in /etc/proton-server/root.pem -text -noout | grep Subject\nopenssl verify -CAfile /etc/proton-server/ca-cert.pem /etc/proton-server/root.pem\n\n# ServiceRadar-core\nopenssl x509 -in /etc/serviceradar/certs/root.pem -text -noout | grep -E "Subject:|Issuer:"\nopenssl x509 -in /etc/serviceradar/certs/core.pem -text -noout | grep Subject\nopenssl verify -CAfile /etc/serviceradar/certs/root.pem /etc/serviceradar/certs/core.pem\n'})}),"\n",(0,t.jsx)(r.p,{children:"On dusk01:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in /etc/serviceradar/certs/root.pem -text -noout | grep -E "Subject:|Issuer:"\nopenssl x509 -in /etc/serviceradar/certs/poller.pem -text -noout | grep -E "Subject:|Issuer:|X509v3 Subject Alternative Name:"\nopenssl verify -CAfile /etc/serviceradar/certs/root.pem /etc/serviceradar/certs/poller.pem\n'})}),"\n",(0,t.jsx)(r.h3,{id:"restart-services",children:"Restart Services:"}),"\n",(0,t.jsx)(r.p,{children:"On serviceradar-cloud:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo systemctl restart proton-server\nsudo systemctl restart serviceradar-core\nsudo systemctl restart nats\nsudo systemctl restart serviceradar-kv\n"})}),"\n",(0,t.jsx)(r.p,{children:"On dusk01:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo systemctl restart serviceradar-poller\n"})}),"\n",(0,t.jsx)(r.p,{children:"On Agent host:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo systemctl restart serviceradar-agent\n"})}),"\n",(0,t.jsx)(r.h3,{id:"test-mtls-connections",children:"Test mTLS Connections:"}),"\n",(0,t.jsx)(r.h4,{id:"poller-to-core-from-dusk01",children:"Poller to Core (from dusk01):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl s_client -connect 172.233.208.210:50052 -cert /etc/serviceradar/certs/poller.pem -key /etc/serviceradar/certs/poller-key.pem -CAfile /etc/serviceradar/certs/root.pem\n"})}),"\n",(0,t.jsx)(r.p,{children:"Verify: CN=core.serviceradar, IP:172.233.208.210 in SANs, Verify return code: 0 (ok)."}),"\n",(0,t.jsx)(r.h4,{id:"core-to-proton-on-serviceradar-cloud",children:"Core to Proton (on serviceradar-cloud):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'proton-client --host 172.233.208.210 --port 9440 --secure --certificate-file /etc/serviceradar/certs/core.pem --private-key-file /etc/serviceradar/certs/core-key.pem -q "SELECT currentUser()"\n'})}),"\n",(0,t.jsx)(r.p,{children:"Expected: default."}),"\n",(0,t.jsx)(r.h4,{id:"agent-to-kv-on-agent-host",children:"Agent to KV (on Agent host):"}),"\n",(0,t.jsx)(r.p,{children:"Test from the Agent host if applicable."}),"\n",(0,t.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(r.h3,{id:"certificate-verification-failure",children:"Certificate Verification Failure:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Ensure CA certificates (root.pem) are identical across all hosts:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"md5sum /etc/serviceradar/certs/root.pem /etc/proton-server/ca-cert.pem\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Verify component certificates are signed by the CA:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl verify -CAfile /etc/serviceradar/certs/root.pem /etc/serviceradar/certs/<component>.pem\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"unknown-authority-error",children:"Unknown Authority Error:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Check if ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/certs/root.pem"})," matches the CA used to sign all certificates."]}),"\n",(0,t.jsx)(r.li,{children:"Regenerate certificates if signed by an old CA."}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"missing-sans",children:"Missing SANs:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Verify SANs in certificates:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in /etc/serviceradar/certs/<component>.pem -text -noout | grep -A 1 "X509v3 Subject Alternative Name"\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Ensure IPs match the address fields in configuration files (e.g., 172.233.208.210 for core)."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"connection-errors",children:"Connection Errors:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Check logs:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"# On serviceradar-cloud\ntail -f /var/log/proton-server/proton-server.err.log\njournalctl -u serviceradar-core -f\n# On dusk01\njournalctl -u serviceradar-poller -f\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Enable debug logging in ",(0,t.jsx)(r.code,{children:"/etc/proton-server/config.yaml"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:"logger:\n  level: debug\n  log: /var/log/proton-server/proton-server.log\n  errorlog: /var/log/proton-server/proton-server.err.log\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Verify network connectivity:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"nc -zv 172.233.208.210 50052\nnc -zv 172.233.208.210 9440\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"proton-configuration",children:"Proton Configuration:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Ensure ",(0,t.jsx)(r.code,{children:"auth_type: ssl_certificates"})," in users.yaml is correct."]}),"\n",(0,t.jsxs)(r.li,{children:["Test with ssl_certificates format if parsing fails:","\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-yaml",children:'default:\n  ssl_certificates:\n    common_name:\n      - "core.serviceradar"\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"poller-ip-mismatch",children:"Poller IP Mismatch:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"If the Poller's IP is incorrect, regenerate poller.pem with the correct IP:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"ip addr show  # On dusk01\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Update poller-san.cnf and repeat generation steps."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"checker-certificate-configuration",children:"Checker Certificate Configuration"}),"\n",(0,t.jsx)(r.p,{children:"ServiceRadar checkers (such as SNMP Checker, Dusk Checker, and Network Sweep) also require TLS certificates for secure communication. Since checkers typically run on the same host as the Agent, you can configure them to use certificates in a shared manner."}),"\n",(0,t.jsx)(r.h3,{id:"generate-checker-certificates",children:"Generate Checker Certificates"}),"\n",(0,t.jsx)(r.p,{children:"For checkers, you'll need to generate client certificates with the appropriate extended key usage settings. Although you might be tempted to reuse the Agent certificates (agent.pem and agent-key.pem), checkers require certificates specifically configured for client authentication."}),"\n",(0,t.jsxs)(r.p,{children:["Based on error logs showing ",(0,t.jsx)(r.code,{children:"certificate specifies an incompatible key usage"})," for dusk and sysmon checkers, we need to ensure the certificate has the proper key usage and extended key usage settings."]}),"\n",(0,t.jsx)(r.p,{children:"Create dedicated checker certificates with proper key usage settings:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"cat > checker-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = checker.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth\nsubjectAltName = IP:<agent-ip>\nEOF\n"})}),"\n",(0,t.jsx)(r.p,{children:"Generate the general checker certificate:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"openssl ecparam -name prime256v1 -genkey -out checker-key.pem\nopenssl req -new -key checker-key.pem -out checker.csr -config checker-san.cnf\nopenssl x509 -req -in checker.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out checker.pem -days 365 -sha256 -extfile checker-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsx)(r.p,{children:"For specific checker types like dusk and sysmon that require dedicated certificates:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"# For dusk checker\ncat > dusk-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = dusk.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth, serverAuth\nsubjectAltName = IP:192.168.2.22\nEOF\n\n# Generate dusk certificate\nopenssl ecparam -name prime256v1 -genkey -out dusk-key.pem\nopenssl req -new -key dusk-key.pem -out dusk.csr -config dusk-san.cnf\nopenssl x509 -req -in dusk.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out dusk.pem -days 365 -sha256 -extfile dusk-san.cnf -extensions v3_req\n\n# For sysmon checker\ncat > sysmon-san.cnf << EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\nprompt = no\n\n[req_distinguished_name]\nC = US\nST = Your State\nL = Your Location\nO = ServiceRadar\nOU = Operations\nCN = sysmon.serviceradar\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth, serverAuth\nsubjectAltName = IP:192.168.2.22\nEOF\n\n# Generate sysmon certificate\nopenssl ecparam -name prime256v1 -genkey -out sysmon-key.pem\nopenssl req -new -key sysmon-key.pem -out sysmon.csr -config sysmon-san.cnf\nopenssl x509 -req -in sysmon.csr -CA root.pem -CAkey root-key.pem -CAcreateserial -out sysmon.pem -days 365 -sha256 -extfile sysmon-san.cnf -extensions v3_req\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Note that we've included both ",(0,t.jsx)(r.code,{children:"clientAuth"})," and ",(0,t.jsx)(r.code,{children:"serverAuth"})," in the extendedKeyUsage for dusk and sysmon since the error suggests they might be acting as both clients and servers."]}),"\n",(0,t.jsx)(r.h3,{id:"deploy-checker-certificates",children:"Deploy Checker Certificates"}),"\n",(0,t.jsx)(r.p,{children:"Deploy the certificates to the Agent host where checkers run:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"# Deploy generic checker certificates\nsudo cp checker.pem /etc/serviceradar/certs/checker.pem\nsudo cp checker-key.pem /etc/serviceradar/certs/checker-key.pem\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs/checker*.pem\nsudo chmod 644 /etc/serviceradar/certs/checker.pem\nsudo chmod 600 /etc/serviceradar/certs/checker-key.pem\n\n# Deploy specific certificates for dusk and sysmon\nsudo cp dusk.pem /etc/serviceradar/certs/dusk.pem\nsudo cp dusk-key.pem /etc/serviceradar/certs/dusk-key.pem\nsudo cp sysmon.pem /etc/serviceradar/certs/sysmon.pem\nsudo cp sysmon-key.pem /etc/serviceradar/certs/sysmon-key.pem\nsudo chown serviceradar:serviceradar /etc/serviceradar/certs/{dusk,sysmon}*.pem\nsudo chmod 644 /etc/serviceradar/certs/{dusk,sysmon}.pem\nsudo chmod 600 /etc/serviceradar/certs/{dusk,sysmon}-key.pem\n"})}),"\n",(0,t.jsx)(r.h3,{id:"configure-checkers-to-use-tls",children:"Configure Checkers to Use TLS"}),"\n",(0,t.jsxs)(r.p,{children:["Each checker configuration file (located in ",(0,t.jsx)(r.code,{children:"/etc/serviceradar/checkers/"}),") should include a security section. Here's how to configure different types of checkers:"]}),"\n",(0,t.jsx)(r.h4,{id:"generic-checker-configuration",children:"Generic Checker Configuration"}),"\n",(0,t.jsx)(r.p,{children:"For most checkers:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "name": "example-checker",\n  "type": "snmp|network-sweep",\n  "interval": "30s",\n  "timeout": "5s",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "core.serviceradar",\n    "role": "client",\n    "tls": {\n      "cert_file": "checker.pem",\n      "key_file": "checker-key.pem",\n      "ca_file": "root.pem"\n    }\n  },\n  "settings": {\n    // Checker-specific settings here\n  }\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"dusk-checker-configuration",children:"Dusk Checker Configuration"}),"\n",(0,t.jsx)(r.p,{children:"For dusk checker specifically (which needs dual client/server capabilities):"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "name": "dusk",\n  "type": "external",\n  "interval": "30s",\n  "timeout": "5s",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "core.serviceradar",\n    "role": "dual",\n    "tls": {\n      "cert_file": "dusk.pem",\n      "key_file": "dusk-key.pem",\n      "ca_file": "root.pem"\n    }\n  },\n  "settings": {\n    "address": "192.168.2.22:50082",\n    "service": "dusk"\n  }\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"sysmon-checker-configuration",children:"SysMon Checker Configuration"}),"\n",(0,t.jsx)(r.p,{children:"For sysmon checker:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\n  "name": "sysmon",\n  "type": "external",\n  "interval": "30s",\n  "timeout": "5s",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "core.serviceradar",\n    "role": "dual",\n    "tls": {\n      "cert_file": "sysmon.pem",\n      "key_file": "sysmon-key.pem",\n      "ca_file": "root.pem"\n    }\n  },\n  "settings": {\n    "address": "192.168.2.22:50083",\n    "service": "sysmon"\n  }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Note that for dusk and sysmon, we're:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:'Setting the role to "dual" (not just "client")'}),"\n",(0,t.jsx)(r.li,{children:"Using dedicated certificate files (dusk.pem/sysmon.pem)"}),"\n",(0,t.jsx)(r.li,{children:"Specifying the exact IP and port in the settings"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"using-shared-certificates-for-multiple-checkers",children:"Using Shared Certificates for Multiple Checkers"}),"\n",(0,t.jsx)(r.p,{children:"While you can use the same certificate for multiple similar checkers to simplify certificate management, the log errors suggest that some checkers have specific requirements:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Standard checkers"})," (like SNMP, network-sweep): Can use a shared certificate with ",(0,t.jsx)(r.code,{children:"clientAuth"})," extension:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'"security": {\n  "mode": "mtls",\n  "cert_dir": "/etc/serviceradar/certs",\n  "server_name": "core.serviceradar",\n  "role": "client",\n  "tls": {\n    "cert_file": "checker.pem",\n    "key_file": "checker-key.pem",\n    "ca_file": "root.pem"\n  }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Dual-role checkers"})," (like dusk and sysmon): Need dedicated certificates with both ",(0,t.jsx)(r.code,{children:"clientAuth"})," and ",(0,t.jsx)(r.code,{children:"serverAuth"})," extensions:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'"security": {\n  "mode": "mtls",\n  "cert_dir": "/etc/serviceradar/certs",\n  "server_name": "core.serviceradar",\n  "role": "dual",\n  "tls": {\n    "cert_file": "dusk.pem",  // or sysmon.pem\n    "key_file": "dusk-key.pem",  // or sysmon-key.pem\n    "ca_file": "root.pem"\n  }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Based on the observed error logs, ",(0,t.jsx)(r.code,{children:"dusk"})," and ",(0,t.jsx)(r.code,{children:"sysmon"})," checkers specifically require dual-role certificates because they are functioning in both client and server capacities. Using a certificate with only ",(0,t.jsx)(r.code,{children:"clientAuth"}),' causes the "incompatible key usage" error.']}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"troubleshooting-checker-certificate-issues",children:"Troubleshooting Checker Certificate Issues"}),"\n",(0,t.jsx)(r.p,{children:'If you encounter certificate issues with checkers (like the "certificate specifies an incompatible key usage" error):'}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Check key usage settings"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'openssl x509 -in /etc/serviceradar/certs/checker.pem -text -noout | grep -E "Key Usage|Extended Key Usage"\n'})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["For standard checkers: Should include ",(0,t.jsx)(r.code,{children:"TLS Web Client Authentication"})]}),"\n",(0,t.jsxs)(r.li,{children:["For dual-role checkers (dusk/sysmon): Should include both ",(0,t.jsx)(r.code,{children:"TLS Web Client Authentication"})," and ",(0,t.jsx)(r.code,{children:"TLS Web Server Authentication"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Examine agent logs"})," for specific TLS errors:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'journalctl -u serviceradar-agent -f | grep -i "certificate\\|tls\\|handshake"\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Verify certificate for the right IP and port"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:'# Check which IP/port is failing\njournalctl -u serviceradar-agent -f | grep "connection error"\n\n# Verify certificate has the right IP in SANs\nopenssl x509 -in /etc/serviceradar/certs/dusk.pem -text -noout | grep -A 1 "Subject Alternative Name"\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Regenerate certificates with proper usage"}),': If you see "incompatible key usage" errors like:']}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"transport: authentication handshake failed: tls: failed to verify certificate: x509: certificate specifies an incompatible key usage\n"})}),"\n",(0,t.jsx)(r.p,{children:"This indicates the certificate doesn't have the necessary key usage extensions for its role. For dusk and sysmon specifically, ensure:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"keyUsage = digitalSignature, keyEncipherment"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"extendedKeyUsage = clientAuth, serverAuth"})," (both!)"]}),"\n",(0,t.jsxs)(r.li,{children:["Correct IP in ",(0,t.jsx)(r.code,{children:"subjectAltName"})]}),"\n",(0,t.jsxs)(r.li,{children:["Role set to ",(0,t.jsx)(r.code,{children:'"role": "dual"'})," in the configuration"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Verify checker service configuration"}),": For external checkers running as separate services, check both sides of the connection:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"# Check dusk service configuration\ncat /etc/serviceradar/services/dusk.json\n\n# Check sysmon service configuration\ncat /etc/serviceradar/services/sysmon.json\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Test certificate compatibility"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"# Try connecting to the service directly with the certificate\nopenssl s_client -connect 192.168.2.22:50082 -cert /etc/serviceradar/certs/dusk.pem -key /etc/serviceradar/certs/dusk-key.pem -CAfile /etc/serviceradar/certs/root.pem\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use IP Addresses"}),": Always specify IPs in SANs and configuration files to avoid DNS issues."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Secure CA Key"}),": Store root-key.pem in a secure, offline location."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Consistent CA"}),": Ensure all components use the same root.pem."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Firewall Rules"}),": Allow necessary ports (50051, 50052, 50053, 50057, 4222, 9440):","\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"sudo ufw allow 50051/tcp  # Agent\nsudo ufw allow 50052/tcp  # Core\nsudo ufw allow 50053/tcp  # Poller\nsudo ufw allow 50057/tcp  # KV\nsudo ufw allow 9440/tcp   # Proton\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Backup Certificates"}),": Store a copy of ",(0,t.jsx)(r.code,{children:"/path/to/tls/"})," in a secure location."]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);