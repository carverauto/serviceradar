"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"monitoring-ubiquiti-with-serviceradar-snmp","metadata":{"permalink":"/blog/monitoring-ubiquiti-with-serviceradar-snmp","source":"@site/blog/2025-03-26-snmp-ubiquiti-dream-pro/index.md","title":"Monitoring Your Ubiquiti Dream Machine Pro with ServiceRadar\'s SNMP Poller","description":"Network monitoring doesn\'t have to be complicated\u2014especially when you\'re managing devices like the Ubiquiti UniFi Dream Machine Pro (UDM-Pro). With ServiceRadar\'s SNMP Poller feature, you can easily keep tabs on your router\'s performance, like tracking bandwidth on your primary WAN interface, without breaking a sweat. In this post, we\'ll walk you through enabling SNMP on your UDM-Pro, finding the right OID for your WAN interface using a handy open-source tool, and setting it up in ServiceRadar. Whether you\'re a seasoned network admin or just getting started, this guide will show you how simple it can be to gain real-time visibility into your network.","date":"2025-03-26T00:00:00.000Z","tags":[{"inline":false,"label":"Monitoring","permalink":"/blog/tags/monitoring","description":"Monitoring tag description"},{"inline":false,"label":"Network Management Systems","permalink":"/blog/tags/nms","description":"Network Management System tag description"},{"inline":false,"label":"Network Automation","permalink":"/blog/tags/netauto","description":"Network Automation tag description"},{"inline":false,"label":"Observability","permalink":"/blog/tags/observability","description":"Observability tag description"},{"inline":false,"label":"Security","permalink":"/blog/tags/security","description":"Security tag description"}],"readingTime":4.75,"hasTruncateMarker":true,"authors":[{"name":"Michael Freeman","title":"Open Source Software Engineer","url":"https://carverauto.dev","page":{"permalink":"/blog/authors/all-michael-freeman-articles"},"socials":{"x":"https://x.com/mfreeman451","github":"https://github.com/mfreeman451","linkedin":"https://www.linkedin.com/in/mfreeman451/"},"imageURL":"https://avatars.githubusercontent.com/u/1821930?v=4","key":"mfreeman"}],"frontMatter":{"slug":"monitoring-ubiquiti-with-serviceradar-snmp","title":"Monitoring Your Ubiquiti Dream Machine Pro with ServiceRadar\'s SNMP Poller","authors":"mfreeman","tags":["monitoring","nms","netauto","observability","security"],"date":"2025-03-26T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Welcome to the ServiceRadar Blog","permalink":"/blog/welcome-to-serviceradar"}},"content":"Network monitoring doesn\'t have to be complicated\u2014especially when you\'re managing devices like the Ubiquiti UniFi Dream Machine Pro (UDM-Pro). With ServiceRadar\'s SNMP Poller feature, you can easily keep tabs on your router\'s performance, like tracking bandwidth on your primary WAN interface, without breaking a sweat. In this post, we\'ll walk you through enabling SNMP on your UDM-Pro, finding the right OID for your WAN interface using a handy open-source tool, and setting it up in ServiceRadar. Whether you\'re a seasoned network admin or just getting started, this guide will show you how simple it can be to gain real-time visibility into your network.\\n\\nLet\'s dive in and see how ServiceRadar makes monitoring your Ubiquiti gear a breeze!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Why Monitor Your UDM-Pro with SNMP?\\n\\nThe Ubiquiti UniFi Dream Machine Pro is a powerful all-in-one router and network management device, popular for its sleek interface and robust feature set. But while the UniFi dashboard gives you a great overview, it doesn\'t always provide the granular, real-time data you might need\u2014like detailed WAN interface stats for troubleshooting or capacity planning. That\'s where SNMP (Simple Network Management Protocol) comes in, and ServiceRadar\'s SNMP Poller takes it to the next level.\\n\\n![snmp-traffic.png](snmp-traffic.png)\\n\\nWith ServiceRadar, you can:\\n- Track interface metrics like inbound/outbound octets (bandwidth usage) on your WAN port.\\n- Set up alerts for anomalies, like sudden traffic spikes or drops. (Planned)\\n- Integrate UDM-Pro data into a broader monitoring ecosystem alongside servers, services, and other network gear.\\n\\nBest of all? ServiceRadar\'s distributed architecture means this data is collected securely and efficiently, even in remote or constrained environments. Let\'s get started.\\n\\n## Step 1: Enable SNMP on Your Ubiquiti Dream Machine Pro\\n\\n1. **Log in to Your UDM-Pro**:\\n   - Access the UniFi Network Management Controller via your browser (typically at `https://<UDM-Pro-IP>`)\\n   - Sign in with your administrator credentials\\n\\n2. **Navigate to SNMP Settings**:\\n   - Click on **Network** in the top navigation bar\\n   - Go to **Settings** (gear icon in the left sidebar)\\n   - Select **System**\\n   - Click on the **Traffic Logging** tab\\n\\n3. **Enable SNMP Monitoring**:\\n   - Scroll down to the \\"SNMP Monitoring\\" section\\n   - Check the box for **Version 1/2C**\\n   - Enter your desired **Community String** (the example shows \\"public\\" but you should use something more secure for production)\\n\\n![ubiq-snmp.png](ubiq-snmp.png)\\n\\n## Step 2: Find the WAN Interface OID with an SNMP Walk\\n\\nSNMP uses Object Identifiers (OIDs) to pinpoint specific metrics\u2014like the number of bytes flowing through your WAN interface. For the UDM-Pro, the primary WAN port is typically `eth8` or `eth9` (depending on your setup), and we\'ll use an open-source tool called `snmpwalk` to find its OID.\\n\\n### Install snmpwalk\\n\\nOn a Linux system (Ubuntu/Debian):\\n\\n```bash\\nsudo apt update\\nsudo apt install -y snmp snmp-mibs-downloader\\n```\\n\\nOn macOS (using Homebrew):\\n\\n```bash\\nbrew install net-snmp\\n```\\n\\n### Run an SNMP Walk\\n* Use snmpwalk to query the UDM-Pro\'s interface table:\\n```bash\\nsnmpwalk -v2c -c <your-community-string> <UDM-Pro-IP> .1.3.6.1.2.1.2.2\\n```\\n\\n* This OID (ifTable) lists all network interfaces. Look for the WAN interface by matching the description or index:\\n\\n```\\nIF-MIB::ifInOctets.1 = Counter32: 2973357339\\nIF-MIB::ifInOctets.2 = Counter32: 0\\nIF-MIB::ifInOctets.3 = Counter32: 0\\nIF-MIB::ifInOctets.4 = Counter32: 765010189\\nIF-MIB::ifInOctets.5 = Counter32: 3983110857\\nIF-MIB::ifInOctets.6 = Counter32: 0\\n```\\n\\n* If eth8 or eth9 is your WAN port (check your UniFi config), note its index (e.g., 8 or 9).\\n\\n## Get the OIDs for Traffic Monitoring\\n\\n### Inbound Octets (Download)\\n* The OID for inbound octets is `.1.3.6.1.2.1.2.2.1.10.<index>`. So, if your WAN is eth4 (index 4):\\n   * OID = `.1.3.6.1.2.1.2.2.1.10.4`\\n* Test it:\\n  ```bash\\n  snmpget -v2c -c public 192.168.1.1 .1.3.6.1.2.1.2.2.1.10.4\\n  ```\\n  Should return something like:\\n  ```\\n  IF-MIB::ifInOctets.4 = Counter32: 826260892\\n  ```\\n\\n### Outbound Octets (Upload)\\n* The OID for outbound octets is `.1.3.6.1.2.1.2.2.1.16.<index>`. Using the same example:\\n   * OID = `.1.3.6.1.2.1.2.2.1.16.4`\\n* Test it:\\n  ```bash\\n  snmpget -v2c -c public 192.168.1.1 .1.3.6.1.2.1.2.2.1.16.4\\n  ```\\n  Should return something like:\\n  ```\\n  IF-MIB::ifOutOctets.4 = Counter32: 198726543\\n  ```\\n\\n**Pro Tip:** If you\'re unsure which interface is your WAN, compare ifInOctets and ifOutOctets values over time (snmpget twice with a delay) to spot the active one. The interface with changing values is likely your active WAN.\\n\\n## Step 3: Configure ServiceRadar\'s SNMP Poller\\n\\nNow that SNMP is enabled and you\'ve got your OIDs, let\'s plug them into ServiceRadar. The SNMP Checker runs alongside the Agent and polls your UDM-Pro for you.\\n\\n## Install the SNMP Checker\\n\\nIf you haven\'t already:\\n\\n```bash\\ncurl -LO https://github.com/carverauto/serviceradar/releases/download/1.0.35/serviceradar-snmp-checker_1.0.35.deb\\nsudo dpkg -i serviceradar-snmp-checker_1.0.35.deb\\n```\\n\\n## Edit the Configuration\\n\\nUpdate `/etc/serviceradar/checkers/snmp.json`:\\n\\n```json\\n{\\n  \\"node_address\\": \\"localhost:50051\\",\\n  \\"listen_addr\\": \\":50054\\",\\n  \\"security\\": {\\n    \\"mode\\": \\"none\\",\\n    \\"role\\": \\"checker\\",\\n    \\"cert_dir\\": \\"/etc/serviceradar/certs\\"\\n  },\\n  \\"timeout\\": \\"30s\\",\\n  \\"targets\\": [\\n    {\\n      \\"name\\": \\"udm-pro-wan\\",\\n      \\"host\\": \\"<UDM-Pro-IP>\\",\\n      \\"port\\": 161,\\n      \\"community\\": \\"<your-community-string>\\",\\n      \\"version\\": \\"v2c\\",\\n      \\"interval\\": \\"30s\\",\\n      \\"retries\\": 2,\\n      \\"oids\\": [\\n        {\\n          \\"oid\\": \\".1.3.6.1.2.1.2.2.1.10.4\\",\\n          \\"name\\": \\"ifInOctets_4\\",\\n          \\"type\\": \\"counter\\",\\n          \\"scale\\": 1.0,\\n          \\"delta\\": true\\n        },\\n        {\\n           \\"oid\\": \\".1.3.6.1.2.1.2.2.1.16.4\\",\\n           \\"name\\": \\"ifOutOctets_4\\",\\n           \\"type\\": \\"counter\\",\\n           \\"scale\\": 1.0,\\n           \\"delta\\": true  \\n        }\\n      ]\\n    }\\n  ]\\n}\\n```\\n\\n* Replace \\\\<UDM-Pro-IP\\\\> and \\\\<your-community-string\\\\> with your values.\\n* Adjust the OID if your WAN index differs.\\n\\n## Restart and Verify\\n\\n```bash\\nsudo systemctl restart serviceradar-snmp-checker\\nsudo systemctl status serviceradar-snmp-checker\\n```\\n\\n## Step 4: See It in Action\\n\\nWith everything set up, your ServiceRadar dashboard (at http://\\\\<your-server-ip\\\\>/) will start showing WAN bandwidth data from your UDM-Pro. The Core Service aggregates this info from the Poller, which queries the Agent and SNMP Checker\u2014delivering a clean, real-time view of your network.\\n\\n## Why ServiceRadar Shines Here\\n\\nThis setup showcases what makes ServiceRadar special:\\n\\n* **Ease of Use**: No complex scripting\u2014just a JSON config and you\'re monitoring.\\n* **Flexibility**: Add more OIDs or devices as needed, from routers to switches.\\n* **Security**: Pair it with mTLS (see our TLS Security guide) for end-to-end encryption.\\n* **Scalability**: Monitor one UDM-Pro or a whole fleet\u2014it\'s up to you."},{"id":"welcome-to-serviceradar","metadata":{"permalink":"/blog/welcome-to-serviceradar","source":"@site/blog/2025-03-24-introducing-post.mdx","title":"Welcome to the ServiceRadar Blog","description":"We\u2019re thrilled to launch the ServiceRadar blog\u2014a space where we\u2019ll share updates, insights, and technical deep dives about our distributed network monitoring application, ServiceRadar. Whether you\u2019re a network administrator, a DevOps engineer, or just curious about cutting-edge monitoring solutions, this blog will keep you in the loop on how ServiceRadar is evolving to meet the challenges of modern infrastructure.","date":"2025-03-24T00:00:00.000Z","tags":[{"inline":false,"label":"Welcome","permalink":"/blog/tags/welcome","description":"Welcome tag description"},{"inline":false,"label":"Service Radar","permalink":"/blog/tags/serviceradar","description":"Service Radar tag description"},{"inline":false,"label":"Network Monitoring","permalink":"/blog/tags/network-monitoring","description":"Network Monitoring tag description"},{"inline":false,"label":"Cloud","permalink":"/blog/tags/cloud","description":"Cloud tag description"},{"inline":false,"label":"Zero Trust","permalink":"/blog/tags/zero-trust","description":"Zero Trust tag description"},{"inline":false,"label":"Zero Touch Provisioning","permalink":"/blog/tags/zero-touch","description":"Zero Touch Provisioning tag description"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Michael Freeman","title":"Open Source Software Engineer","url":"https://carverauto.dev","page":{"permalink":"/blog/authors/all-michael-freeman-articles"},"socials":{"x":"https://x.com/mfreeman451","github":"https://github.com/mfreeman451","linkedin":"https://www.linkedin.com/in/mfreeman451/"},"imageURL":"https://avatars.githubusercontent.com/u/1821930?v=4","key":"mfreeman"}],"frontMatter":{"slug":"welcome-to-serviceradar","title":"Welcome to the ServiceRadar Blog","authors":"mfreeman","tags":["welcome","serviceradar","network-monitoring","cloud","zero-trust","zero-touch"]},"unlisted":false,"prevItem":{"title":"Monitoring Your Ubiquiti Dream Machine Pro with ServiceRadar\'s SNMP Poller","permalink":"/blog/monitoring-ubiquiti-with-serviceradar-snmp"}},"content":"We\u2019re thrilled to launch the ServiceRadar blog\u2014a space where we\u2019ll share updates, insights, and technical deep dives about our distributed network monitoring application, ServiceRadar. Whether you\u2019re a network administrator, a DevOps engineer, or just curious about cutting-edge monitoring solutions, this blog will keep you in the loop on how ServiceRadar is evolving to meet the challenges of modern infrastructure.\\n\\nThis is the beginning of a journey to explore how ServiceRadar empowers you to monitor services in hard-to-reach places or constrained environments with real-time insights and robust alerting. Let\u2019s dive into what ServiceRadar is all about and what you can expect from this blog.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is ServiceRadar?\\n\\nServiceRadar is a distributed network monitoring system built from the ground up to tackle the complexities of today\u2019s infrastructure. It\u2019s designed to keep an eye on your internal services\u2014whether they\u2019re running on-premise, in the cloud, or in remote locations\u2014while delivering cloud-based alerting to ensure you\u2019re always informed, even during network outages or power disruptions.\\n\\nOur project is driven by a few core goals:\\n- **Real-Time Visibility**: Provide instant insights into service health, from processes and ports to SNMP-enabled network devices.\\n- **Resilience**: Ensure monitoring continues seamlessly, even in unreliable or constrained environments.\\n- **Security**: Leverage modern principles like mutual TLS (mTLS) and API key authentication to keep your data safe.\\n- **Scalability**: Support everything from small setups to large, distributed deployments with ease.\\n\\nAt its heart, ServiceRadar consists of four key components:\\n1. **Agent**: Runs on your monitored hosts, collecting service status via gRPC.\\n2. **Poller**: Coordinates monitoring across agents and networks.\\n3. **Core Service**: Processes data, powers the API, and triggers alerts.\\n4. **Web UI**: Delivers a sleek, modern dashboard for visualizing your infrastructure.\\n\\nWant to know more? Check out our [Architecture documentation](https://docs.serviceradar.io/docs/architecture) for a detailed breakdown.\\n\\n## Built for the Cloud, Rooted in Zero-Trust\\n\\nServiceRadar isn\u2019t just another monitoring tool\u2014it\u2019s a cloud-native solution designed with contemporary principles in mind. Here\u2019s what sets it apart:\\n\\n### Cloud-Native Design\\nServiceRadar embraces a distributed, stateless architecture that thrives in cloud environments. Whether you\u2019re running it on a single host or across a fleet of servers, its components communicate efficiently via gRPC, and the Web UI leverages Next.js for a fast, server-side rendered experience. This flexibility means you can deploy it where it makes sense for your setup\u2014be it a minimal all-in-one install or a high-availability cluster.\\n\\n### Zero-Trust Security\\nSecurity isn\u2019t an afterthought\u2014it\u2019s baked into ServiceRadar\u2019s DNA. We implement zero-trust principles through mutual TLS (mTLS) authentication between components, ensuring that every connection is verified and encrypted. The Web UI talks to the Core Service via a secure API key, and Nginx acts as a reverse proxy to keep things locked down. Curious about the details? Our [TLS Security guide](https://docs.serviceradar.io/docs/tls-security) walks you through it.\\n\\n### Zero-Touch Deployment (The Vision)\\nOur ultimate goal is to make ServiceRadar as hands-off as possible. We\u2019re working toward a zero-touch configuration deployment system\u2014imagine spinning up a new agent or poller with minimal manual setup. While we\u2019re not fully there yet, features like automatic API key generation and pre-configured Debian/RHEL packages are steps in that direction. Stay tuned as we refine this process to streamline your experience even further.\\n\\n## What\u2019s Next for ServiceRadar?\\n\\nThis blog will be your go-to resource for:\\n- **Announcements**: New releases, features, and updates.\\n- **Tutorials**: Step-by-step guides on setup, configuration, and advanced use cases.\\n- **Deep Dives**: Technical explorations of ServiceRadar\u2019s internals and design decisions.\\n- **Community Spotlight**: Stories from users and contributors shaping the project.\\n\\nWe\u2019re just getting started. In the coming weeks, expect posts on setting up your first ServiceRadar instance, securing it with mTLS, and integrating it with tools like Discord for alerting. Have a topic you\u2019d like us to cover? Let us know on [X](https://x.com/mfreeman451) or [GitHub](https://github.com/carverauto/serviceradar)!\\n\\n## Get Involved\\n\\nServiceRadar is an open-source project, and we\u2019d love for you to join us. Whether you\u2019re deploying it in your network, contributing code, or sharing feedback, your input helps us grow. Head over to our [GitHub repository](https://github.com/carverauto/serviceradar) to get started, or dive into the [Installation Guide](https://docs.serviceradar.io/docs/installation) to spin up your own instance today.\\n\\nThanks for joining us on this journey. Here\u2019s to keeping your services in sight, no matter where they are!\\n\\n\u2014 Michael Freeman, Open Source Software Engineer"}]}}')}}]);