"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3873],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var s=r(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},68730:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"configuration","title":"Configuration Basics","description":"ServiceRadar components are configured via JSON files in /etc/serviceradar/. This guide covers the essential configurations needed to get your monitoring system up and running.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/docs/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Configuration Basics"},"sidebar":"tutorialSidebar","previous":{"title":"Installation Guide","permalink":"/docs/installation"},"next":{"title":"Proton Configuration","permalink":"/docs/proton"}}');var i=r(74848),t=r(28453);const o={sidebar_position:3,title:"Configuration Basics"},c="Configuration Basics",l={},a=[{value:"Agent Configuration",id:"agent-configuration",level:2},{value:"Configuration Options:",id:"configuration-options",level:3},{value:"Poller Configuration",id:"poller-configuration",level:2},{value:"Configuration Options:",id:"configuration-options-1",level:3},{value:"Check Types:",id:"check-types",level:3},{value:"Core Configuration",id:"core-configuration",level:2},{value:"Configuration Options:",id:"configuration-options-2",level:3},{value:"NATS JetStream and KV Store Configuration",id:"nats-jetstream-and-kv-store-configuration",level:2},{value:"NATS Server Configuration",id:"nats-server-configuration",level:3},{value:"ServiceRadar KV Service Configuration",id:"serviceradar-kv-service-configuration",level:3},{value:"Configuration Options:",id:"configuration-options-3",level:3},{value:"Enable KV Store for Agents (Future Feature)",id:"enable-kv-store-for-agents-future-feature",level:3},{value:"Syncing the KV Store",id:"syncing-the-kv-store",level:3},{value:"Optional Checker Configurations",id:"optional-checker-configurations",level:2},{value:"SNMP Checker",id:"snmp-checker",level:3},{value:"Dusk Node Checker",id:"dusk-node-checker",level:3},{value:"Network Sweep",id:"network-sweep",level:3},{value:"rperf Network Checker",id:"rperf-network-checker",level:3},{value:"Web UI Configuration",id:"web-ui-configuration",level:2},{value:"Configuration Options:",id:"configuration-options-4",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"configuration-basics",children:"Configuration Basics"})}),"\n",(0,i.jsxs)(n.p,{children:["ServiceRadar components are configured via JSON files in ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/"}),". This guide covers the essential configurations needed to get your monitoring system up and running."]}),"\n",(0,i.jsx)(n.h2,{id:"agent-configuration",children:"Agent Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The agent runs on each monitored host and collects status information from services."}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/agent.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "checkers_dir": "/etc/serviceradar/checkers",\n  "listen_addr": "changeme:50051",\n  "service_type": "grpc",\n  "service_name": "AgentService",\n  "agent_id": "default-agent",\n  "agent_name": "changeme",\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "changeme",\n    "role": "agent",\n    "tls": {\n      "cert_file": "agent.pem",\n      "key_file": "agent-key.pem",\n      "ca_file": "root.pem"\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Replace ",(0,i.jsx)(n.code,{children:'"server_name": "changeme"'})," with the actual hostname or IP address of the poller that will connect to this agent when using mTLS security mode."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"checkers_dir"}),": Directory containing checker configurations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"listen_addr"}),": Address and port the agent listens on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"service_type"}),': Type of service (should be "grpc")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"service_name"}),': Name of the service (should be "AgentService")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"agent_id"}),": Unique identifier for this agent (should be unique across all agents)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"agent_name"}),": Name of this agent (can be any string)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"security"}),": Security settings","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mode"}),': Security mode ("none" or "mtls")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cert_dir"}),": Directory for TLS certificates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"server_name"}),": Hostname/IP of the poller (important for TLS)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"role"}),': Role of this component ("agent")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tls"}),": TLS settings","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cert_file"}),": Path to the agent's TLS certificate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"key_file"}),": Path to the agent's private key"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ca_file"}),": Path to the root CA certificate for verifying the poller"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"poller-configuration",children:"Poller Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The poller contacts agents to collect monitoring data and reports to the core service."}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/poller.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "agents": {\n    "local-agent": {\n      "address": "changeme:50051",\n      "security": {\n        "server_name": "changeme",\n        "mode": "mtls",\n        "cert_dir": "/etc/serviceradar/certs",\n        "tls": {\n          "cert_file": "agent.pem",\n          "key_file": "agent-key.pem",\n          "ca_file": "root.pem",\n          "client_ca_file": "root.pem"\n        }\n      },\n      "checks": [\n        {\n          "service_type": "process",\n          "service_name": "serviceradar-agent",\n          "details": "serviceradar-agent"\n        },\n        {\n          "service_type": "port",\n          "service_name": "SSH",\n          "details": "127.0.0.1:22"\n        },\n        {\n          "service_type": "snmp",\n          "service_name": "snmp",\n          "details": "changeme:50054"\n        },\n        {\n          "service_type": "icmp",\n          "service_name": "ping",\n          "details": "1.1.1.1"\n        },\n        {\n          "service_type": "sweep",\n          "service_name": "network_sweep",\n          "details": ""\n        },\n        {\n          "service_type": "grpc",\n          "service_name": "rperf-checker",\n          "details": "changeme:50059"\n        }\n      ]\n    }\n  },\n  "core_address": "<changeme - core ip/host>:50052",\n  "listen_addr": ":50053",\n  "poll_interval": "30s",\n  "poller_id": "demo-staging",\n  "service_name": "PollerService",\n  "service_type": "grpc",\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "<changeme - core ip/host>",\n    "role": "poller",\n    "tls": {\n      "key_file": "poller-key.pem",\n      "ca_file": "root.pem",\n      "client_ca_file": "root.pem"\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"}),' Replace "server_name": "changeme" in both the agents and top-level security sections with the hostname or IP address of the agent and core service, respectively. Also, replace "core_address": "changeme:50052" with the actual hostname or IP address of your core service.']}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options-1",children:"Configuration Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"agents"}),": Map of agents to monitor","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"address"}),": Network address of the agent (host",":port"," format)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"security"}),": Security settings for connecting to this agent"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"checks"}),": List of service checks to perform on this agent"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"core_address"}),": Address of the core service (host",":port"," format)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"listen_addr"}),": Address and port the poller listens on"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"poll_interval"}),': How often to poll agents (in Go duration format, e.g., "30s", "1m")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"poller_id"}),": Unique identifier for this poller (must match an entry in core's known_pollers)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"service_name"}),': Name of the service (should be "PollerService")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"service_type"}),': Type of service (should be "grpc")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"security"}),": Security settings for connecting to the core service"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"check-types",children:"Check Types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"process"}),": Check if a process is running"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"port"}),": Check if a TCP port is responding"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"icmp"}),": Ping a host"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"grpc"}),": Check a gRPC service"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"snmp"}),": Check via SNMP (requires snmp checker)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sweep"}),": Network sweep check"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-configuration",children:"Core Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The core service receives reports from pollers and provides the API backend."}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/core.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "listen_addr": ":8090",\n  "grpc_addr": ":50052",\n  "alert_threshold": "5m",\n  "known_pollers": ["demo-staging"],\n  "metrics": {\n    "enabled": true,\n    "retention": 100,\n    "max_nodes": 10000\n  },\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "role": "core",\n    "tls": {\n      "cert_file": "/etc/serviceradar/certs/core.pem",\n      "key_file": "/etc/serviceradar/certs/core-key.pem",\n      "ca_file": "/etc/serviceradar/certs/root.pem",\n      "client_ca_file": "/etc/serviceradar/certs/root.pem"\n    }\n  },\n  "cors": {\n    "allowed_origins": ["https://changeme", "http://localhost:3000"],\n    "allow_credentials": true\n  },\n  "auth": {\n    "jwt_secret": "your-secret-key-here",\n    "jwt_expiration": "24h",\n    "local_users": {\n      "admin": "$2a$10$7cTFzX5iSkSrxCeO3ZU3EOc/zy.cvGO9GhsE9jVo2i.tfooObaR"\n    }\n  },\n  "webhooks": [\n    {\n      "enabled": false,\n      "url": "https://your-webhook-url",\n      "cooldown": "15m",\n      "headers": [\n        {\n          "key": "Authorization",\n          "value": "Bearer your-token"\n        }\n      ]\n    },\n    {\n      "enabled": false,\n      "url": "https://discord.com/api/webhooks/changeme",\n      "cooldown": "15m",\n      "template": "{\\"embeds\\":[{\\"title\\":\\"{{.alert.Title}}\\",\\"description\\":\\"{{.alert.Message}}\\",\\"color\\":{{if eq .alert.Level \\"error\\"}}15158332{{else if eq .alert.Level \\"warning\\"}}16776960{{else}}3447003{{end}},\\"timestamp\\":\\"{{.alert.Timestamp}}\\",\\"fields\\":[{\\"name\\":\\"Node ID\\",\\"value\\":\\"{{.alert.NodeID}}\\",\\"inline\\":true}{{range $key, $value := .alert.Details}},{\\"name\\":\\"{{$key}}\\",\\"value\\":\\"{{$value}}\\",\\"inline\\":true}{{end}}]}]}"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," During installation, the core service automatically generates an API key, stored in ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/api.env"}),". This API key is used for secure communication between the web UI and the core API. The key is automatically injected into API requests by the web UI's middleware, ensuring secure communication without exposing the key to clients."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options-2",children:"Configuration Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"listen_addr"}),': Address and port for web dashboard API (default: ":8090")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"grpc_addr"}),': Address and port for gRPC service (default: ":50052")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"alert_threshold"}),': How long a service must be down before alerting (e.g., "5m" for 5 minutes)']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"known_pollers"}),": List of poller IDs that are allowed to connect"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"metrics"}),": Metrics collection settings","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled"}),": Whether to enable metrics collection (true/false)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"retention"}),": Number of data points to retain per metric"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_nodes"}),": Maximum number of monitored nodes to track"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"security"}),": Security settings (similar to agent)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"webhooks"}),": List of webhook configurations for alerts","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enabled"}),": Whether the webhook is enabled (true/false)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"url"}),": URL to send webhook notifications to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cooldown"}),': Minimum time between repeat notifications (e.g., "15m" for 15 minutes)']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"headers"}),": Custom HTTP headers to include in webhook requests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"template"}),": Custom JSON template for formatting webhook notifications"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"nats-jetstream-and-kv-store-configuration",children:"NATS JetStream and KV Store Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["If you've installed the NATS Server for the KV store (see ",(0,i.jsx)(n.a,{href:"/docs/installation",children:"Installation Guide"})," for setup instructions), you'll need to configure both the NATS Server and the ServiceRadar KV service."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important Note:"})," The ",(0,i.jsx)(n.code,{children:"serviceradar-nats"})," package provides configuration and systemd service files but does not install the NATS Server binary. You must first install the NATS Server binary as described in the Installation Guide before configuring the KV store."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"nats-server-configuration",children:"NATS Server Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The NATS Server configuration is located at ",(0,i.jsx)(n.code,{children:"/etc/nats/nats-server.conf"}),". The default configuration provided by the ",(0,i.jsx)(n.code,{children:"serviceradar-nats"})," package includes mTLS and JetStream support:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'# NATS Server Configuration for ServiceRadar KV Store\n\n# Listen on the default NATS port (restricted to localhost for security)\nlisten: 127.0.0.1:4222\n\n# Server identification\nserver_name: nats-serviceradar\n\n# Enable JetStream for KV store\njetstream {\n  # Directory to store JetStream data\n  store_dir: /var/lib/nats/jetstream\n  # Maximum storage size\n  max_memory_store: 1G\n  # Maximum disk storage\n  max_file_store: 10G\n}\n\n# Enable mTLS for secure communication\ntls {\n  # Path to the server certificate\n  cert_file: "/etc/serviceradar/certs/nats-server.pem"\n  # Path to the server private key\n  key_file: "/etc/serviceradar/certs/nats-server-key.pem"\n  # Path to the root CA certificate for verifying clients\n  ca_file: "/etc/serviceradar/certs/root.pem"\n\n  # Require client certificates (enables mTLS)\n  verify: true\n  # Require and verify client certificates\n  verify_and_map: true\n}\n\n# Logging settings\nlogfile: "/var/log/nats/nats.log"\ndebug: true\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Security Note:"})," By default, the NATS Server is configured to listen only on the loopback interface (127.0.0.1) for security. This prevents external network access to the NATS Server. If you need to access the NATS Server from other hosts, you can modify the ",(0,i.jsx)(n.code,{children:"listen"})," directive, but be sure to secure the server with proper TLS certificates and firewall rules."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After making changes to the NATS Server configuration, restart the service to apply them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart nats\n"})}),"\n",(0,i.jsx)(n.h3,{id:"serviceradar-kv-service-configuration",children:"ServiceRadar KV Service Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The ServiceRadar KV service connects to the NATS Server and provides a gRPC interface for other ServiceRadar components to access the KV store. Edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/kv.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "listen_addr": ":50057",\n  "nats_url": "nats://127.0.0.1:4222",\n  "security": {\n    "mode": "mtls",\n    "cert_dir": "/etc/serviceradar/certs",\n    "server_name": "changeme",\n    "role": "kv",\n    "tls": {\n      "cert_file": "kv.pem",\n      "key_file": "kv-key.pem",\n      "ca_file": "root.pem",\n      "client_ca_file": "root.pem"\n    }\n  },\n  "rbac": {\n    "roles": [\n      {"identity": "CN=changeme,O=ServiceRadar", "role": "reader"}\n    ]\n  },\n  "bucket": "serviceradar-kv"\n}\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The ",(0,i.jsx)(n.code,{children:"nats_url"})," field must match the NATS Server's listen address configuration. The format is ",(0,i.jsx)(n.code,{children:"nats://<host>:<port>"}),". The default NATS Server configuration listens on 127.0.0.1 (localhost) port 4222, so the default ",(0,i.jsx)(n.code,{children:"nats_url"}),' value of "nats://localhost:4222" is correct. If you\'ve modified the NATS Server configuration to listen on a different address or port, update this field accordingly.']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After making changes to the KV service configuration, restart the service to apply them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl restart serviceradar-kv\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options-3",children:"Configuration Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"listen_addr"}),": Address and port for the KV service gRPC API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"nats_url"}),": URL for connecting to the NATS Server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"security"}),": Security settings","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mode"}),': Security mode ("none" or "mtls")']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cert_dir"}),": Directory for TLS certificates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"server_name"}),": Server name for certificate verification"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"role"}),': Role of this component ("server")']}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rbac"}),": Role-based access control settings","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"roles"}),": List of role definitions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"identity"}),": Certificate subject that identifies the client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"role"}),': Role assigned to the client ("reader" or "writer")']}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"enable-kv-store-for-agents-future-feature",children:"Enable KV Store for Agents (Future Feature)"}),"\n",(0,i.jsxs)(n.p,{children:["To configure agents to use the KV store for dynamic configuration, you need to set the ",(0,i.jsx)(n.code,{children:"CONFIG_SOURCE"})," environment variable in the agent's systemd service. This allows the agent to receive configuration updates from the KV store without requiring a restart."]}),"\n",(0,i.jsx)(n.p,{children:"Edit the agent's systemd service file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl edit serviceradar-agent\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add the following lines:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:'[Service]\nEnvironment="CONFIG_SOURCE=kv"\n'})}),"\n",(0,i.jsx)(n.p,{children:"This tells the agent to use the KV store for configuration, using the connection details configured in the main agent configuration file."}),"\n",(0,i.jsx)(n.p,{children:"After making this change, restart the agent service to apply the change:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\nsudo systemctl restart serviceradar-agent\n"})}),"\n",(0,i.jsx)(n.p,{children:"Save the file and reload the systemd configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\n"})}),"\n",(0,i.jsx)(n.h3,{id:"syncing-the-kv-store",children:"Syncing the KV Store"}),"\n",(0,i.jsxs)(n.p,{children:["Checkout the ",(0,i.jsx)(n.a,{href:"/docs/sync",children:"Syncing the KV Store"})," documentation for details on how to sync the KV store with the ServiceRadar components."]}),"\n",(0,i.jsx)(n.h2,{id:"optional-checker-configurations",children:"Optional Checker Configurations"}),"\n",(0,i.jsx)(n.h3,{id:"snmp-checker",children:"SNMP Checker"}),"\n",(0,i.jsxs)(n.p,{children:["For monitoring network devices via SNMP, edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/checkers/snmp.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "node_address": "localhost:50051",\n  "listen_addr": ":50080",\n  "security": {\n    "server_name": "changeme",\n    "mode": "none",\n    "role": "checker",\n    "cert_dir": "/etc/serviceradar/certs"\n  },\n  "timeout": "30s",\n  "targets": [\n    {\n      "name": "router",\n      "host": "192.168.1.1",\n      "port": 161,\n      "community": "public",\n      "version": "v2c",\n      "interval": "30s",\n      "retries": 2,\n      "oids": [\n        {\n          "oid": ".1.3.6.1.2.1.2.2.1.10.4",\n          "name": "ifInOctets_4",\n          "type": "counter",\n          "scale": 1.0\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"dusk-node-checker",children:"Dusk Node Checker"}),"\n",(0,i.jsxs)(n.p,{children:["For monitoring Dusk nodes, edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/checkers/dusk.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "dusk",\n  "type": "grpc",\n  "node_address": "localhost:8080",\n  "listen_addr": ":50082",\n  "timeout": "5m",\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "role": "checker"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"network-sweep",children:"Network Sweep"}),"\n",(0,i.jsxs)(n.p,{children:["For network scanning, edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/checkers/sweep/sweep.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "networks": ["192.168.2.0/24", "192.168.3.1/32"],\n  "ports": [22, 80, 443, 3306, 5432, 6379, 8080, 8443],\n  "sweep_modes": ["icmp", "tcp"],\n  "interval": "5m",\n  "concurrency": 100,\n  "timeout": "10s"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rperf-network-checker",children:"rperf Network Checker"}),"\n",(0,i.jsxs)(n.p,{children:["For network performance monitoring, edit ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/checkers/rperf.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "listen_addr": "0.0.0.0:50081",\n  "default_poll_interval": 300,\n  "targets": [\n    {\n      "name": "Network Test",\n      "address": "<server-ip>",\n      "port": 5199,\n      "protocol": "tcp",\n      "poll_interval": 300,\n      "tcp_port_pool": "5200-5210"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For more information on the RPerf bandwidth checker, see the ",(0,i.jsx)(n.a,{href:"/docs/rperf-monitoring",children:"rperf documentation"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"web-ui-configuration",children:"Web UI Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The Web UI configuration is stored in ",(0,i.jsx)(n.code,{children:"/etc/serviceradar/web.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "port": 3000,\n  "host": "0.0.0.0",\n  "api_url": "http://localhost:8090"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-options-4",children:"Configuration Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"port"}),": The port for the Next.js application (default: 3000)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"host"}),": The host address to bind to"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_url"}),": The URL for the core API service"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Security Note:"}),' Although the Web UI listens on port 3000 bound to all interfaces ("0.0.0.0"), this port is typically not exposed externally. Instead, Nginx proxies requests from port 80 to the Next.js service on port 3000, providing an additional security layer. You do not need to open port 3000 in your firewall for external access.']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed information on the Web UI configuration, see the ",(0,i.jsx)(n.a,{href:"/docs/web-ui",children:"Web UI Configuration"})," documentation."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"After configuring your components:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Restart services to apply changes:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Basic components\nsudo systemctl restart serviceradar-agent\nsudo systemctl restart serviceradar-poller\nsudo systemctl restart serviceradar-core\n\n# For KV store (if installed)\nsudo systemctl restart nats\nsudo systemctl restart serviceradar-kv\n\n# For Web UI (if installed)\nsudo systemctl restart serviceradar-web\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Verify the services are running:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Basic components\nsudo systemctl status serviceradar-agent\nsudo systemctl status serviceradar-poller\nsudo systemctl status serviceradar-core\n\n# For KV store (if installed)\nsudo systemctl status nats\nsudo systemctl status serviceradar-kv\n\n# For Web UI (if installed)\nsudo systemctl status serviceradar-web\nsudo systemctl status nginx  # Nginx is installed as a dependency of the serviceradar-web package\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Visit the web dashboard by navigating to either ",(0,i.jsx)(n.code,{children:"http://YOUR_SERVER_IP:8090"})," (if accessing the core service directly) or ",(0,i.jsx)(n.code,{children:"http://YOUR_SERVER_IP"})," (if using the Web UI with Nginx). Remember to replace YOUR_SERVER_IP with the actual IP address or hostname of your server."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Review ",(0,i.jsx)(n.a,{href:"/docs/tls-security",children:"TLS Security"})," to secure your components"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);