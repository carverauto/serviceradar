"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3487],{28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>s});var n=t(96540);const c={},i=n.createContext(c);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),n.createElement(i.Provider,{value:r},e.children)}},80400:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"custom-checkers","title":"Creating a Custom Checker Plugin","description":"ServiceRadar\'s modular architecture allows you to extend its monitoring capabilities by creating custom checkers (plugins). These checkers integrate with the Agent to monitor specific services or systems and report their status via gRPC. This tutorial walks you through the process of creating, packaging, and deploying a custom checker plugin, using the existing Dusk checker as an example.","source":"@site/docs/custom-checkers.md","sourceDirName":".","slug":"/custom-checkers","permalink":"/docs/custom-checkers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Creating a Custom Checker Plugin"},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/docs/architecture"},"next":{"title":"Network Performance Monitoring with rperf","permalink":"/docs/rperf-monitoring"}}');var c=t(74848),i=t(28453);const a={sidebar_position:7,title:"Creating a Custom Checker Plugin"},s="Creating a Custom Checker Plugin for ServiceRadar",o={},h=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Understand the Checker Architecture",id:"step-1-understand-the-checker-architecture",level:2},{value:"Step 2: Write a Custom Checker",id:"step-2-write-a-custom-checker",level:2},{value:"Directory Structure",id:"directory-structure",level:3},{value:"1. Define the Checker Logic (pkg/checker/weather/weather.go)",id:"1-define-the-checker-logic-pkgcheckerweatherweathergo",level:3},{value:"2. Create the Main Program (cmd/checkers/weather/main.go)",id:"2-create-the-main-program-cmdcheckersweathermaingo",level:3},{value:"Explanation",id:"explanation",level:4},{value:"Step 3: Configure the Checker",id:"step-3-configure-the-checker",level:2},{value:"Step 4: Package the Checker as a Debian Package",id:"step-4-package-the-checker-as-a-debian-package",level:2},{value:"Packaging Script (scripts/setup-deb-weather-checker.sh)",id:"packaging-script-scriptssetup-deb-weather-checkersh",level:3},{value:"Step 5: Deploy and Integrate",id:"step-5-deploy-and-integrate",level:2},{value:"Install the Package:",id:"install-the-package",level:3},{value:"Restart Services:",id:"restart-services",level:3},{value:"Verify Operation:",id:"verify-operation",level:3},{value:"Secure with mTLS (Optional):",id:"secure-with-mtls-optional",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(r.header,{children:(0,c.jsx)(r.h1,{id:"creating-a-custom-checker-plugin-for-serviceradar",children:"Creating a Custom Checker Plugin for ServiceRadar"})}),"\n",(0,c.jsx)(r.p,{children:"ServiceRadar's modular architecture allows you to extend its monitoring capabilities by creating custom checkers (plugins). These checkers integrate with the Agent to monitor specific services or systems and report their status via gRPC. This tutorial walks you through the process of creating, packaging, and deploying a custom checker plugin, using the existing Dusk checker as an example."}),"\n",(0,c.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,c.jsx)(r.p,{children:"A checker plugin in ServiceRadar is a standalone binary that:"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Implements the Checker interface (and optionally StatusProvider or HealthChecker) from the checker package"}),"\n",(0,c.jsx)(r.li,{children:"Communicates with the Agent via gRPC or other supported protocols"}),"\n",(0,c.jsxs)(r.li,{children:["Can be configured via JSON files in ",(0,c.jsx)(r.code,{children:"/etc/serviceradar/checkers/"})]}),"\n",(0,c.jsx)(r.li,{children:"Runs as a systemd service for continuous operation"}),"\n"]}),"\n",(0,c.jsx)(r.p,{children:"This guide covers:"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Understanding the checker architecture"}),"\n",(0,c.jsx)(r.li,{children:"Writing a custom checker in Go"}),"\n",(0,c.jsx)(r.li,{children:"Configuring the checker"}),"\n",(0,c.jsx)(r.li,{children:"Packaging it as a Debian package"}),"\n",(0,c.jsx)(r.li,{children:"Deploying and integrating it with ServiceRadar"}),"\n"]}),"\n",(0,c.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:["Go 1.18+ installed (see ",(0,c.jsx)(r.a,{href:"/docs/installation",children:"Installation Guide"})," for build setup)"]}),"\n",(0,c.jsxs)(r.li,{children:["Basic understanding of gRPC and ServiceRadar's architecture (see ",(0,c.jsx)(r.a,{href:"/docs/architecture",children:"Architecture"}),")"]}),"\n",(0,c.jsx)(r.li,{children:"Access to a ServiceRadar deployment with an Agent running"}),"\n",(0,c.jsx)(r.li,{children:"Root or sudo privileges for deployment"}),"\n"]}),"\n",(0,c.jsx)(r.h2,{id:"step-1-understand-the-checker-architecture",children:"Step 1: Understand the Checker Architecture"}),"\n",(0,c.jsx)(r.p,{children:"ServiceRadar uses a plugin-based system for checkers, managed through the checker.Registry. The core interfaces are defined in pkg/checker/interfaces.go:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:"// Checker defines how to check a service's status.\ntype Checker interface {\n    Check(ctx context.Context) (bool, string)\n}\n\n// StatusProvider allows plugins to provide detailed status data.\ntype StatusProvider interface {\n    GetStatusData() json.RawMessage\n}\n\n// HealthChecker combines basic checking with detailed status.\ntype HealthChecker interface {\n    Checker\n    StatusProvider\n}\n"})}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"Check(ctx context.Context) (bool, string)"}),": Returns the service's availability (true/false) and a status message."]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.code,{children:"GetStatusData() json.RawMessage"}),": (Optional) Returns detailed status data as JSON."]}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["The checker.Registry allows dynamic registration of checker factories, which are called by the Agent based on the service_type in the Poller's configuration (e.g., ",(0,c.jsx)(r.code,{children:"/etc/serviceradar/poller.json"}),")."]}),"\n",(0,c.jsx)(r.h2,{id:"step-2-write-a-custom-checker",children:"Step 2: Write a Custom Checker"}),"\n",(0,c.jsx)(r.p,{children:"Let's create a simple checker to monitor a hypothetical \"Weather Service\" API, which returns weather data via HTTP. The checker will verify the API's availability and provide status details."}),"\n",(0,c.jsx)(r.h3,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{children:"serviceradar/\n\u251c\u2500\u2500 cmd/\n\u2502   \u2514\u2500\u2500 checkers/\n\u2502       \u2514\u2500\u2500 weather/\n\u2502           \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 pkg/\n\u2502   \u2514\u2500\u2500 checker/\n\u2502       \u2514\u2500\u2500 weather/\n\u2502           \u2514\u2500\u2500 weather.go\n\u2514\u2500\u2500 proto/\n    \u2514\u2500\u2500 (existing protobuf files)\n"})}),"\n",(0,c.jsx)(r.h3,{id:"1-define-the-checker-logic-pkgcheckerweatherweathergo",children:"1. Define the Checker Logic (pkg/checker/weather/weather.go)"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package weather\n\nimport (\n    "context"\n    "encoding/json"\n    "fmt"\n    "net/http"\n    "time"\n\n    "github.com/carverauto/serviceradar/pkg/checker"\n)\n\n// Config holds the weather checker configuration.\ntype Config struct {\n    Endpoint string        `json:"endpoint"`\n    Timeout  time.Duration `json:"timeout"`\n}\n\n// WeatherChecker implements the HealthChecker interface.\ntype WeatherChecker struct {\n    config Config\n}\n\n// NewWeatherChecker creates a new WeatherChecker instance.\nfunc NewWeatherChecker(config Config) *WeatherChecker {\n    return &WeatherChecker{config: config}\n}\n\n// Check verifies the weather service availability.\nfunc (w *WeatherChecker) Check(ctx context.Context) (bool, string) {\n    client := &http.Client{Timeout: w.config.Timeout}\n    req, err := http.NewRequestWithContext(ctx, "GET", w.config.Endpoint, nil)\n    if err != nil {\n        return false, fmt.Sprintf("Failed to create request: %v", err)\n    }\n\n    resp, err := client.Do(req)\n    if err != nil {\n        return false, fmt.Sprintf("Weather service unavailable: %v", err)\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        return false, fmt.Sprintf("Weather service returned status: %d", resp.StatusCode)\n    }\n\n    return true, "Weather service is operational"\n}\n\n// GetStatusData provides detailed weather status as JSON.\nfunc (w *WeatherChecker) GetStatusData() json.RawMessage {\n    // Mock data for this example\n    data := map[string]interface{}{\n        "status":      "healthy",\n        "last_checked": time.Now().Format(time.RFC3339),\n    }\n    jsonData, _ := json.Marshal(data)\n    return jsonData\n}\n\n// Factory creates a new WeatherChecker instance for the registry.\nfunc Factory(ctx context.Context, serviceName, details string) (checker.Checker, error) {\n    var config Config\n    if err := json.Unmarshal([]byte(details), &config); err != nil {\n        return nil, fmt.Errorf("Failed to parse config: %v", err)\n    }\n    if config.Endpoint == "" {\n        config.Endpoint = "https://api.weather.example.com" // Default endpoint\n    }\n    if config.Timeout == 0 {\n        config.Timeout = 10 * time.Second // Default timeout\n    }\n    return NewWeatherChecker(config), nil\n}\n'})}),"\n",(0,c.jsx)(r.h3,{id:"2-create-the-main-program-cmdcheckersweathermaingo",children:"2. Create the Main Program (cmd/checkers/weather/main.go)"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-go",children:'package main\n\nimport (\n\t"context"\n\t"flag"\n\t"fmt"\n\t"log"\n\n\t"github.com/carverauto/serviceradar/pkg/checker/weather"\n\t"github.com/carverauto/serviceradar/pkg/config"\n\t"github.com/carverauto/serviceradar/pkg/lifecycle"\n\t"github.com/carverauto/serviceradar/proto"\n\t"google.golang.org/grpc"\n)\n\nvar (\n\terrFailedToLoadConfig = fmt.Errorf("failed to load config")\n)\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatalf("Fatal error: %v", err)\n\t}\n}\n\nfunc run() error {\n\tlog.Printf("Starting Weather checker...")\n\n\t// Parse command line flags\n\tconfigPath := flag.String("config", "/etc/serviceradar/checkers/weather.json", "Path to config file")\n\tflag.Parse()\n\n\t// Setup a context we can use for loading the config and running the server\n\tctx := context.Background()\n\n\t// Initialize configuration loader\n\tcfgLoader := config.NewConfig()\n\n\t// Load configuration with context\n\tvar cfg weather.Config\n\n\tif err := cfgLoader.LoadAndValidate(ctx, *configPath, &cfg); err != nil {\n\t\treturn fmt.Errorf("%w: %w", errFailedToLoadConfig, err)\n\t}\n\n\t// Create the checker\n\tchecker := &weather.WeatherChecker{\n\t\tConfig: cfg,\n\t\tDone:   make(chan struct{}),\n\t}\n\n\t// Create health server and API service\n\tweatherService := weather.NewWeatherService(checker)\n\n\t// Create gRPC service registrar\n\tregisterServices := func(s *grpc.Server) error {\n\t\tproto.RegisterAgentServiceServer(s, weatherService)\n\t\treturn nil\n\t}\n\n\t// Create and configure service options\n\topts := lifecycle.ServerOptions{\n\t\tListenAddr:           cfg.ListenAddr,\n\t\tService:              &weatherService{checker: checker},\n\t\tRegisterGRPCServices: []lifecycle.GRPCServiceRegistrar{registerServices},\n\t\tEnableHealthCheck:    true,\n\t\tSecurity:             cfg.Security,\n\t}\n\n\t// Run service with lifecycle management\n\tif err := lifecycle.RunServer(ctx, &opts); err != nil {\n\t\treturn fmt.Errorf("server error: %w", err)\n\t}\n\n\treturn nil\n}\n\n// weatherService wraps the WeatherChecker to implement lifecycle.Service.\ntype weatherService struct {\n\tchecker *weather.WeatherChecker\n}\n\nfunc (s *weatherService) Start(ctx context.Context) error {\n\tlog.Printf("Starting Weather service...")\n\n\treturn s.checker.StartMonitoring(ctx)\n}\n\nfunc (s *weatherService) Stop(_ context.Context) error {\n\tlog.Printf("Stopping Weather service...")\n\tclose(s.checker.Done)\n\n\treturn nil\n}\n'})}),"\n",(0,c.jsx)(r.h4,{id:"explanation",children:"Explanation"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"Checker Logic"}),": The WeatherChecker sends an HTTP request to the weather API and checks the response. It also provides status data as JSON."]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"gRPC Server"}),": The main.go sets up a gRPC server to expose the checker's health status, integrating with ServiceRadar's Agent."]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"Factory"}),": The Factory function allows the Agent to instantiate the checker dynamically based on the Poller's configuration."]}),"\n"]}),"\n",(0,c.jsx)(r.h2,{id:"step-3-configure-the-checker",children:"Step 3: Configure the Checker"}),"\n",(0,c.jsxs)(r.p,{children:["Create a configuration file at ",(0,c.jsx)(r.code,{children:"/etc/serviceradar/checkers/weather.json"}),":"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-json",children:'{\n  "endpoint": "https://api.weather.example.com",\n  "timeout": "10s",\n  "listen_addr": ":50055",\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "role": "checker"\n  }\n}\n'})}),"\n",(0,c.jsxs)(r.p,{children:["Update the Poller configuration (",(0,c.jsx)(r.code,{children:"/etc/serviceradar/poller.json"}),") to include the new checker:"]}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-json",children:'{\n  "agents": {\n    "local-agent": {\n      "address": "localhost:50051",\n      "security": { "mode": "none" },\n      "checks": [\n        {\n          "service_type": "weather",\n          "service_name": "weather-api",\n          "details": "{\\"endpoint\\": \\"https://api.weather.example.com\\", \\"timeout\\": \\"10s\\"}"\n        }\n      ]\n    }\n  },\n  "core_address": "localhost:50052",\n  "listen_addr": ":50053",\n  "poll_interval": "30s",\n  "poller_id": "my-poller",\n  "service_name": "PollerService",\n  "service_type": "grpc",\n  "security": { "mode": "none" }\n}\n'})}),"\n",(0,c.jsx)(r.h2,{id:"step-4-package-the-checker-as-a-debian-package",children:"Step 4: Package the Checker as a Debian Package"}),"\n",(0,c.jsx)(r.p,{children:"Use the existing packaging scripts (e.g., setup-deb-dusk-checker.sh) as a template."}),"\n",(0,c.jsx)(r.h3,{id:"packaging-script-scriptssetup-deb-weather-checkersh",children:"Packaging Script (scripts/setup-deb-weather-checker.sh)"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:'#!/bin/bash\nset -e\n\nVERSION=${VERSION:-1.0.0}\necho "Building serviceradar-weather-checker version ${VERSION}"\n\necho "Setting up package structure..."\nPKG_ROOT="serviceradar-weather-checker_${VERSION}"\nmkdir -p "${PKG_ROOT}/DEBIAN"\nmkdir -p "${PKG_ROOT}/usr/local/bin"\nmkdir -p "${PKG_ROOT}/etc/serviceradar/checkers"\nmkdir -p "${PKG_ROOT}/lib/systemd/system"\n\necho "Building Go binary..."\nGOOS=linux GOARCH=amd64 go build -o "${PKG_ROOT}/usr/local/bin/weather-checker" ./cmd/checkers/weather\n\necho "Creating package files..."\ncat > "${PKG_ROOT}/DEBIAN/control" << EOF\nPackage: serviceradar-weather-checker\nVersion: ${VERSION}\nSection: utils\nPriority: optional\nArchitecture: amd64\nDepends: systemd\nMaintainer: Your Name <your.email@example.com>\nDescription: ServiceRadar Weather API checker\n Provides monitoring capabilities for weather APIs.\nConfig: /etc/serviceradar/checkers/weather.json\nEOF\n\ncat > "${PKG_ROOT}/DEBIAN/conffiles" << EOF\n/etc/serviceradar/checkers/weather.json\nEOF\n\ncat > "${PKG_ROOT}/lib/systemd/system/serviceradar-weather-checker.service" << EOF\n[Unit]\nDescription=ServiceRadar Weather Checker\nAfter=network.target\n\n[Service]\nType=simple\nUser=serviceradar\nExecStart=/usr/local/bin/weather-checker -config /etc/serviceradar/checkers/weather.json\nRestart=always\nRestartSec=10\nLimitNPROC=512\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\ncat > "${PKG_ROOT}/etc/serviceradar/checkers/weather.json" << EOF\n{\n  "endpoint": "https://api.weather.example.com",\n  "timeout": "10s",\n  "listen_addr": ":50055",\n  "security": {\n    "mode": "none",\n    "cert_dir": "/etc/serviceradar/certs",\n    "role": "checker"\n  }\n}\nEOF\n\ncat > "${PKG_ROOT}/DEBIAN/postinst" << EOF\n#!/bin/bash\nset -e\nif ! id -u serviceradar >/dev/null 2>&1; then\n    useradd --system --no-create-home --shell /usr/sbin/nologin serviceradar\nfi\nchown -R serviceradar:serviceradar /etc/serviceradar\nchmod 755 /usr/local/bin/weather-checker\nsystemctl daemon-reload\nsystemctl enable serviceradar-weather-checker\nsystemctl start serviceradar-weather-checker\nexit 0\nEOF\n\ncat > "${PKG_ROOT}/DEBIAN/prerm" << EOF\n#!/bin/bash\nset -e\nsystemctl stop serviceradar-weather-checker || true\nsystemctl disable serviceradar-weather-checker || true\nexit 0\nEOF\n\nchmod 755 "${PKG_ROOT}/DEBIAN/postinst" "${PKG_ROOT}/DEBIAN/prerm"\n\necho "Building Debian package..."\nmkdir -p ./release-artifacts\ndpkg-deb --root-owner-group --build "${PKG_ROOT}"\nmv "${PKG_ROOT}.deb" "./release-artifacts/"\necho "Package built: release-artifacts/${PKG_ROOT}.deb"\n'})}),"\n",(0,c.jsx)(r.p,{children:"Run the script:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"chmod +x scripts/setup-deb-weather-checker.sh\n./scripts/setup-deb-weather-checker.sh\n"})}),"\n",(0,c.jsx)(r.h2,{id:"step-5-deploy-and-integrate",children:"Step 5: Deploy and Integrate"}),"\n",(0,c.jsx)(r.h3,{id:"install-the-package",children:"Install the Package:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"sudo dpkg -i release-artifacts/serviceradar-weather-checker_1.0.0.deb\n"})}),"\n",(0,c.jsx)(r.h3,{id:"restart-services",children:"Restart Services:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"sudo systemctl restart serviceradar-agent\nsudo systemctl restart serviceradar-poller\n"})}),"\n",(0,c.jsx)(r.h3,{id:"verify-operation",children:"Verify Operation:"}),"\n",(0,c.jsx)(r.p,{children:"Check the checker's status:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"sudo systemctl status serviceradar-weather-checker\n"})}),"\n",(0,c.jsx)(r.p,{children:"Use grpcurl to test the health endpoint:"}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{className:"language-bash",children:"grpcurl -plaintext localhost:50055 grpc.health.v1.Health/Check\n"})}),"\n",(0,c.jsx)(r.h3,{id:"secure-with-mtls-optional",children:"Secure with mTLS (Optional):"}),"\n",(0,c.jsxs)(r.p,{children:["Update the security section in weather.json and generate certificates as described in ",(0,c.jsx)(r.a,{href:"/docs/tls-security",children:"TLS Security"}),"."]}),"\n",(0,c.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"Service Won't Start"}),": Check logs with ",(0,c.jsx)(r.code,{children:"journalctl -u serviceradar-weather-checker"}),"."]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"Agent Can't Find Checker"}),": Ensure the service_type matches the registry key (weather) and the checker is running."]}),"\n",(0,c.jsxs)(r.li,{children:[(0,c.jsx)(r.strong,{children:"gRPC Errors"}),": Verify the port (",(0,c.jsx)(r.code,{children:":50055"}),") is not in use and is open in your firewall."]}),"\n"]}),"\n",(0,c.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,c.jsxs)(r.ul,{children:["\n",(0,c.jsx)(r.li,{children:"Enhance your checker with additional metrics or status data."}),"\n",(0,c.jsxs)(r.li,{children:["Explore integrating with the KV store for dynamic configuration (see ",(0,c.jsx)(r.a,{href:"/docs/configuration",children:"Configuration Basics"}),")."]}),"\n",(0,c.jsx)(r.li,{children:"Contribute your checker to the ServiceRadar community!"}),"\n"]}),"\n",(0,c.jsxs)(r.p,{children:["For more details, refer to the ",(0,c.jsx)(r.a,{href:"/docs/architecture",children:"Architecture"})," and ",(0,c.jsx)(r.a,{href:"/docs/tls-security",children:"TLS Security"})," documentation."]})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,c.jsx)(r,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);