# Use pre-built base image
FROM ghcr.io/carverauto/rockylinux9-rust-rpm-base:latest AS builder

ARG VERSION=1.0.33
ARG RELEASE=1
ARG COMPONENT=zen
ARG BINARY_PATH=cmd/consumers/zen

# Set workspace root as working directory so Cargo can resolve workspace deps
WORKDIR /src

RUN rustup update stable && rustup default stable

# Print debug information
RUN echo "BINARY_PATH=${BINARY_PATH}" && \
    echo "COMPONENT=${COMPONENT}" && \
    echo "VERSION=${VERSION}" && \
    echo "RELEASE=${RELEASE}" && \
    echo "Current directory: $(pwd)" && \
    ls -la /src || echo "No /src directory yet"

# Copy workspace manifest first so workspace dependencies resolve
COPY Cargo.toml ./
COPY Cargo.lock ./

# Include shared protobuf definitions for build.rs resolution
RUN mkdir -p proto
COPY proto ./proto/
RUN mkdir -p cmd/otel/proto
COPY cmd/otel/proto ./cmd/otel/proto/

# Copy the zen crate sources into workspace
COPY ${BINARY_PATH} ./${BINARY_PATH}

# Build the Rust binary with cache mounts and copy artifacts out
RUN --mount=type=cache,target=/root/.cargo/registry \
    --mount=type=cache,target=/root/.cargo/git \
    --mount=type=cache,target=/tmp/target \
    echo "Building Rust binary..." && \
    CARGO_TARGET_DIR=/tmp/target cargo build --release --target x86_64-unknown-linux-gnu --verbose -p serviceradar-zen && \
    echo "Build completed successfully" && \
    ls -la /tmp/target/x86_64-unknown-linux-gnu/release/ && \
    mkdir -p ${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release && \
    cp /tmp/target/x86_64-unknown-linux-gnu/release/serviceradar-zen /tmp/target/x86_64-unknown-linux-gnu/release/zen-put-rule ${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release/ && \
    echo "Copied binaries to persistent location:" && \
    ls -la ${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release/

# Set up RPM build environment
WORKDIR /root/rpmbuild
COPY packaging/specs/serviceradar-${COMPONENT}.spec SPECS/
RUN mkdir -p SOURCES/${COMPONENT}/systemd SOURCES/${COMPONENT}/config
RUN mkdir -p SOURCES/${COMPONENT}/systemd \
    SOURCES/${COMPONENT}/config \
    SOURCES/${COMPONENT}/rules
COPY packaging/${COMPONENT}/systemd/serviceradar-${COMPONENT}.service SOURCES/${COMPONENT}/systemd/
COPY packaging/${COMPONENT}/config/zen-consumer.json SOURCES/${COMPONENT}/config/
COPY packaging/${COMPONENT}/rules/*.json SOURCES/${COMPONENT}/rules/

# Build the RPM
# Sanitize VERSION for RPM (remove pre-release suffixes like -pre1)
RUN RPM_VERSION=$(echo ${VERSION} | sed 's/-.*//') && \
    sed -i "s/%{version}/${RPM_VERSION}/g" SPECS/serviceradar-${COMPONENT}.spec && \
    sed -i "s/%{release}/${RELEASE}/g" SPECS/serviceradar-${COMPONENT}.spec && \
    mkdir -p BUILD && \
    echo "Listing binary directory contents:" && \
    ls -la /src/${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release/ && \
    cp /src/${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release/serviceradar-zen BUILD/serviceradar-zen && \
    cp /src/${BINARY_PATH}/target/x86_64-unknown-linux-gnu/release/zen-put-rule BUILD/zen-put-rule && \
    rpmbuild -bb SPECS/serviceradar-${COMPONENT}.spec && \
    echo "Checking RPM build output:" && \
    find RPMS -type f -name "*.rpm" && \
    mkdir -p /output && \
    find RPMS -type f -name "*.rpm" -exec cp {} /output/ \; && \
    ls -la /output/

# Final stage using RockyLinux
FROM rockylinux:9

WORKDIR /rpms
# Copy ALL RPM files from the builder's output directory
COPY --from=builder /output/*.rpm ./
# Add validation step
RUN ls -la /rpms/

CMD ["ls", "-la", "/rpms/"]
# Install build dependencies (protoc for tonic-build)
RUN dnf install -y protobuf-compiler && \
    dnf clean all
