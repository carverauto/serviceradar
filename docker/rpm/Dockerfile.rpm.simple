# Copyright 2023 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Stage 1: Build the Go binary
FROM golang:latest AS builder

# Set arguments
ARG COMPONENT
ARG BINARY_PATH
ARG VERSION

# Set up build environment
WORKDIR /src

# Copy source files and debug context
COPY . .
RUN echo "===== DEBUG INFO =====" && \
    echo "COMPONENT: ${COMPONENT}" && \
    echo "BINARY_PATH: ${BINARY_PATH}" && \
    echo "VERSION: ${VERSION}" && \
    echo "===== DIRECTORY STRUCTURE =====" && \
    ls -la && \
    echo "===== GO MODULE =====" && \
    cat go.mod && \
    echo "===== SOURCE PATH =====" && \
    find . -name "*.go" | grep -E "${BINARY_PATH}" && \
    echo "===== COMPONENT SOURCE =====" && \
    ls -la ${BINARY_PATH} || echo "Path not found: ${BINARY_PATH}"

# Build the binary
RUN mkdir -p /build-out && \
    if [ -z "${BINARY_PATH}" ]; then \
        echo "No build path provided; skipping binary compilation for ${COMPONENT}"; \
        touch /build-out/.keep; \
    elif [ -d "${BINARY_PATH}" ] && [ -f "${BINARY_PATH}/main.go" ]; then \
        echo "Building from ${BINARY_PATH}" && \
        cd ${BINARY_PATH} && ls -la && \
        cd /src && \
        GOOS=linux GOARCH=amd64 go build -v -o "/build-out/serviceradar-${COMPONENT}" "./${BINARY_PATH}"; \
    else \
        echo "ERROR: Could not find source code in ${BINARY_PATH}" && \
        find . -name "main.go" | grep -E "checkers|${COMPONENT}" && \
        exit 1; \
    fi && \
    echo "Build completed successfully" && \
    ls -la /build-out

# Stage 2: Create RPM
FROM rockylinux:9 AS rpm-builder

# Update and install RPM build tools
RUN dnf clean all && \
    dnf update -y && \
    dnf install -y --nogpgcheck --skip-broken \
    rpm-build \
    rpmdevtools \
    systemd-devel \
    systemd-rpm-macros \
    libcap-devel \
    policycoreutils-python-utils \
    gcc \
    make

# Set up RPM build environment
RUN rpmdev-setuptree

# Create necessary directories
RUN mkdir -p /root/rpmbuild/SOURCES/systemd \
    /root/rpmbuild/SOURCES/config \
    /root/rpmbuild/SOURCES/config/checkers \
    /root/rpmbuild/SOURCES/selinux

# Copy built binary
ARG COMPONENT
COPY --from=builder /build-out/* /root/rpmbuild/BUILD/

# Copy packaging files
COPY packaging /root/rpmbuild/SOURCES/packaging/

# Copy spec file
COPY packaging/specs/serviceradar-${COMPONENT}.spec /root/rpmbuild/SPECS/

# Debug packaging files
RUN echo "===== PACKAGING FILES =====" && \
    find /root/rpmbuild/SOURCES/packaging -type f | grep -E "${COMPONENT}|systemd|config"

# Copy service files from packaging
RUN mkdir -p /root/rpmbuild/SOURCES/${COMPONENT}/systemd /root/rpmbuild/SOURCES/${COMPONENT}/config/checkers && \
    cp -v /root/rpmbuild/SOURCES/packaging/${COMPONENT}/systemd/serviceradar-${COMPONENT}.service /root/rpmbuild/SOURCES/systemd/ || echo "Warning: Service file not found!"

# Dynamically copy config files based on component
RUN echo "Copying configuration files for ${COMPONENT}..." && \
    if [ -d "/root/rpmbuild/SOURCES/packaging/${COMPONENT}/config" ]; then \
        find "/root/rpmbuild/SOURCES/packaging/${COMPONENT}/config" -type f -name "*.json" | while read config_file; do \
            target_dir="/root/rpmbuild/SOURCES/config/$(dirname "$config_file" | sed "s|/root/rpmbuild/SOURCES/packaging/${COMPONENT}/config||")" && \
            mkdir -p "$target_dir" && \
            cp -v "$config_file" "$target_dir/" || echo "Warning: Failed to copy $config_file"; \
        done; \
    else \
        echo "No config directory found for ${COMPONENT}"; \
    fi

# Build the RPM
ARG VERSION=1.0.32
ARG RELEASE=1

RUN RPM_VERSION=$(echo ${VERSION} | sed 's/-/_/g') && \
    echo "Building RPM with VERSION=${RPM_VERSION} and RELEASE=${RELEASE}" && \
    rpmbuild -bb \
    --define "version ${RPM_VERSION}" \
    --define "release ${RELEASE}" \
    --define "component_dir ${COMPONENT}" \
    /root/rpmbuild/SPECS/serviceradar-${COMPONENT}.spec

# Final stage
FROM rockylinux:9
WORKDIR /rpms
COPY --from=rpm-builder /root/rpmbuild/RPMS/*/*.rpm .
CMD ["/bin/bash"]
