# Copyright 2025 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Multi-stage build for Next.js application
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY web/package*.json ./
COPY web/pnpm-lock.yaml* ./

# Install dependencies
RUN npm ci --only=production || npm install --production
RUN npm install --save-dev @types/react @types/react-dom @types/node typescript

# Copy application code
COPY web/ ./

# Use Docker-specific Next.js config for build
RUN cp next.config.docker.ts next.config.ts

# Build arguments for API configuration
ARG NEXT_PUBLIC_API_URL=http://localhost/api
ARG NEXT_INTERNAL_API_URL=http://core:8090
ARG API_KEY=changeme

# Set build-time environment variables explicitly for Docker builds
# These MUST be set before npm run build to ensure correct compilation
ENV DOCKER_BUILD=true \
    NEXT_INTERNAL_API_URL=http://core:8090 \
    NEXT_PUBLIC_API_URL=http://localhost/api \
    API_KEY=${API_KEY}

# Build the application with Docker-specific environment
# The environment variables above will be inlined into the compiled code
RUN NEXT_INTERNAL_API_URL=http://core:8090 \
    NEXT_PUBLIC_API_URL=http://localhost/api \
    DOCKER_BUILD=true \
    npm run build

# Note: URL fixes will be applied in runtime stage after copying files

# Runtime stage
FROM node:20-alpine

WORKDIR /app

# Install jq for JSON parsing in entrypoint
RUN apk add --no-cache jq

# Install runtime dependencies only
COPY --from=builder /app/package*.json ./
RUN npm ci --only=production || npm install --production

# Copy built application
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/next.config.ts ./
COPY --from=builder /app/tsconfig.json ./

# Copy entrypoint script
COPY docker/compose/entrypoint-web.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Create config directory
RUN mkdir -p /etc/serviceradar && \
    chown -R nextjs:nodejs /etc/serviceradar

# Remove the URL fix hack - we'll solve this properly with environment variables

# Set ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

# Expose port
EXPOSE 3000

# Environment variables for runtime
ENV NODE_ENV=production
ENV HOSTNAME=0.0.0.0
ENV PORT=3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/api/status', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"

# Use entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Start the application
CMD ["npm", "start"]