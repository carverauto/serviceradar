# Copyright 2025 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Multi-stage build for ServiceRadar Zen service (Rust)
FROM rust:latest AS builder

WORKDIR /usr/src

# Install dependencies for building
RUN apt-get update && apt-get install -y \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Copy proto files first in expected directory structure
COPY proto/ ./serviceradar-zen/proto/
COPY cmd/otel/proto/ ./otel/proto/

# Set working directory for zen build  
WORKDIR /usr/src/serviceradar-zen

# Copy project files for Zen service
COPY cmd/consumers/zen/Cargo.toml cmd/consumers/zen/Cargo.lock* ./
COPY cmd/consumers/zen/src ./src/
COPY docker/compose/build-zen-fixed.rs ./build.rs
COPY cmd/consumers/zen/data ./data/

# Build arguments for version info (unused in Rust but kept for consistency)
ARG VERSION=dev
ARG BUILD_ID=docker

# Build for current architecture (ARM64 or AMD64)
RUN cargo build --release
RUN cargo build --release --bin zen-put-rule

# Runtime stage - using Ubuntu for better compatibility
FROM ubuntu:22.04

# Install runtime dependencies including grpcurl for health checks
RUN apt-get update && \
    apt-get install -y \
        ca-certificates \
        curl \
        jq \
        netcat-openbsd \
        wget \
        libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && wget -qO- https://github.com/fullstorydev/grpcurl/releases/download/v1.8.9/grpcurl_1.8.9_linux_x86_64.tar.gz \
        | tar -xz -C /usr/local/bin grpcurl \
    && chmod +x /usr/local/bin/grpcurl

# Create non-root user
RUN useradd -m -u 1000 serviceradar

# Create necessary directories with proper permissions
RUN mkdir -p /etc/serviceradar /var/log/serviceradar /var/lib/serviceradar && \
    chown -R serviceradar:serviceradar /etc/serviceradar /var/log/serviceradar /var/lib/serviceradar

# Copy binaries from builder
COPY --from=builder /usr/src/serviceradar-zen/target/release/serviceradar-zen /usr/local/bin/serviceradar-zen
COPY --from=builder /usr/src/serviceradar-zen/target/release/zen-put-rule /usr/local/bin/zen-put-rule
RUN chmod +x /usr/local/bin/serviceradar-zen /usr/local/bin/zen-put-rule

# Copy rule data files
COPY cmd/consumers/zen/data /var/lib/serviceradar/data

# Copy entrypoint and rule installation scripts
COPY docker/compose/entrypoint-zen.sh /usr/local/bin/entrypoint.sh
COPY docker/compose/zen-install-rules.sh /usr/local/bin/zen-install-rules.sh
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/zen-install-rules.sh

# Switch to non-root user
USER serviceradar

# Set working directory
WORKDIR /var/lib/serviceradar

# Expose gRPC port
EXPOSE 50040

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["serviceradar-zen"]