# Build wait-for-port helper used by entrypoint scripts
FROM golang:1.22-alpine AS waitforport-builder

RUN apk add --no-cache git

WORKDIR /src

COPY go.mod go.sum ./
RUN go mod download

COPY cmd/tools/waitforport ./cmd/tools/waitforport
RUN CGO_ENABLED=0 GOOS=linux go build -o /wait-for-port ./cmd/tools/waitforport

# Multi-stage build for ServiceRadar Zen service (Rust) - FIXED
FROM rust:latest AS builder

# Build from workspace root so workspace dependencies resolve
WORKDIR /usr/src

# Install dependencies for building
RUN apt-get update && apt-get install -y \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Copy workspace manifests and ALL source code at once
# This eliminates the complex dependency caching that was causing hangs
COPY Cargo.toml Cargo.lock ./
COPY rust ./rust
COPY cmd ./cmd  
COPY proto ./proto

# Override build.rs if needed
COPY docker/compose/build-zen-fixed.rs ./cmd/consumers/zen/build.rs

# Build arguments for version info
ARG VERSION=dev
ARG BUILD_ID=docker

# Build the zen consumer directly - no pre-building of dependencies
RUN cargo build -p serviceradar-zen --release && \
    cargo build -p serviceradar-zen --release --bin zen-put-rule

# Runtime stage - using Ubuntu 24.04 for GLIBC 2.39 compatibility  
FROM ubuntu:24.04

# Install runtime dependencies (removed problematic grpcurl for now)
RUN apt-get update && \
    apt-get install -y \
        ca-certificates \
        curl \
        jq \
        netcat-openbsd \
        wget \
        libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user (let system assign UID automatically)
RUN useradd -m -s /bin/bash serviceradar

# Create necessary directories with proper permissions
RUN mkdir -p /etc/serviceradar /var/log/serviceradar /var/lib/serviceradar && \
    chown -R serviceradar:serviceradar /etc/serviceradar /var/log/serviceradar /var/lib/serviceradar

# Copy binaries from builder
COPY --from=builder /usr/src/target/release/serviceradar-zen /usr/local/bin/serviceradar-zen
COPY --from=builder /usr/src/target/release/zen-put-rule /usr/local/bin/zen-put-rule
RUN chmod +x /usr/local/bin/serviceradar-zen /usr/local/bin/zen-put-rule

COPY --from=waitforport-builder /wait-for-port /usr/local/bin/wait-for-port
RUN chmod +x /usr/local/bin/wait-for-port

# Copy rule data files
COPY cmd/consumers/zen/data /var/lib/serviceradar/data

# Copy entrypoint and rule installation scripts
COPY docker/compose/entrypoint-zen.sh /usr/local/bin/entrypoint.sh
COPY docker/compose/zen-install-rules.sh /usr/local/bin/zen-install-rules.sh
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/zen-install-rules.sh

# Switch to non-root user
USER serviceradar

# Set working directory  
WORKDIR /var/lib/serviceradar

# Expose gRPC port
EXPOSE 50040

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["serviceradar-zen"]
