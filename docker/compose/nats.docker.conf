# NATS Server Configuration for ServiceRadar Docker Deployment
server_name: nats-serviceradar-docker

# Listen on all interfaces for Docker networking
listen: 0.0.0.0:4222

# HTTP monitoring
http: 0.0.0.0:8222

# Enable JetStream for KV store
jetstream {
  # Directory to store JetStream data
  store_dir: /data/jetstream
  # Maximum storage size
  max_memory_store: 1G
  # Maximum disk storage
  max_file_store: 10G
}

# Enable mTLS for secure communication
tls {
  # Path to the server certificate
  cert_file: "/etc/serviceradar/certs/nats.pem"
  # Path to the server private key
  key_file: "/etc/serviceradar/certs/nats-key.pem"
  # Path to the root CA certificate for verifying clients
  ca_file: "/etc/serviceradar/certs/root.pem"

  # Require client certificates (enables mTLS)
  verify: true
  # Require and verify client certificates
  verify_and_map: true
}

# Authorization for ServiceRadar components
authorization {
  users: [
    {
      user: "CN=core.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=poller.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=agent.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=datasvc.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=sync.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=otel.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=flowgger.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=trapd.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=zen.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=db-event-writer.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=nats.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=mapper.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "CN=rperf-client.serviceradar,OU=Docker,O=ServiceRadar,L=San Francisco,ST=CA,C=US"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    },
    {
      user: "O=ServiceRadar"
      permissions: {
        publish: {
          allow: [">"]
        }
        subscribe: {
          allow: [">"]
        }
      }
    }
  ]
}

# Logging settings
debug: true
trace: false