# Copyright 2023 Carver Automation Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Stage 1: Build the Go binary
FROM --platform=linux/amd64 golang:1.24-bullseye AS go-builder

WORKDIR /src

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libc6-dev \
    libsqlite3-dev

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the source
COPY . .

# Build the core service
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
    go build -o serviceradar-core ./cmd/core

# Stage 2: Create RPM
FROM --platform=linux/amd64 rockylinux:9 AS rpm-builder

# Install RPM build tools and dependencies
RUN dnf install -y \
    rpm-build \
    rpmdevtools \
    systemd-devel \
    policycoreutils-python-utils

# Set up RPM build environment
RUN rpmdev-setuptree

# Create necessary directories
RUN mkdir -p /root/rpmbuild/SOURCES/config/checkers/sweep \
    /root/rpmbuild/SOURCES/systemd \
    /root/rpmbuild/SOURCES/selinux

# Copy built binary
COPY --from=go-builder /src/serviceradar-core /root/rpmbuild/BUILD/

# Copy entire packaging directory for reference
COPY packaging /root/rpmbuild/SOURCES/packaging/

# Copy spec file - use a known good one
COPY packaging/specs/serviceradar-core.spec /root/rpmbuild/SPECS/

# Copy required files from packaging structure
RUN cp -v /root/rpmbuild/SOURCES/packaging/core/config/core.json /root/rpmbuild/SOURCES/config/ && \
    cp -v /root/rpmbuild/SOURCES/packaging/core/config/checkers/sweep/sweep.json /root/rpmbuild/SOURCES/config/checkers/sweep/ && \
    cp -v /root/rpmbuild/SOURCES/packaging/core/systemd/serviceradar-core.service /root/rpmbuild/SOURCES/systemd/ && \
    cp -v /root/rpmbuild/SOURCES/packaging/selinux/*.te /root/rpmbuild/SOURCES/selinux/ 2>/dev/null || echo "No SELinux policies found"

# List copied files for debugging
RUN echo "=== Files in SOURCES directories ===" && \
    ls -la /root/rpmbuild/SOURCES/systemd/ && \
    ls -la /root/rpmbuild/SOURCES/config/ && \
    ls -la /root/rpmbuild/SOURCES/config/checkers/sweep/ && \
    ls -la /root/rpmbuild/SOURCES/selinux/ 2>/dev/null || echo "No selinux directory"

# Set default version (can be overridden at build time)
ARG VERSION=1.0.22
ARG RELEASE=1

# Process version to be RPM compatible (replace hyphens with underscores)
RUN RPM_VERSION=$(echo ${VERSION} | sed 's/-/_/g') && \
    echo "Original VERSION: ${VERSION}" && \
    echo "RPM-compatible VERSION: ${RPM_VERSION}" && \
    rpmbuild -bb \
    --define "version ${RPM_VERSION}" \
    --define "release ${RELEASE}" \
    /root/rpmbuild/SPECS/serviceradar-core.spec

# Stage 3: Create a minimal image with just the RPM
FROM --platform=linux/amd64 rockylinux:9
WORKDIR /rpms
COPY --from=rpm-builder /root/rpmbuild/RPMS/*/*.rpm .
CMD ["/bin/bash"]