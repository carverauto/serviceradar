// Licensed to ClickHouse, Inc. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. ClickHouse, Inc. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by make codegen DO NOT EDIT.
// source: lib/column/codegen/dynamic.tpl

package column

import (
	"database/sql"
	"encoding/json"
	"github.com/google/uuid"
	"time"
)

// inferProtonTypeFromGoType takes a Go interface{} and converts it to a Proton type.
// Returns empty string if type was not matched.
// This is best effort and does not work for all types.
// Optimally, users should provide a type using DynamicWithType.
func inferProtonTypeFromGoType(v interface{}) string {
	switch v.(type) {
	case float32:
		return "float32"
	case *float32:
		return "float32"
	case float64:
		return "float64"
	case *float64:
		return "float64"
	case int8:
		return "int8"
	case *int8:
		return "int8"
	case int16:
		return "int16"
	case *int16:
		return "int16"
	case int32:
		return "int32"
	case *int32:
		return "int32"
	case int64:
		return "int64"
	case *int64:
		return "int64"
	case uint8:
		return "uint8"
	case *uint8:
		return "uint8"
	case uint16:
		return "uint16"
	case *uint16:
		return "uint16"
	case uint32:
		return "uint32"
	case *uint32:
		return "uint32"
	case uint64:
		return "uint64"
	case *uint64:
		return "uint64"
	case string:
		return "string"
	case *string:
		return "string"
	case json.RawMessage:
		return "string"
	case *json.RawMessage:
		return "string"
	case sql.NullString:
		return "string"
	case *sql.NullString:
		return "string"
	case bool:
		return "bool"
	case *bool:
		return "bool"
	case sql.NullBool:
		return "bool"
	case *sql.NullBool:
		return "bool"
	case time.Time:
		return "datetime64(3)"
	case *time.Time:
		return "datetime64(3)"
	case sql.NullTime:
		return "datetime64(3)"
	case *sql.NullTime:
		return "datetime64(3)"
	case uuid.UUID:
		return "uuid"
	case *uuid.UUID:
		return "uuid"
	case []float32:
		return "array(float32)"
	case []*float32:
		return "array(float32)"
	case []float64:
		return "array(float64)"
	case []*float64:
		return "array(float64)"
	case []int8:
		return "array(int8)"
	case []*int8:
		return "array(int8)"
	case []int16:
		return "array(int16)"
	case []*int16:
		return "array(int16)"
	case []int32:
		return "array(int32)"
	case []*int32:
		return "array(int32)"
	case []int64:
		return "array(int64)"
	case []*int64:
		return "array(int64)"
	case []*uint8:
		return "array(uint8)"
	case []uint16:
		return "array(uint16)"
	case []*uint16:
		return "array(uint16)"
	case []uint32:
		return "array(uint32)"
	case []*uint32:
		return "array(uint32)"
	case []uint64:
		return "array(uint64)"
	case []*uint64:
		return "array(uint64)"
	case []string:
		return "array(string)"
	case []*string:
		return "array(string)"
	case []json.RawMessage:
		return "array(string)"
	case []*json.RawMessage:
		return "array(string)"
	case []sql.NullString:
		return "array(string)"
	case []*sql.NullString:
		return "array(string)"
	case []bool:
		return "array(bool)"
	case []*bool:
		return "array(bool)"
	case []sql.NullBool:
		return "array(bool)"
	case []*sql.NullBool:
		return "array(bool)"
	case []time.Time:
		return "array(datetime64(3))"
	case []*time.Time:
		return "array(datetime64(3))"
	case []sql.NullTime:
		return "array(datetime64(3))"
	case []*sql.NullTime:
		return "array(datetime64(3))"
	case []uuid.UUID:
		return "array(uuid)"
	case []*uuid.UUID:
		return "array(uuid)"
	case map[string]float32:
		return "map(string, float32)"
	case map[string]float64:
		return "map(string, float64)"
	case map[string]int8:
		return "map(string, int8)"
	case map[string]int16:
		return "map(string, int16)"
	case map[string]int32:
		return "map(string, int32)"
	case map[string]int64:
		return "map(string, int64)"
	case map[string]uint8:
		return "map(string, uint8)"
	case map[string]uint16:
		return "map(string, uint16)"
	case map[string]uint32:
		return "map(string, uint32)"
	case map[string]uint64:
		return "map(string, uint64)"
	case map[string]string:
		return "map(string, string)"
	case map[string]json.RawMessage:
		return "map(string, string)"
	case map[string]sql.NullString:
		return "map(string, string)"
	case map[string]bool:
		return "map(string, bool)"
	case map[string]sql.NullBool:
		return "map(string, bool)"
	case map[string]time.Time:
		return "map(string, datetime64(3))"
	case map[string]sql.NullTime:
		return "map(string, datetime64(3))"
	case map[string]uuid.UUID:
		return "map(string, uuid)"
	default:
		return ""
	}
}
